
project-slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046fc  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000668  080048e4  080048e4  000148e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f4c  08004f4c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004f4c  08004f4c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004f4c  08004f4c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f4c  08004f4c  00014f4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f50  08004f50  00014f50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004f54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  20000070  08004fc4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000274  08004fc4  00020274  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f7cf  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000234d  00000000  00000000  0002f868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d8  00000000  00000000  00031bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001018  00000000  00000000  00032c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aba0  00000000  00000000  00033ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012a74  00000000  00000000  0004e848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e458  00000000  00000000  000612bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ff714  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d08  00000000  00000000  000ff764  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000070 	.word	0x20000070
 8000204:	00000000 	.word	0x00000000
 8000208:	080048cc 	.word	0x080048cc

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000074 	.word	0x20000074
 8000224:	080048cc 	.word	0x080048cc

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	3c01      	subs	r4, #1
 8000364:	bf28      	it	cs
 8000366:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800036a:	d2e9      	bcs.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__aeabi_d2uiz>:
 80009c4:	004a      	lsls	r2, r1, #1
 80009c6:	d211      	bcs.n	80009ec <__aeabi_d2uiz+0x28>
 80009c8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009cc:	d211      	bcs.n	80009f2 <__aeabi_d2uiz+0x2e>
 80009ce:	d50d      	bpl.n	80009ec <__aeabi_d2uiz+0x28>
 80009d0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009d4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009d8:	d40e      	bmi.n	80009f8 <__aeabi_d2uiz+0x34>
 80009da:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009e2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009e6:	fa23 f002 	lsr.w	r0, r3, r2
 80009ea:	4770      	bx	lr
 80009ec:	f04f 0000 	mov.w	r0, #0
 80009f0:	4770      	bx	lr
 80009f2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009f6:	d102      	bne.n	80009fe <__aeabi_d2uiz+0x3a>
 80009f8:	f04f 30ff 	mov.w	r0, #4294967295
 80009fc:	4770      	bx	lr
 80009fe:	f04f 0000 	mov.w	r0, #0
 8000a02:	4770      	bx	lr

08000a04 <Delay>:
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );



void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
 8000a0c:	e002      	b.n	8000a14 <Delay+0x10>
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	3b01      	subs	r3, #1
 8000a12:	607b      	str	r3, [r7, #4]
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d1f9      	bne.n	8000a0e <Delay+0xa>
 8000a1a:	bf00      	nop
 8000a1c:	bf00      	nop
 8000a1e:	370c      	adds	r7, #12
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bc80      	pop	{r7}
 8000a24:	4770      	bx	lr

08000a26 <LCD_INIT>:

void LCD_INIT ( void )
{
 8000a26:	b580      	push	{r7, lr}
 8000a28:	b082      	sub	sp, #8
 8000a2a:	af02      	add	r7, sp, #8
	LCD_BackLed_Control(ENABLE);      
 8000a2c:	2001      	movs	r0, #1
 8000a2e:	f000 f829 	bl	8000a84 <LCD_BackLed_Control>
	LCD_Rst();
 8000a32:	f000 f80f 	bl	8000a54 <LCD_Rst>
	LCD_REG_Config();
 8000a36:	f000 f85f 	bl	8000af8 <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320, BACKGROUND);
 8000a3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a3e:	9300      	str	r3, [sp, #0]
 8000a40:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000a44:	22f0      	movs	r2, #240	; 0xf0
 8000a46:	2100      	movs	r1, #0
 8000a48:	2000      	movs	r0, #0
 8000a4a:	f000 f9e6 	bl	8000e1a <LCD_Clear>
}
 8000a4e:	bf00      	nop
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}

08000a54 <LCD_Rst>:



void LCD_Rst ( void )
{			
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	2102      	movs	r1, #2
 8000a5c:	4807      	ldr	r0, [pc, #28]	; (8000a7c <LCD_Rst+0x28>)
 8000a5e:	f001 fbd0 	bl	8002202 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 8000a62:	4807      	ldr	r0, [pc, #28]	; (8000a80 <LCD_Rst+0x2c>)
 8000a64:	f7ff ffce 	bl	8000a04 <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 8000a68:	2201      	movs	r2, #1
 8000a6a:	2102      	movs	r1, #2
 8000a6c:	4803      	ldr	r0, [pc, #12]	; (8000a7c <LCD_Rst+0x28>)
 8000a6e:	f001 fbc8 	bl	8002202 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 8000a72:	4803      	ldr	r0, [pc, #12]	; (8000a80 <LCD_Rst+0x2c>)
 8000a74:	f7ff ffc6 	bl	8000a04 <Delay>
}
 8000a78:	bf00      	nop
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	40011800 	.word	0x40011800
 8000a80:	0002bffc 	.word	0x0002bffc

08000a84 <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 8000a8e:	79fb      	ldrb	r3, [r7, #7]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d006      	beq.n	8000aa2 <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 8000a94:	2200      	movs	r2, #0
 8000a96:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a9a:	4807      	ldr	r0, [pc, #28]	; (8000ab8 <LCD_BackLed_Control+0x34>)
 8000a9c:	f001 fbb1 	bl	8002202 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 8000aa0:	e005      	b.n	8000aae <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000aa8:	4803      	ldr	r0, [pc, #12]	; (8000ab8 <LCD_BackLed_Control+0x34>)
 8000aaa:	f001 fbaa 	bl	8002202 <HAL_GPIO_WritePin>
}
 8000aae:	bf00      	nop
 8000ab0:	3708      	adds	r7, #8
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40011400 	.word	0x40011400

08000abc <LCD_Write_Cmd>:




void LCD_Write_Cmd ( uint16_t usCmd )
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000ac6:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000aca:	88fb      	ldrh	r3, [r7, #6]
 8000acc:	8013      	strh	r3, [r2, #0]
}
 8000ace:	bf00      	nop
 8000ad0:	370c      	adds	r7, #12
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bc80      	pop	{r7}
 8000ad6:	4770      	bx	lr

08000ad8 <LCD_Write_Data>:




void LCD_Write_Data ( uint16_t usData )
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4603      	mov	r3, r0
 8000ae0:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000ae2:	4a04      	ldr	r2, [pc, #16]	; (8000af4 <LCD_Write_Data+0x1c>)
 8000ae4:	88fb      	ldrh	r3, [r7, #6]
 8000ae6:	8013      	strh	r3, [r2, #0]
}
 8000ae8:	bf00      	nop
 8000aea:	370c      	adds	r7, #12
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bc80      	pop	{r7}
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	60020000 	.word	0x60020000

08000af8 <LCD_REG_Config>:
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 8000afc:	20cf      	movs	r0, #207	; 0xcf
 8000afe:	f7ff ffdd 	bl	8000abc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 8000b02:	2000      	movs	r0, #0
 8000b04:	f7ff ffe8 	bl	8000ad8 <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 8000b08:	2081      	movs	r0, #129	; 0x81
 8000b0a:	f7ff ffe5 	bl	8000ad8 <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 8000b0e:	2030      	movs	r0, #48	; 0x30
 8000b10:	f7ff ffe2 	bl	8000ad8 <LCD_Write_Data>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 8000b14:	20ed      	movs	r0, #237	; 0xed
 8000b16:	f7ff ffd1 	bl	8000abc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 8000b1a:	2064      	movs	r0, #100	; 0x64
 8000b1c:	f7ff ffdc 	bl	8000ad8 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8000b20:	2003      	movs	r0, #3
 8000b22:	f7ff ffd9 	bl	8000ad8 <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 8000b26:	2012      	movs	r0, #18
 8000b28:	f7ff ffd6 	bl	8000ad8 <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 8000b2c:	2081      	movs	r0, #129	; 0x81
 8000b2e:	f7ff ffd3 	bl	8000ad8 <LCD_Write_Data>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 8000b32:	20e8      	movs	r0, #232	; 0xe8
 8000b34:	f7ff ffc2 	bl	8000abc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 8000b38:	2085      	movs	r0, #133	; 0x85
 8000b3a:	f7ff ffcd 	bl	8000ad8 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8000b3e:	2010      	movs	r0, #16
 8000b40:	f7ff ffca 	bl	8000ad8 <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 8000b44:	2078      	movs	r0, #120	; 0x78
 8000b46:	f7ff ffc7 	bl	8000ad8 <LCD_Write_Data>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 8000b4a:	20cb      	movs	r0, #203	; 0xcb
 8000b4c:	f7ff ffb6 	bl	8000abc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 8000b50:	2039      	movs	r0, #57	; 0x39
 8000b52:	f7ff ffc1 	bl	8000ad8 <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 8000b56:	202c      	movs	r0, #44	; 0x2c
 8000b58:	f7ff ffbe 	bl	8000ad8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000b5c:	2000      	movs	r0, #0
 8000b5e:	f7ff ffbb 	bl	8000ad8 <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 8000b62:	2034      	movs	r0, #52	; 0x34
 8000b64:	f7ff ffb8 	bl	8000ad8 <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 8000b68:	2002      	movs	r0, #2
 8000b6a:	f7ff ffb5 	bl	8000ad8 <LCD_Write_Data>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 8000b6e:	20f7      	movs	r0, #247	; 0xf7
 8000b70:	f7ff ffa4 	bl	8000abc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 8000b74:	2020      	movs	r0, #32
 8000b76:	f7ff ffaf 	bl	8000ad8 <LCD_Write_Data>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 8000b7a:	20ea      	movs	r0, #234	; 0xea
 8000b7c:	f7ff ff9e 	bl	8000abc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000b80:	2000      	movs	r0, #0
 8000b82:	f7ff ffa9 	bl	8000ad8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000b86:	2000      	movs	r0, #0
 8000b88:	f7ff ffa6 	bl	8000ad8 <LCD_Write_Data>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 8000b8c:	20b1      	movs	r0, #177	; 0xb1
 8000b8e:	f7ff ff95 	bl	8000abc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000b92:	2000      	movs	r0, #0
 8000b94:	f7ff ffa0 	bl	8000ad8 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8000b98:	201b      	movs	r0, #27
 8000b9a:	f7ff ff9d 	bl	8000ad8 <LCD_Write_Data>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 8000b9e:	20b6      	movs	r0, #182	; 0xb6
 8000ba0:	f7ff ff8c 	bl	8000abc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 8000ba4:	200a      	movs	r0, #10
 8000ba6:	f7ff ff97 	bl	8000ad8 <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 8000baa:	20a2      	movs	r0, #162	; 0xa2
 8000bac:	f7ff ff94 	bl	8000ad8 <LCD_Write_Data>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 8000bb0:	20c0      	movs	r0, #192	; 0xc0
 8000bb2:	f7ff ff83 	bl	8000abc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 8000bb6:	2035      	movs	r0, #53	; 0x35
 8000bb8:	f7ff ff8e 	bl	8000ad8 <LCD_Write_Data>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 8000bbc:	20c1      	movs	r0, #193	; 0xc1
 8000bbe:	f7ff ff7d 	bl	8000abc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 8000bc2:	2011      	movs	r0, #17
 8000bc4:	f7ff ff88 	bl	8000ad8 <LCD_Write_Data>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 8000bc8:	20c5      	movs	r0, #197	; 0xc5
 8000bca:	f7ff ff77 	bl	8000abc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 8000bce:	2045      	movs	r0, #69	; 0x45
 8000bd0:	f7ff ff82 	bl	8000ad8 <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 8000bd4:	2045      	movs	r0, #69	; 0x45
 8000bd6:	f7ff ff7f 	bl	8000ad8 <LCD_Write_Data>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 8000bda:	20c7      	movs	r0, #199	; 0xc7
 8000bdc:	f7ff ff6e 	bl	8000abc <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 8000be0:	20a2      	movs	r0, #162	; 0xa2
 8000be2:	f7ff ff79 	bl	8000ad8 <LCD_Write_Data>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 8000be6:	20f2      	movs	r0, #242	; 0xf2
 8000be8:	f7ff ff68 	bl	8000abc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000bec:	2000      	movs	r0, #0
 8000bee:	f7ff ff73 	bl	8000ad8 <LCD_Write_Data>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 8000bf2:	2026      	movs	r0, #38	; 0x26
 8000bf4:	f7ff ff62 	bl	8000abc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 8000bf8:	2001      	movs	r0, #1
 8000bfa:	f7ff ff6d 	bl	8000ad8 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 8000bfe:	20e0      	movs	r0, #224	; 0xe0
 8000c00:	f7ff ff5c 	bl	8000abc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 8000c04:	200f      	movs	r0, #15
 8000c06:	f7ff ff67 	bl	8000ad8 <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 8000c0a:	2026      	movs	r0, #38	; 0x26
 8000c0c:	f7ff ff64 	bl	8000ad8 <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 8000c10:	2024      	movs	r0, #36	; 0x24
 8000c12:	f7ff ff61 	bl	8000ad8 <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 8000c16:	200b      	movs	r0, #11
 8000c18:	f7ff ff5e 	bl	8000ad8 <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 8000c1c:	200e      	movs	r0, #14
 8000c1e:	f7ff ff5b 	bl	8000ad8 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8000c22:	2009      	movs	r0, #9
 8000c24:	f7ff ff58 	bl	8000ad8 <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 8000c28:	2054      	movs	r0, #84	; 0x54
 8000c2a:	f7ff ff55 	bl	8000ad8 <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 8000c2e:	20a8      	movs	r0, #168	; 0xa8
 8000c30:	f7ff ff52 	bl	8000ad8 <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 8000c34:	2046      	movs	r0, #70	; 0x46
 8000c36:	f7ff ff4f 	bl	8000ad8 <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 8000c3a:	200c      	movs	r0, #12
 8000c3c:	f7ff ff4c 	bl	8000ad8 <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 8000c40:	2017      	movs	r0, #23
 8000c42:	f7ff ff49 	bl	8000ad8 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8000c46:	2009      	movs	r0, #9
 8000c48:	f7ff ff46 	bl	8000ad8 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8000c4c:	200f      	movs	r0, #15
 8000c4e:	f7ff ff43 	bl	8000ad8 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8000c52:	2007      	movs	r0, #7
 8000c54:	f7ff ff40 	bl	8000ad8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000c58:	2000      	movs	r0, #0
 8000c5a:	f7ff ff3d 	bl	8000ad8 <LCD_Write_Data>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 8000c5e:	20e1      	movs	r0, #225	; 0xe1
 8000c60:	f7ff ff2c 	bl	8000abc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000c64:	2000      	movs	r0, #0
 8000c66:	f7ff ff37 	bl	8000ad8 <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 8000c6a:	2019      	movs	r0, #25
 8000c6c:	f7ff ff34 	bl	8000ad8 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8000c70:	201b      	movs	r0, #27
 8000c72:	f7ff ff31 	bl	8000ad8 <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 8000c76:	2004      	movs	r0, #4
 8000c78:	f7ff ff2e 	bl	8000ad8 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8000c7c:	2010      	movs	r0, #16
 8000c7e:	f7ff ff2b 	bl	8000ad8 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8000c82:	2007      	movs	r0, #7
 8000c84:	f7ff ff28 	bl	8000ad8 <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 8000c88:	202a      	movs	r0, #42	; 0x2a
 8000c8a:	f7ff ff25 	bl	8000ad8 <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 8000c8e:	2047      	movs	r0, #71	; 0x47
 8000c90:	f7ff ff22 	bl	8000ad8 <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 8000c94:	2039      	movs	r0, #57	; 0x39
 8000c96:	f7ff ff1f 	bl	8000ad8 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8000c9a:	2003      	movs	r0, #3
 8000c9c:	f7ff ff1c 	bl	8000ad8 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8000ca0:	2006      	movs	r0, #6
 8000ca2:	f7ff ff19 	bl	8000ad8 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8000ca6:	2006      	movs	r0, #6
 8000ca8:	f7ff ff16 	bl	8000ad8 <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 8000cac:	2030      	movs	r0, #48	; 0x30
 8000cae:	f7ff ff13 	bl	8000ad8 <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 8000cb2:	2038      	movs	r0, #56	; 0x38
 8000cb4:	f7ff ff10 	bl	8000ad8 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8000cb8:	200f      	movs	r0, #15
 8000cba:	f7ff ff0d 	bl	8000ad8 <LCD_Write_Data>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 8000cbe:	2036      	movs	r0, #54	; 0x36
 8000cc0:	f7ff fefc 	bl	8000abc <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );    
 8000cc4:	20c8      	movs	r0, #200	; 0xc8
 8000cc6:	f7ff ff07 	bl	8000ad8 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 8000cca:	202a      	movs	r0, #42	; 0x2a
 8000ccc:	f7ff fef6 	bl	8000abc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000cd0:	2000      	movs	r0, #0
 8000cd2:	f7ff ff01 	bl	8000ad8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000cd6:	2000      	movs	r0, #0
 8000cd8:	f7ff fefe 	bl	8000ad8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000cdc:	2000      	movs	r0, #0
 8000cde:	f7ff fefb 	bl	8000ad8 <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 8000ce2:	20ef      	movs	r0, #239	; 0xef
 8000ce4:	f7ff fef8 	bl	8000ad8 <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 8000ce8:	202b      	movs	r0, #43	; 0x2b
 8000cea:	f7ff fee7 	bl	8000abc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000cee:	2000      	movs	r0, #0
 8000cf0:	f7ff fef2 	bl	8000ad8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000cf4:	2000      	movs	r0, #0
 8000cf6:	f7ff feef 	bl	8000ad8 <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	f7ff feec 	bl	8000ad8 <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 8000d00:	203f      	movs	r0, #63	; 0x3f
 8000d02:	f7ff fee9 	bl	8000ad8 <LCD_Write_Data>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 8000d06:	203a      	movs	r0, #58	; 0x3a
 8000d08:	f7ff fed8 	bl	8000abc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 8000d0c:	2055      	movs	r0, #85	; 0x55
 8000d0e:	f7ff fee3 	bl	8000ad8 <LCD_Write_Data>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 8000d12:	2011      	movs	r0, #17
 8000d14:	f7ff fed2 	bl	8000abc <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 8000d18:	4803      	ldr	r0, [pc, #12]	; (8000d28 <LCD_REG_Config+0x230>)
 8000d1a:	f7ff fe73 	bl	8000a04 <Delay>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 8000d1e:	2029      	movs	r0, #41	; 0x29
 8000d20:	f7ff fecc 	bl	8000abc <LCD_Write_Cmd>
	
	
}
 8000d24:	bf00      	nop
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	0002bffc 	.word	0x0002bffc

08000d2c <LCD_OpenWindow>:



void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 8000d2c:	b590      	push	{r4, r7, lr}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4604      	mov	r4, r0
 8000d34:	4608      	mov	r0, r1
 8000d36:	4611      	mov	r1, r2
 8000d38:	461a      	mov	r2, r3
 8000d3a:	4623      	mov	r3, r4
 8000d3c:	80fb      	strh	r3, [r7, #6]
 8000d3e:	4603      	mov	r3, r0
 8000d40:	80bb      	strh	r3, [r7, #4]
 8000d42:	460b      	mov	r3, r1
 8000d44:	807b      	strh	r3, [r7, #2]
 8000d46:	4613      	mov	r3, r2
 8000d48:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 8000d4a:	202a      	movs	r0, #42	; 0x2a
 8000d4c:	f7ff feb6 	bl	8000abc <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 8000d50:	88fb      	ldrh	r3, [r7, #6]
 8000d52:	0a1b      	lsrs	r3, r3, #8
 8000d54:	b29b      	uxth	r3, r3
 8000d56:	4618      	mov	r0, r3
 8000d58:	f7ff febe 	bl	8000ad8 <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 8000d5c:	88fb      	ldrh	r3, [r7, #6]
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	b29b      	uxth	r3, r3
 8000d62:	4618      	mov	r0, r3
 8000d64:	f7ff feb8 	bl	8000ad8 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 8000d68:	88fa      	ldrh	r2, [r7, #6]
 8000d6a:	887b      	ldrh	r3, [r7, #2]
 8000d6c:	4413      	add	r3, r2
 8000d6e:	3b01      	subs	r3, #1
 8000d70:	121b      	asrs	r3, r3, #8
 8000d72:	b29b      	uxth	r3, r3
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff feaf 	bl	8000ad8 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 8000d7a:	88fa      	ldrh	r2, [r7, #6]
 8000d7c:	887b      	ldrh	r3, [r7, #2]
 8000d7e:	4413      	add	r3, r2
 8000d80:	b29b      	uxth	r3, r3
 8000d82:	3b01      	subs	r3, #1
 8000d84:	b29b      	uxth	r3, r3
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	b29b      	uxth	r3, r3
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f7ff fea4 	bl	8000ad8 <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 8000d90:	202b      	movs	r0, #43	; 0x2b
 8000d92:	f7ff fe93 	bl	8000abc <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 8000d96:	88bb      	ldrh	r3, [r7, #4]
 8000d98:	0a1b      	lsrs	r3, r3, #8
 8000d9a:	b29b      	uxth	r3, r3
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff fe9b 	bl	8000ad8 <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 8000da2:	88bb      	ldrh	r3, [r7, #4]
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	b29b      	uxth	r3, r3
 8000da8:	4618      	mov	r0, r3
 8000daa:	f7ff fe95 	bl	8000ad8 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 8000dae:	88ba      	ldrh	r2, [r7, #4]
 8000db0:	883b      	ldrh	r3, [r7, #0]
 8000db2:	4413      	add	r3, r2
 8000db4:	3b01      	subs	r3, #1
 8000db6:	121b      	asrs	r3, r3, #8
 8000db8:	b29b      	uxth	r3, r3
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f7ff fe8c 	bl	8000ad8 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 8000dc0:	88ba      	ldrh	r2, [r7, #4]
 8000dc2:	883b      	ldrh	r3, [r7, #0]
 8000dc4:	4413      	add	r3, r2
 8000dc6:	b29b      	uxth	r3, r3
 8000dc8:	3b01      	subs	r3, #1
 8000dca:	b29b      	uxth	r3, r3
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff fe81 	bl	8000ad8 <LCD_Write_Data>
	
}
 8000dd6:	bf00      	nop
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd90      	pop	{r4, r7, pc}

08000dde <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b084      	sub	sp, #16
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	6078      	str	r0, [r7, #4]
 8000de6:	460b      	mov	r3, r1
 8000de8:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 8000dea:	2300      	movs	r3, #0
 8000dec:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 8000dee:	202c      	movs	r0, #44	; 0x2c
 8000df0:	f7ff fe64 	bl	8000abc <LCD_Write_Cmd>
		
	for ( i = 0; i < usPoint; i ++ )
 8000df4:	2300      	movs	r3, #0
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	e006      	b.n	8000e08 <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 8000dfa:	887b      	ldrh	r3, [r7, #2]
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff fe6b 	bl	8000ad8 <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	3301      	adds	r3, #1
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	68fa      	ldr	r2, [r7, #12]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	d3f4      	bcc.n	8000dfa <LCD_FillColor+0x1c>
		
}
 8000e10:	bf00      	nop
 8000e12:	bf00      	nop
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <LCD_Clear>:




void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 8000e1a:	b590      	push	{r4, r7, lr}
 8000e1c:	b083      	sub	sp, #12
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	4604      	mov	r4, r0
 8000e22:	4608      	mov	r0, r1
 8000e24:	4611      	mov	r1, r2
 8000e26:	461a      	mov	r2, r3
 8000e28:	4623      	mov	r3, r4
 8000e2a:	80fb      	strh	r3, [r7, #6]
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	80bb      	strh	r3, [r7, #4]
 8000e30:	460b      	mov	r3, r1
 8000e32:	807b      	strh	r3, [r7, #2]
 8000e34:	4613      	mov	r3, r2
 8000e36:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 8000e38:	883b      	ldrh	r3, [r7, #0]
 8000e3a:	887a      	ldrh	r2, [r7, #2]
 8000e3c:	88b9      	ldrh	r1, [r7, #4]
 8000e3e:	88f8      	ldrh	r0, [r7, #6]
 8000e40:	f7ff ff74 	bl	8000d2c <LCD_OpenWindow>
	LCD_FillColor ( usWidth * usHeight, usColor );		
 8000e44:	887b      	ldrh	r3, [r7, #2]
 8000e46:	883a      	ldrh	r2, [r7, #0]
 8000e48:	fb02 f303 	mul.w	r3, r2, r3
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	8b3b      	ldrh	r3, [r7, #24]
 8000e50:	4619      	mov	r1, r3
 8000e52:	4610      	mov	r0, r2
 8000e54:	f7ff ffc3 	bl	8000dde <LCD_FillColor>
	
}
 8000e58:	bf00      	nop
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd90      	pop	{r4, r7, pc}

08000e60 <LCD_DrawChar>:
	
}   


void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar )
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	4603      	mov	r3, r0
 8000e68:	80fb      	strh	r3, [r7, #6]
 8000e6a:	460b      	mov	r3, r1
 8000e6c:	80bb      	strh	r3, [r7, #4]
 8000e6e:	4613      	mov	r3, r2
 8000e70:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	
	ucRelativePositon = cChar - ' ';
 8000e72:	78fb      	ldrb	r3, [r7, #3]
 8000e74:	3b20      	subs	r3, #32
 8000e76:	733b      	strb	r3, [r7, #12]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 8000e78:	88b9      	ldrh	r1, [r7, #4]
 8000e7a:	88f8      	ldrh	r0, [r7, #6]
 8000e7c:	2310      	movs	r3, #16
 8000e7e:	2208      	movs	r2, #8
 8000e80:	f7ff ff54 	bl	8000d2c <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 8000e84:	202c      	movs	r0, #44	; 0x2c
 8000e86:	f7ff fe19 	bl	8000abc <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	73bb      	strb	r3, [r7, #14]
 8000e8e:	e023      	b.n	8000ed8 <LCD_DrawChar+0x78>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 8000e90:	7b3a      	ldrb	r2, [r7, #12]
 8000e92:	7bbb      	ldrb	r3, [r7, #14]
 8000e94:	4914      	ldr	r1, [pc, #80]	; (8000ee8 <LCD_DrawChar+0x88>)
 8000e96:	0112      	lsls	r2, r2, #4
 8000e98:	440a      	add	r2, r1
 8000e9a:	4413      	add	r3, r2
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	73fb      	strb	r3, [r7, #15]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	737b      	strb	r3, [r7, #13]
 8000ea4:	e012      	b.n	8000ecc <LCD_DrawChar+0x6c>
		{
			if ( ucTemp & 0x01 )
 8000ea6:	7bfb      	ldrb	r3, [r7, #15]
 8000ea8:	f003 0301 	and.w	r3, r3, #1
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d003      	beq.n	8000eb8 <LCD_DrawChar+0x58>
				LCD_Write_Data ( 0x001F );
 8000eb0:	201f      	movs	r0, #31
 8000eb2:	f7ff fe11 	bl	8000ad8 <LCD_Write_Data>
 8000eb6:	e003      	b.n	8000ec0 <LCD_DrawChar+0x60>
			
			else
				LCD_Write_Data (  0xFFFF );								
 8000eb8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000ebc:	f7ff fe0c 	bl	8000ad8 <LCD_Write_Data>
			
			ucTemp >>= 1;		
 8000ec0:	7bfb      	ldrb	r3, [r7, #15]
 8000ec2:	085b      	lsrs	r3, r3, #1
 8000ec4:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8000ec6:	7b7b      	ldrb	r3, [r7, #13]
 8000ec8:	3301      	adds	r3, #1
 8000eca:	737b      	strb	r3, [r7, #13]
 8000ecc:	7b7b      	ldrb	r3, [r7, #13]
 8000ece:	2b07      	cmp	r3, #7
 8000ed0:	d9e9      	bls.n	8000ea6 <LCD_DrawChar+0x46>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8000ed2:	7bbb      	ldrb	r3, [r7, #14]
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	73bb      	strb	r3, [r7, #14]
 8000ed8:	7bbb      	ldrb	r3, [r7, #14]
 8000eda:	2b0f      	cmp	r3, #15
 8000edc:	d9d8      	bls.n	8000e90 <LCD_DrawChar+0x30>
			
		}
		
	}
	
}
 8000ede:	bf00      	nop
 8000ee0:	bf00      	nop
 8000ee2:	3710      	adds	r7, #16
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	08004910 	.word	0x08004910

08000eec <LCD_DrawString>:




void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr )
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	603a      	str	r2, [r7, #0]
 8000ef6:	80fb      	strh	r3, [r7, #6]
 8000ef8:	460b      	mov	r3, r1
 8000efa:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 8000efc:	e01c      	b.n	8000f38 <LCD_DrawString+0x4c>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 8000efe:	88fb      	ldrh	r3, [r7, #6]
 8000f00:	2be8      	cmp	r3, #232	; 0xe8
 8000f02:	d904      	bls.n	8000f0e <LCD_DrawString+0x22>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8000f04:	2300      	movs	r3, #0
 8000f06:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 8000f08:	88bb      	ldrh	r3, [r7, #4]
 8000f0a:	3310      	adds	r3, #16
 8000f0c:	80bb      	strh	r3, [r7, #4]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 8000f0e:	88bb      	ldrh	r3, [r7, #4]
 8000f10:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8000f14:	d903      	bls.n	8000f1e <LCD_DrawString+0x32>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8000f16:	2300      	movs	r3, #0
 8000f18:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	80bb      	strh	r3, [r7, #4]
		}
		
		LCD_DrawChar ( usC, usP, * pStr );
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	781a      	ldrb	r2, [r3, #0]
 8000f22:	88b9      	ldrh	r1, [r7, #4]
 8000f24:	88fb      	ldrh	r3, [r7, #6]
 8000f26:	4618      	mov	r0, r3
 8000f28:	f7ff ff9a 	bl	8000e60 <LCD_DrawChar>
		
		pStr ++;
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	3301      	adds	r3, #1
 8000f30:	603b      	str	r3, [r7, #0]
		
		usC += WIDTH_EN_CHAR;
 8000f32:	88fb      	ldrh	r3, [r7, #6]
 8000f34:	3308      	adds	r3, #8
 8000f36:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d1de      	bne.n	8000efe <LCD_DrawString+0x12>
		
	}
	
}
 8000f40:	bf00      	nop
 8000f42:	bf00      	nop
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
	...

08000f4c <HAL_UART_RxCpltCallback>:
static void MX_USART1_UART_Init(void);
static void MX_I2C1_Init(void);
static void MX_TIM1_Init(void);
/* USER CODE BEGIN PFP */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
    if(huart->Instance == huart1.Instance)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <HAL_UART_RxCpltCallback+0x28>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d104      	bne.n	8000f6a <HAL_UART_RxCpltCallback+0x1e>
    {
    HAL_UART_Receive_IT(&huart1, RX_BUFFER, BUFFER_LEN);
 8000f60:	2240      	movs	r2, #64	; 0x40
 8000f62:	4905      	ldr	r1, [pc, #20]	; (8000f78 <HAL_UART_RxCpltCallback+0x2c>)
 8000f64:	4803      	ldr	r0, [pc, #12]	; (8000f74 <HAL_UART_RxCpltCallback+0x28>)
 8000f66:	f002 fad6 	bl	8003516 <HAL_UART_Receive_IT>
    }
}
 8000f6a:	bf00      	nop
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	20000128 	.word	0x20000128
 8000f78:	200001b4 	.word	0x200001b4
 8000f7c:	00000000 	.word	0x00000000

08000f80 <handleDistanceSensor>:

void handleDistanceSensor(){
 8000f80:	b598      	push	{r3, r4, r7, lr}
 8000f82:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000f84:	2201      	movs	r2, #1
 8000f86:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f8a:	484f      	ldr	r0, [pc, #316]	; (80010c8 <handleDistanceSensor+0x148>)
 8000f8c:	f001 f939 	bl	8002202 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000f90:	4b4e      	ldr	r3, [pc, #312]	; (80010cc <handleDistanceSensor+0x14c>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	2200      	movs	r2, #0
 8000f96:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER (&htim1) < 10);  // wait for 10 us
 8000f98:	bf00      	nop
 8000f9a:	4b4c      	ldr	r3, [pc, #304]	; (80010cc <handleDistanceSensor+0x14c>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fa0:	2b09      	cmp	r3, #9
 8000fa2:	d9fa      	bls.n	8000f9a <handleDistanceSensor+0x1a>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000faa:	4847      	ldr	r0, [pc, #284]	; (80010c8 <handleDistanceSensor+0x148>)
 8000fac:	f001 f929 	bl	8002202 <HAL_GPIO_WritePin>
	pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 8000fb0:	f000 fcfe 	bl	80019b0 <HAL_GetTick>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	4a46      	ldr	r2, [pc, #280]	; (80010d0 <handleDistanceSensor+0x150>)
 8000fb8:	6013      	str	r3, [r2, #0]
	// wait for the echo pin to go high
	while (!(HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 10 >  HAL_GetTick());
 8000fba:	bf00      	nop
 8000fbc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fc0:	4841      	ldr	r0, [pc, #260]	; (80010c8 <handleDistanceSensor+0x148>)
 8000fc2:	f001 f907 	bl	80021d4 <HAL_GPIO_ReadPin>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d108      	bne.n	8000fde <handleDistanceSensor+0x5e>
 8000fcc:	4b40      	ldr	r3, [pc, #256]	; (80010d0 <handleDistanceSensor+0x150>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f103 040a 	add.w	r4, r3, #10
 8000fd4:	f000 fcec 	bl	80019b0 <HAL_GetTick>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	429c      	cmp	r4, r3
 8000fdc:	d8ee      	bhi.n	8000fbc <handleDistanceSensor+0x3c>
	Value1 = __HAL_TIM_GET_COUNTER (&htim1);
 8000fde:	4b3b      	ldr	r3, [pc, #236]	; (80010cc <handleDistanceSensor+0x14c>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fe4:	4a3b      	ldr	r2, [pc, #236]	; (80010d4 <handleDistanceSensor+0x154>)
 8000fe6:	6013      	str	r3, [r2, #0]
	pMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 8000fe8:	f000 fce2 	bl	80019b0 <HAL_GetTick>
 8000fec:	4603      	mov	r3, r0
 8000fee:	4a38      	ldr	r2, [pc, #224]	; (80010d0 <handleDistanceSensor+0x150>)
 8000ff0:	6013      	str	r3, [r2, #0]
	// wait for the echo pin to go low
	while ((HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 50 > HAL_GetTick());
 8000ff2:	bf00      	nop
 8000ff4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ff8:	4833      	ldr	r0, [pc, #204]	; (80010c8 <handleDistanceSensor+0x148>)
 8000ffa:	f001 f8eb 	bl	80021d4 <HAL_GPIO_ReadPin>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d008      	beq.n	8001016 <handleDistanceSensor+0x96>
 8001004:	4b32      	ldr	r3, [pc, #200]	; (80010d0 <handleDistanceSensor+0x150>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f103 0432 	add.w	r4, r3, #50	; 0x32
 800100c:	f000 fcd0 	bl	80019b0 <HAL_GetTick>
 8001010:	4603      	mov	r3, r0
 8001012:	429c      	cmp	r4, r3
 8001014:	d8ee      	bhi.n	8000ff4 <handleDistanceSensor+0x74>
	Value2 = __HAL_TIM_GET_COUNTER (&htim1);
 8001016:	4b2d      	ldr	r3, [pc, #180]	; (80010cc <handleDistanceSensor+0x14c>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800101c:	4a2e      	ldr	r2, [pc, #184]	; (80010d8 <handleDistanceSensor+0x158>)
 800101e:	6013      	str	r3, [r2, #0]
	Distance = (Value2-Value1)* 0.034/2;
 8001020:	4b2d      	ldr	r3, [pc, #180]	; (80010d8 <handleDistanceSensor+0x158>)
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	4b2b      	ldr	r3, [pc, #172]	; (80010d4 <handleDistanceSensor+0x154>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff fa3e 	bl	80004ac <__aeabi_ui2d>
 8001030:	a323      	add	r3, pc, #140	; (adr r3, 80010c0 <handleDistanceSensor+0x140>)
 8001032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001036:	f7ff fab3 	bl	80005a0 <__aeabi_dmul>
 800103a:	4602      	mov	r2, r0
 800103c:	460b      	mov	r3, r1
 800103e:	4610      	mov	r0, r2
 8001040:	4619      	mov	r1, r3
 8001042:	f04f 0200 	mov.w	r2, #0
 8001046:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800104a:	f7ff fbd3 	bl	80007f4 <__aeabi_ddiv>
 800104e:	4602      	mov	r2, r0
 8001050:	460b      	mov	r3, r1
 8001052:	4610      	mov	r0, r2
 8001054:	4619      	mov	r1, r3
 8001056:	f7ff fcb5 	bl	80009c4 <__aeabi_d2uiz>
 800105a:	4603      	mov	r3, r0
 800105c:	b29a      	uxth	r2, r3
 800105e:	4b1f      	ldr	r3, [pc, #124]	; (80010dc <handleDistanceSensor+0x15c>)
 8001060:	801a      	strh	r2, [r3, #0]
	LCD_DrawString(10, 100, "Distance: ");
 8001062:	4a1f      	ldr	r2, [pc, #124]	; (80010e0 <handleDistanceSensor+0x160>)
 8001064:	2164      	movs	r1, #100	; 0x64
 8001066:	200a      	movs	r0, #10
 8001068:	f7ff ff40 	bl	8000eec <LCD_DrawString>
	sprintf(toStr, "%d    ", Distance);
 800106c:	4b1b      	ldr	r3, [pc, #108]	; (80010dc <handleDistanceSensor+0x15c>)
 800106e:	881b      	ldrh	r3, [r3, #0]
 8001070:	461a      	mov	r2, r3
 8001072:	491c      	ldr	r1, [pc, #112]	; (80010e4 <handleDistanceSensor+0x164>)
 8001074:	481c      	ldr	r0, [pc, #112]	; (80010e8 <handleDistanceSensor+0x168>)
 8001076:	f002 ffaf 	bl	8003fd8 <siprintf>
	LCD_DrawString(120, 100, toStr);
 800107a:	4a1b      	ldr	r2, [pc, #108]	; (80010e8 <handleDistanceSensor+0x168>)
 800107c:	2164      	movs	r1, #100	; 0x64
 800107e:	2078      	movs	r0, #120	; 0x78
 8001080:	f7ff ff34 	bl	8000eec <LCD_DrawString>
	if(Distance <= 8) {
 8001084:	4b15      	ldr	r3, [pc, #84]	; (80010dc <handleDistanceSensor+0x15c>)
 8001086:	881b      	ldrh	r3, [r3, #0]
 8001088:	2b08      	cmp	r3, #8
 800108a:	d808      	bhi.n	800109e <handleDistanceSensor+0x11e>
	   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 800108c:	2200      	movs	r2, #0
 800108e:	2120      	movs	r1, #32
 8001090:	480d      	ldr	r0, [pc, #52]	; (80010c8 <handleDistanceSensor+0x148>)
 8001092:	f001 f8b6 	bl	8002202 <HAL_GPIO_WritePin>
	   TX_BUFFER[0]='0';
 8001096:	4b15      	ldr	r3, [pc, #84]	; (80010ec <handleDistanceSensor+0x16c>)
 8001098:	2230      	movs	r2, #48	; 0x30
 800109a:	701a      	strb	r2, [r3, #0]
 800109c:	e007      	b.n	80010ae <handleDistanceSensor+0x12e>
	} else {
	   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 800109e:	2201      	movs	r2, #1
 80010a0:	2120      	movs	r1, #32
 80010a2:	4809      	ldr	r0, [pc, #36]	; (80010c8 <handleDistanceSensor+0x148>)
 80010a4:	f001 f8ad 	bl	8002202 <HAL_GPIO_WritePin>
	   TX_BUFFER[0]='1';
 80010a8:	4b10      	ldr	r3, [pc, #64]	; (80010ec <handleDistanceSensor+0x16c>)
 80010aa:	2231      	movs	r2, #49	; 0x31
 80010ac:	701a      	strb	r2, [r3, #0]
	}
	//send back to master
    HAL_UART_Transmit(&huart1, TX_BUFFER, 1, 10);
 80010ae:	230a      	movs	r3, #10
 80010b0:	2201      	movs	r2, #1
 80010b2:	490e      	ldr	r1, [pc, #56]	; (80010ec <handleDistanceSensor+0x16c>)
 80010b4:	480e      	ldr	r0, [pc, #56]	; (80010f0 <handleDistanceSensor+0x170>)
 80010b6:	f002 f99c 	bl	80033f2 <HAL_UART_Transmit>
}
 80010ba:	bf00      	nop
 80010bc:	bd98      	pop	{r3, r4, r7, pc}
 80010be:	bf00      	nop
 80010c0:	b020c49c 	.word	0xb020c49c
 80010c4:	3fa16872 	.word	0x3fa16872
 80010c8:	40010c00 	.word	0x40010c00
 80010cc:	200000e0 	.word	0x200000e0
 80010d0:	20000234 	.word	0x20000234
 80010d4:	20000238 	.word	0x20000238
 80010d8:	2000023c 	.word	0x2000023c
 80010dc:	20000240 	.word	0x20000240
 80010e0:	080048e4 	.word	0x080048e4
 80010e4:	080048f0 	.word	0x080048f0
 80010e8:	20000244 	.word	0x20000244
 80010ec:	200001f4 	.word	0x200001f4
 80010f0:	20000128 	.word	0x20000128

080010f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010f8:	f000 fc02 	bl	8001900 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010fc:	f000 f834 	bl	8001168 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001100:	f000 f920 	bl	8001344 <MX_GPIO_Init>
  MX_FSMC_Init();
 8001104:	f000 f9ce 	bl	80014a4 <MX_FSMC_Init>
  MX_USART1_UART_Init();
 8001108:	f000 f8f2 	bl	80012f0 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 800110c:	f000 f872 	bl	80011f4 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001110:	f000 f89e 	bl	8001250 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  LCD_INIT();
 8001114:	f7ff fc87 	bl	8000a26 <LCD_INIT>

  //distance sensor
  HAL_TIM_Base_Start(&htim1);
 8001118:	480e      	ldr	r0, [pc, #56]	; (8001154 <main+0x60>)
 800111a:	f001 fe85 	bl	8002e28 <HAL_TIM_Base_Start>
  HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 800111e:	2200      	movs	r2, #0
 8001120:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001124:	480c      	ldr	r0, [pc, #48]	; (8001158 <main+0x64>)
 8001126:	f001 f86c 	bl	8002202 <HAL_GPIO_WritePin>
//recive from bluetooth master
   HAL_UART_Receive_IT(&huart1, RX_BUFFER, BUFFER_LEN);
 800112a:	2240      	movs	r2, #64	; 0x40
 800112c:	490b      	ldr	r1, [pc, #44]	; (800115c <main+0x68>)
 800112e:	480c      	ldr	r0, [pc, #48]	; (8001160 <main+0x6c>)
 8001130:	f002 f9f1 	bl	8003516 <HAL_UART_Receive_IT>

  LCD_DrawString(10, 80, "rxstr:");
 8001134:	4a0b      	ldr	r2, [pc, #44]	; (8001164 <main+0x70>)
 8001136:	2150      	movs	r1, #80	; 0x50
 8001138:	200a      	movs	r0, #10
 800113a:	f7ff fed7 	bl	8000eec <LCD_DrawString>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  LCD_DrawString(120, 80, RX_BUFFER);
 800113e:	4a07      	ldr	r2, [pc, #28]	; (800115c <main+0x68>)
 8001140:	2150      	movs	r1, #80	; 0x50
 8001142:	2078      	movs	r0, #120	; 0x78
 8001144:	f7ff fed2 	bl	8000eec <LCD_DrawString>
	  handleDistanceSensor();
 8001148:	f7ff ff1a 	bl	8000f80 <handleDistanceSensor>

    HAL_Delay(200);
 800114c:	20c8      	movs	r0, #200	; 0xc8
 800114e:	f000 fc39 	bl	80019c4 <HAL_Delay>
	  LCD_DrawString(120, 80, RX_BUFFER);
 8001152:	e7f4      	b.n	800113e <main+0x4a>
 8001154:	200000e0 	.word	0x200000e0
 8001158:	40010c00 	.word	0x40010c00
 800115c:	200001b4 	.word	0x200001b4
 8001160:	20000128 	.word	0x20000128
 8001164:	080048f8 	.word	0x080048f8

08001168 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b090      	sub	sp, #64	; 0x40
 800116c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800116e:	f107 0318 	add.w	r3, r7, #24
 8001172:	2228      	movs	r2, #40	; 0x28
 8001174:	2100      	movs	r1, #0
 8001176:	4618      	mov	r0, r3
 8001178:	f002 ff26 	bl	8003fc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800117c:	1d3b      	adds	r3, r7, #4
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	605a      	str	r2, [r3, #4]
 8001184:	609a      	str	r2, [r3, #8]
 8001186:	60da      	str	r2, [r3, #12]
 8001188:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800118a:	2301      	movs	r3, #1
 800118c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800118e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001192:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001194:	2300      	movs	r3, #0
 8001196:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001198:	2301      	movs	r3, #1
 800119a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800119c:	2302      	movs	r3, #2
 800119e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80011a6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80011aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ac:	f107 0318 	add.w	r3, r7, #24
 80011b0:	4618      	mov	r0, r3
 80011b2:	f001 f983 	bl	80024bc <HAL_RCC_OscConfig>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80011bc:	f000 f9d6 	bl	800156c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011c0:	230f      	movs	r3, #15
 80011c2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011c4:	2302      	movs	r3, #2
 80011c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011c8:	2300      	movs	r3, #0
 80011ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011d2:	2300      	movs	r3, #0
 80011d4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011d6:	1d3b      	adds	r3, r7, #4
 80011d8:	2102      	movs	r1, #2
 80011da:	4618      	mov	r0, r3
 80011dc:	f001 fbf0 	bl	80029c0 <HAL_RCC_ClockConfig>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <SystemClock_Config+0x82>
  {
    Error_Handler();
 80011e6:	f000 f9c1 	bl	800156c <Error_Handler>
  }
}
 80011ea:	bf00      	nop
 80011ec:	3740      	adds	r7, #64	; 0x40
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
	...

080011f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011f8:	4b12      	ldr	r3, [pc, #72]	; (8001244 <MX_I2C1_Init+0x50>)
 80011fa:	4a13      	ldr	r2, [pc, #76]	; (8001248 <MX_I2C1_Init+0x54>)
 80011fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80011fe:	4b11      	ldr	r3, [pc, #68]	; (8001244 <MX_I2C1_Init+0x50>)
 8001200:	4a12      	ldr	r2, [pc, #72]	; (800124c <MX_I2C1_Init+0x58>)
 8001202:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001204:	4b0f      	ldr	r3, [pc, #60]	; (8001244 <MX_I2C1_Init+0x50>)
 8001206:	2200      	movs	r2, #0
 8001208:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800120a:	4b0e      	ldr	r3, [pc, #56]	; (8001244 <MX_I2C1_Init+0x50>)
 800120c:	2200      	movs	r2, #0
 800120e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001210:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <MX_I2C1_Init+0x50>)
 8001212:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001216:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001218:	4b0a      	ldr	r3, [pc, #40]	; (8001244 <MX_I2C1_Init+0x50>)
 800121a:	2200      	movs	r2, #0
 800121c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800121e:	4b09      	ldr	r3, [pc, #36]	; (8001244 <MX_I2C1_Init+0x50>)
 8001220:	2200      	movs	r2, #0
 8001222:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001224:	4b07      	ldr	r3, [pc, #28]	; (8001244 <MX_I2C1_Init+0x50>)
 8001226:	2200      	movs	r2, #0
 8001228:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800122a:	4b06      	ldr	r3, [pc, #24]	; (8001244 <MX_I2C1_Init+0x50>)
 800122c:	2200      	movs	r2, #0
 800122e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001230:	4804      	ldr	r0, [pc, #16]	; (8001244 <MX_I2C1_Init+0x50>)
 8001232:	f000 ffff 	bl	8002234 <HAL_I2C_Init>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800123c:	f000 f996 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001240:	bf00      	nop
 8001242:	bd80      	pop	{r7, pc}
 8001244:	2000008c 	.word	0x2000008c
 8001248:	40005400 	.word	0x40005400
 800124c:	000186a0 	.word	0x000186a0

08001250 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001256:	f107 0308 	add.w	r3, r7, #8
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	605a      	str	r2, [r3, #4]
 8001260:	609a      	str	r2, [r3, #8]
 8001262:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001264:	463b      	mov	r3, r7
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800126c:	4b1e      	ldr	r3, [pc, #120]	; (80012e8 <MX_TIM1_Init+0x98>)
 800126e:	4a1f      	ldr	r2, [pc, #124]	; (80012ec <MX_TIM1_Init+0x9c>)
 8001270:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001272:	4b1d      	ldr	r3, [pc, #116]	; (80012e8 <MX_TIM1_Init+0x98>)
 8001274:	2247      	movs	r2, #71	; 0x47
 8001276:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001278:	4b1b      	ldr	r3, [pc, #108]	; (80012e8 <MX_TIM1_Init+0x98>)
 800127a:	2200      	movs	r2, #0
 800127c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800127e:	4b1a      	ldr	r3, [pc, #104]	; (80012e8 <MX_TIM1_Init+0x98>)
 8001280:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001284:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001286:	4b18      	ldr	r3, [pc, #96]	; (80012e8 <MX_TIM1_Init+0x98>)
 8001288:	2200      	movs	r2, #0
 800128a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800128c:	4b16      	ldr	r3, [pc, #88]	; (80012e8 <MX_TIM1_Init+0x98>)
 800128e:	2200      	movs	r2, #0
 8001290:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001292:	4b15      	ldr	r3, [pc, #84]	; (80012e8 <MX_TIM1_Init+0x98>)
 8001294:	2200      	movs	r2, #0
 8001296:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001298:	4813      	ldr	r0, [pc, #76]	; (80012e8 <MX_TIM1_Init+0x98>)
 800129a:	f001 fd76 	bl	8002d8a <HAL_TIM_Base_Init>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80012a4:	f000 f962 	bl	800156c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012ac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012ae:	f107 0308 	add.w	r3, r7, #8
 80012b2:	4619      	mov	r1, r3
 80012b4:	480c      	ldr	r0, [pc, #48]	; (80012e8 <MX_TIM1_Init+0x98>)
 80012b6:	f001 fe0f 	bl	8002ed8 <HAL_TIM_ConfigClockSource>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80012c0:	f000 f954 	bl	800156c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012c4:	2300      	movs	r3, #0
 80012c6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012c8:	2300      	movs	r3, #0
 80012ca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012cc:	463b      	mov	r3, r7
 80012ce:	4619      	mov	r1, r3
 80012d0:	4805      	ldr	r0, [pc, #20]	; (80012e8 <MX_TIM1_Init+0x98>)
 80012d2:	f001 ffd5 	bl	8003280 <HAL_TIMEx_MasterConfigSynchronization>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80012dc:	f000 f946 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80012e0:	bf00      	nop
 80012e2:	3718      	adds	r7, #24
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	200000e0 	.word	0x200000e0
 80012ec:	40012c00 	.word	0x40012c00

080012f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012f4:	4b11      	ldr	r3, [pc, #68]	; (800133c <MX_USART1_UART_Init+0x4c>)
 80012f6:	4a12      	ldr	r2, [pc, #72]	; (8001340 <MX_USART1_UART_Init+0x50>)
 80012f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80012fa:	4b10      	ldr	r3, [pc, #64]	; (800133c <MX_USART1_UART_Init+0x4c>)
 80012fc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001300:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001302:	4b0e      	ldr	r3, [pc, #56]	; (800133c <MX_USART1_UART_Init+0x4c>)
 8001304:	2200      	movs	r2, #0
 8001306:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001308:	4b0c      	ldr	r3, [pc, #48]	; (800133c <MX_USART1_UART_Init+0x4c>)
 800130a:	2200      	movs	r2, #0
 800130c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800130e:	4b0b      	ldr	r3, [pc, #44]	; (800133c <MX_USART1_UART_Init+0x4c>)
 8001310:	2200      	movs	r2, #0
 8001312:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001314:	4b09      	ldr	r3, [pc, #36]	; (800133c <MX_USART1_UART_Init+0x4c>)
 8001316:	220c      	movs	r2, #12
 8001318:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800131a:	4b08      	ldr	r3, [pc, #32]	; (800133c <MX_USART1_UART_Init+0x4c>)
 800131c:	2200      	movs	r2, #0
 800131e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001320:	4b06      	ldr	r3, [pc, #24]	; (800133c <MX_USART1_UART_Init+0x4c>)
 8001322:	2200      	movs	r2, #0
 8001324:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001326:	4805      	ldr	r0, [pc, #20]	; (800133c <MX_USART1_UART_Init+0x4c>)
 8001328:	f002 f816 	bl	8003358 <HAL_UART_Init>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001332:	f000 f91b 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001336:	bf00      	nop
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	20000128 	.word	0x20000128
 8001340:	40013800 	.word	0x40013800

08001344 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b08a      	sub	sp, #40	; 0x28
 8001348:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134a:	f107 0318 	add.w	r3, r7, #24
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	605a      	str	r2, [r3, #4]
 8001354:	609a      	str	r2, [r3, #8]
 8001356:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001358:	4b4e      	ldr	r3, [pc, #312]	; (8001494 <MX_GPIO_Init+0x150>)
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	4a4d      	ldr	r2, [pc, #308]	; (8001494 <MX_GPIO_Init+0x150>)
 800135e:	f043 0310 	orr.w	r3, r3, #16
 8001362:	6193      	str	r3, [r2, #24]
 8001364:	4b4b      	ldr	r3, [pc, #300]	; (8001494 <MX_GPIO_Init+0x150>)
 8001366:	699b      	ldr	r3, [r3, #24]
 8001368:	f003 0310 	and.w	r3, r3, #16
 800136c:	617b      	str	r3, [r7, #20]
 800136e:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001370:	4b48      	ldr	r3, [pc, #288]	; (8001494 <MX_GPIO_Init+0x150>)
 8001372:	699b      	ldr	r3, [r3, #24]
 8001374:	4a47      	ldr	r2, [pc, #284]	; (8001494 <MX_GPIO_Init+0x150>)
 8001376:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800137a:	6193      	str	r3, [r2, #24]
 800137c:	4b45      	ldr	r3, [pc, #276]	; (8001494 <MX_GPIO_Init+0x150>)
 800137e:	699b      	ldr	r3, [r3, #24]
 8001380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001384:	613b      	str	r3, [r7, #16]
 8001386:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001388:	4b42      	ldr	r3, [pc, #264]	; (8001494 <MX_GPIO_Init+0x150>)
 800138a:	699b      	ldr	r3, [r3, #24]
 800138c:	4a41      	ldr	r2, [pc, #260]	; (8001494 <MX_GPIO_Init+0x150>)
 800138e:	f043 0308 	orr.w	r3, r3, #8
 8001392:	6193      	str	r3, [r2, #24]
 8001394:	4b3f      	ldr	r3, [pc, #252]	; (8001494 <MX_GPIO_Init+0x150>)
 8001396:	699b      	ldr	r3, [r3, #24]
 8001398:	f003 0308 	and.w	r3, r3, #8
 800139c:	60fb      	str	r3, [r7, #12]
 800139e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013a0:	4b3c      	ldr	r3, [pc, #240]	; (8001494 <MX_GPIO_Init+0x150>)
 80013a2:	699b      	ldr	r3, [r3, #24]
 80013a4:	4a3b      	ldr	r2, [pc, #236]	; (8001494 <MX_GPIO_Init+0x150>)
 80013a6:	f043 0320 	orr.w	r3, r3, #32
 80013aa:	6193      	str	r3, [r2, #24]
 80013ac:	4b39      	ldr	r3, [pc, #228]	; (8001494 <MX_GPIO_Init+0x150>)
 80013ae:	699b      	ldr	r3, [r3, #24]
 80013b0:	f003 0320 	and.w	r3, r3, #32
 80013b4:	60bb      	str	r3, [r7, #8]
 80013b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b8:	4b36      	ldr	r3, [pc, #216]	; (8001494 <MX_GPIO_Init+0x150>)
 80013ba:	699b      	ldr	r3, [r3, #24]
 80013bc:	4a35      	ldr	r2, [pc, #212]	; (8001494 <MX_GPIO_Init+0x150>)
 80013be:	f043 0304 	orr.w	r3, r3, #4
 80013c2:	6193      	str	r3, [r2, #24]
 80013c4:	4b33      	ldr	r3, [pc, #204]	; (8001494 <MX_GPIO_Init+0x150>)
 80013c6:	699b      	ldr	r3, [r3, #24]
 80013c8:	f003 0304 	and.w	r3, r3, #4
 80013cc:	607b      	str	r3, [r7, #4]
 80013ce:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 80013d0:	2200      	movs	r2, #0
 80013d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013d6:	4830      	ldr	r0, [pc, #192]	; (8001498 <MX_GPIO_Init+0x154>)
 80013d8:	f000 ff13 	bl	8002202 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80013dc:	2200      	movs	r2, #0
 80013de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013e2:	482e      	ldr	r0, [pc, #184]	; (800149c <MX_GPIO_Init+0x158>)
 80013e4:	f000 ff0d 	bl	8002202 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80013e8:	2201      	movs	r2, #1
 80013ea:	2120      	movs	r1, #32
 80013ec:	482a      	ldr	r0, [pc, #168]	; (8001498 <MX_GPIO_Init+0x154>)
 80013ee:	f000 ff08 	bl	8002202 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 80013f2:	2200      	movs	r2, #0
 80013f4:	2102      	movs	r1, #2
 80013f6:	482a      	ldr	r0, [pc, #168]	; (80014a0 <MX_GPIO_Init+0x15c>)
 80013f8:	f000 ff03 	bl	8002202 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80013fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001400:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001402:	2300      	movs	r3, #0
 8001404:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001406:	2300      	movs	r3, #0
 8001408:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800140a:	f107 0318 	add.w	r3, r7, #24
 800140e:	4619      	mov	r1, r3
 8001410:	4821      	ldr	r0, [pc, #132]	; (8001498 <MX_GPIO_Init+0x154>)
 8001412:	f000 fd4b 	bl	8001eac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001416:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800141a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800141c:	2301      	movs	r3, #1
 800141e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001420:	2300      	movs	r3, #0
 8001422:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001424:	2302      	movs	r3, #2
 8001426:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001428:	f107 0318 	add.w	r3, r7, #24
 800142c:	4619      	mov	r1, r3
 800142e:	481a      	ldr	r0, [pc, #104]	; (8001498 <MX_GPIO_Init+0x154>)
 8001430:	f000 fd3c 	bl	8001eac <HAL_GPIO_Init>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001434:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001438:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800143a:	2301      	movs	r3, #1
 800143c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143e:	2300      	movs	r3, #0
 8001440:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001442:	2303      	movs	r3, #3
 8001444:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001446:	f107 0318 	add.w	r3, r7, #24
 800144a:	4619      	mov	r1, r3
 800144c:	4813      	ldr	r0, [pc, #76]	; (800149c <MX_GPIO_Init+0x158>)
 800144e:	f000 fd2d 	bl	8001eac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001452:	2320      	movs	r3, #32
 8001454:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001456:	2301      	movs	r3, #1
 8001458:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145a:	2300      	movs	r3, #0
 800145c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800145e:	2303      	movs	r3, #3
 8001460:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001462:	f107 0318 	add.w	r3, r7, #24
 8001466:	4619      	mov	r1, r3
 8001468:	480b      	ldr	r0, [pc, #44]	; (8001498 <MX_GPIO_Init+0x154>)
 800146a:	f000 fd1f 	bl	8001eac <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800146e:	2302      	movs	r3, #2
 8001470:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001472:	2301      	movs	r3, #1
 8001474:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800147a:	2303      	movs	r3, #3
 800147c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800147e:	f107 0318 	add.w	r3, r7, #24
 8001482:	4619      	mov	r1, r3
 8001484:	4806      	ldr	r0, [pc, #24]	; (80014a0 <MX_GPIO_Init+0x15c>)
 8001486:	f000 fd11 	bl	8001eac <HAL_GPIO_Init>

}
 800148a:	bf00      	nop
 800148c:	3728      	adds	r7, #40	; 0x28
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	40021000 	.word	0x40021000
 8001498:	40010c00 	.word	0x40010c00
 800149c:	40011400 	.word	0x40011400
 80014a0:	40011800 	.word	0x40011800

080014a4 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b088      	sub	sp, #32
 80014a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80014aa:	1d3b      	adds	r3, r7, #4
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	605a      	str	r2, [r3, #4]
 80014b2:	609a      	str	r2, [r3, #8]
 80014b4:	60da      	str	r2, [r3, #12]
 80014b6:	611a      	str	r2, [r3, #16]
 80014b8:	615a      	str	r2, [r3, #20]
 80014ba:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80014bc:	4b28      	ldr	r3, [pc, #160]	; (8001560 <MX_FSMC_Init+0xbc>)
 80014be:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80014c2:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80014c4:	4b26      	ldr	r3, [pc, #152]	; (8001560 <MX_FSMC_Init+0xbc>)
 80014c6:	4a27      	ldr	r2, [pc, #156]	; (8001564 <MX_FSMC_Init+0xc0>)
 80014c8:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80014ca:	4b25      	ldr	r3, [pc, #148]	; (8001560 <MX_FSMC_Init+0xbc>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80014d0:	4b23      	ldr	r3, [pc, #140]	; (8001560 <MX_FSMC_Init+0xbc>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80014d6:	4b22      	ldr	r3, [pc, #136]	; (8001560 <MX_FSMC_Init+0xbc>)
 80014d8:	2200      	movs	r2, #0
 80014da:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80014dc:	4b20      	ldr	r3, [pc, #128]	; (8001560 <MX_FSMC_Init+0xbc>)
 80014de:	2210      	movs	r2, #16
 80014e0:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80014e2:	4b1f      	ldr	r3, [pc, #124]	; (8001560 <MX_FSMC_Init+0xbc>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80014e8:	4b1d      	ldr	r3, [pc, #116]	; (8001560 <MX_FSMC_Init+0xbc>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80014ee:	4b1c      	ldr	r3, [pc, #112]	; (8001560 <MX_FSMC_Init+0xbc>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80014f4:	4b1a      	ldr	r3, [pc, #104]	; (8001560 <MX_FSMC_Init+0xbc>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80014fa:	4b19      	ldr	r3, [pc, #100]	; (8001560 <MX_FSMC_Init+0xbc>)
 80014fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001500:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001502:	4b17      	ldr	r3, [pc, #92]	; (8001560 <MX_FSMC_Init+0xbc>)
 8001504:	2200      	movs	r2, #0
 8001506:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8001508:	4b15      	ldr	r3, [pc, #84]	; (8001560 <MX_FSMC_Init+0xbc>)
 800150a:	2200      	movs	r2, #0
 800150c:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800150e:	4b14      	ldr	r3, [pc, #80]	; (8001560 <MX_FSMC_Init+0xbc>)
 8001510:	2200      	movs	r2, #0
 8001512:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001514:	4b12      	ldr	r3, [pc, #72]	; (8001560 <MX_FSMC_Init+0xbc>)
 8001516:	2200      	movs	r2, #0
 8001518:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 800151a:	230f      	movs	r3, #15
 800151c:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 800151e:	230f      	movs	r3, #15
 8001520:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8001522:	23ff      	movs	r3, #255	; 0xff
 8001524:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8001526:	230f      	movs	r3, #15
 8001528:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 800152a:	2310      	movs	r3, #16
 800152c:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 800152e:	2311      	movs	r3, #17
 8001530:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001532:	2300      	movs	r3, #0
 8001534:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001536:	1d3b      	adds	r3, r7, #4
 8001538:	2200      	movs	r2, #0
 800153a:	4619      	mov	r1, r3
 800153c:	4808      	ldr	r0, [pc, #32]	; (8001560 <MX_FSMC_Init+0xbc>)
 800153e:	f001 fbd7 	bl	8002cf0 <HAL_SRAM_Init>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 8001548:	f000 f810 	bl	800156c <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 800154c:	4b06      	ldr	r3, [pc, #24]	; (8001568 <MX_FSMC_Init+0xc4>)
 800154e:	69db      	ldr	r3, [r3, #28]
 8001550:	4a05      	ldr	r2, [pc, #20]	; (8001568 <MX_FSMC_Init+0xc4>)
 8001552:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001556:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001558:	bf00      	nop
 800155a:	3720      	adds	r7, #32
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	2000016c 	.word	0x2000016c
 8001564:	a0000104 	.word	0xa0000104
 8001568:	40010000 	.word	0x40010000

0800156c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001570:	b672      	cpsid	i
}
 8001572:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001574:	e7fe      	b.n	8001574 <Error_Handler+0x8>
	...

08001578 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001578:	b480      	push	{r7}
 800157a:	b085      	sub	sp, #20
 800157c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800157e:	4b15      	ldr	r3, [pc, #84]	; (80015d4 <HAL_MspInit+0x5c>)
 8001580:	699b      	ldr	r3, [r3, #24]
 8001582:	4a14      	ldr	r2, [pc, #80]	; (80015d4 <HAL_MspInit+0x5c>)
 8001584:	f043 0301 	orr.w	r3, r3, #1
 8001588:	6193      	str	r3, [r2, #24]
 800158a:	4b12      	ldr	r3, [pc, #72]	; (80015d4 <HAL_MspInit+0x5c>)
 800158c:	699b      	ldr	r3, [r3, #24]
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	60bb      	str	r3, [r7, #8]
 8001594:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001596:	4b0f      	ldr	r3, [pc, #60]	; (80015d4 <HAL_MspInit+0x5c>)
 8001598:	69db      	ldr	r3, [r3, #28]
 800159a:	4a0e      	ldr	r2, [pc, #56]	; (80015d4 <HAL_MspInit+0x5c>)
 800159c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015a0:	61d3      	str	r3, [r2, #28]
 80015a2:	4b0c      	ldr	r3, [pc, #48]	; (80015d4 <HAL_MspInit+0x5c>)
 80015a4:	69db      	ldr	r3, [r3, #28]
 80015a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015aa:	607b      	str	r3, [r7, #4]
 80015ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80015ae:	4b0a      	ldr	r3, [pc, #40]	; (80015d8 <HAL_MspInit+0x60>)
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	60fb      	str	r3, [r7, #12]
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015c2:	60fb      	str	r3, [r7, #12]
 80015c4:	4a04      	ldr	r2, [pc, #16]	; (80015d8 <HAL_MspInit+0x60>)
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ca:	bf00      	nop
 80015cc:	3714      	adds	r7, #20
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bc80      	pop	{r7}
 80015d2:	4770      	bx	lr
 80015d4:	40021000 	.word	0x40021000
 80015d8:	40010000 	.word	0x40010000

080015dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b088      	sub	sp, #32
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e4:	f107 0310 	add.w	r3, r7, #16
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	605a      	str	r2, [r3, #4]
 80015ee:	609a      	str	r2, [r3, #8]
 80015f0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a15      	ldr	r2, [pc, #84]	; (800164c <HAL_I2C_MspInit+0x70>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d123      	bne.n	8001644 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015fc:	4b14      	ldr	r3, [pc, #80]	; (8001650 <HAL_I2C_MspInit+0x74>)
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	4a13      	ldr	r2, [pc, #76]	; (8001650 <HAL_I2C_MspInit+0x74>)
 8001602:	f043 0308 	orr.w	r3, r3, #8
 8001606:	6193      	str	r3, [r2, #24]
 8001608:	4b11      	ldr	r3, [pc, #68]	; (8001650 <HAL_I2C_MspInit+0x74>)
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	f003 0308 	and.w	r3, r3, #8
 8001610:	60fb      	str	r3, [r7, #12]
 8001612:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001614:	23c0      	movs	r3, #192	; 0xc0
 8001616:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001618:	2312      	movs	r3, #18
 800161a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800161c:	2303      	movs	r3, #3
 800161e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001620:	f107 0310 	add.w	r3, r7, #16
 8001624:	4619      	mov	r1, r3
 8001626:	480b      	ldr	r0, [pc, #44]	; (8001654 <HAL_I2C_MspInit+0x78>)
 8001628:	f000 fc40 	bl	8001eac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800162c:	4b08      	ldr	r3, [pc, #32]	; (8001650 <HAL_I2C_MspInit+0x74>)
 800162e:	69db      	ldr	r3, [r3, #28]
 8001630:	4a07      	ldr	r2, [pc, #28]	; (8001650 <HAL_I2C_MspInit+0x74>)
 8001632:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001636:	61d3      	str	r3, [r2, #28]
 8001638:	4b05      	ldr	r3, [pc, #20]	; (8001650 <HAL_I2C_MspInit+0x74>)
 800163a:	69db      	ldr	r3, [r3, #28]
 800163c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001640:	60bb      	str	r3, [r7, #8]
 8001642:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001644:	bf00      	nop
 8001646:	3720      	adds	r7, #32
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	40005400 	.word	0x40005400
 8001650:	40021000 	.word	0x40021000
 8001654:	40010c00 	.word	0x40010c00

08001658 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001658:	b480      	push	{r7}
 800165a:	b085      	sub	sp, #20
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a09      	ldr	r2, [pc, #36]	; (800168c <HAL_TIM_Base_MspInit+0x34>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d10b      	bne.n	8001682 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800166a:	4b09      	ldr	r3, [pc, #36]	; (8001690 <HAL_TIM_Base_MspInit+0x38>)
 800166c:	699b      	ldr	r3, [r3, #24]
 800166e:	4a08      	ldr	r2, [pc, #32]	; (8001690 <HAL_TIM_Base_MspInit+0x38>)
 8001670:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001674:	6193      	str	r3, [r2, #24]
 8001676:	4b06      	ldr	r3, [pc, #24]	; (8001690 <HAL_TIM_Base_MspInit+0x38>)
 8001678:	699b      	ldr	r3, [r3, #24]
 800167a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800167e:	60fb      	str	r3, [r7, #12]
 8001680:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001682:	bf00      	nop
 8001684:	3714      	adds	r7, #20
 8001686:	46bd      	mov	sp, r7
 8001688:	bc80      	pop	{r7}
 800168a:	4770      	bx	lr
 800168c:	40012c00 	.word	0x40012c00
 8001690:	40021000 	.word	0x40021000

08001694 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b088      	sub	sp, #32
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169c:	f107 0310 	add.w	r3, r7, #16
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	605a      	str	r2, [r3, #4]
 80016a6:	609a      	str	r2, [r3, #8]
 80016a8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a20      	ldr	r2, [pc, #128]	; (8001730 <HAL_UART_MspInit+0x9c>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d139      	bne.n	8001728 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016b4:	4b1f      	ldr	r3, [pc, #124]	; (8001734 <HAL_UART_MspInit+0xa0>)
 80016b6:	699b      	ldr	r3, [r3, #24]
 80016b8:	4a1e      	ldr	r2, [pc, #120]	; (8001734 <HAL_UART_MspInit+0xa0>)
 80016ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016be:	6193      	str	r3, [r2, #24]
 80016c0:	4b1c      	ldr	r3, [pc, #112]	; (8001734 <HAL_UART_MspInit+0xa0>)
 80016c2:	699b      	ldr	r3, [r3, #24]
 80016c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016c8:	60fb      	str	r3, [r7, #12]
 80016ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016cc:	4b19      	ldr	r3, [pc, #100]	; (8001734 <HAL_UART_MspInit+0xa0>)
 80016ce:	699b      	ldr	r3, [r3, #24]
 80016d0:	4a18      	ldr	r2, [pc, #96]	; (8001734 <HAL_UART_MspInit+0xa0>)
 80016d2:	f043 0304 	orr.w	r3, r3, #4
 80016d6:	6193      	str	r3, [r2, #24]
 80016d8:	4b16      	ldr	r3, [pc, #88]	; (8001734 <HAL_UART_MspInit+0xa0>)
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	f003 0304 	and.w	r3, r3, #4
 80016e0:	60bb      	str	r3, [r7, #8]
 80016e2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80016e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016e8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ea:	2302      	movs	r3, #2
 80016ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016ee:	2303      	movs	r3, #3
 80016f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f2:	f107 0310 	add.w	r3, r7, #16
 80016f6:	4619      	mov	r1, r3
 80016f8:	480f      	ldr	r0, [pc, #60]	; (8001738 <HAL_UART_MspInit+0xa4>)
 80016fa:	f000 fbd7 	bl	8001eac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80016fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001702:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001704:	2300      	movs	r3, #0
 8001706:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001708:	2300      	movs	r3, #0
 800170a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800170c:	f107 0310 	add.w	r3, r7, #16
 8001710:	4619      	mov	r1, r3
 8001712:	4809      	ldr	r0, [pc, #36]	; (8001738 <HAL_UART_MspInit+0xa4>)
 8001714:	f000 fbca 	bl	8001eac <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001718:	2200      	movs	r2, #0
 800171a:	2100      	movs	r1, #0
 800171c:	2025      	movs	r0, #37	; 0x25
 800171e:	f000 fa4c 	bl	8001bba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001722:	2025      	movs	r0, #37	; 0x25
 8001724:	f000 fa65 	bl	8001bf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001728:	bf00      	nop
 800172a:	3720      	adds	r7, #32
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	40013800 	.word	0x40013800
 8001734:	40021000 	.word	0x40021000
 8001738:	40010800 	.word	0x40010800

0800173c <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 800173c:	b580      	push	{r7, lr}
 800173e:	b086      	sub	sp, #24
 8001740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001742:	f107 0308 	add.w	r3, r7, #8
 8001746:	2200      	movs	r2, #0
 8001748:	601a      	str	r2, [r3, #0]
 800174a:	605a      	str	r2, [r3, #4]
 800174c:	609a      	str	r2, [r3, #8]
 800174e:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 8001750:	4b18      	ldr	r3, [pc, #96]	; (80017b4 <HAL_FSMC_MspInit+0x78>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d129      	bne.n	80017ac <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 8001758:	4b16      	ldr	r3, [pc, #88]	; (80017b4 <HAL_FSMC_MspInit+0x78>)
 800175a:	2201      	movs	r2, #1
 800175c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800175e:	4b16      	ldr	r3, [pc, #88]	; (80017b8 <HAL_FSMC_MspInit+0x7c>)
 8001760:	695b      	ldr	r3, [r3, #20]
 8001762:	4a15      	ldr	r2, [pc, #84]	; (80017b8 <HAL_FSMC_MspInit+0x7c>)
 8001764:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001768:	6153      	str	r3, [r2, #20]
 800176a:	4b13      	ldr	r3, [pc, #76]	; (80017b8 <HAL_FSMC_MspInit+0x7c>)
 800176c:	695b      	ldr	r3, [r3, #20]
 800176e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001772:	607b      	str	r3, [r7, #4]
 8001774:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001776:	f64f 7380 	movw	r3, #65408	; 0xff80
 800177a:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800177c:	2302      	movs	r3, #2
 800177e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001780:	2303      	movs	r3, #3
 8001782:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001784:	f107 0308 	add.w	r3, r7, #8
 8001788:	4619      	mov	r1, r3
 800178a:	480c      	ldr	r0, [pc, #48]	; (80017bc <HAL_FSMC_MspInit+0x80>)
 800178c:	f000 fb8e 	bl	8001eac <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001790:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 8001794:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001796:	2302      	movs	r3, #2
 8001798:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800179a:	2303      	movs	r3, #3
 800179c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800179e:	f107 0308 	add.w	r3, r7, #8
 80017a2:	4619      	mov	r1, r3
 80017a4:	4806      	ldr	r0, [pc, #24]	; (80017c0 <HAL_FSMC_MspInit+0x84>)
 80017a6:	f000 fb81 	bl	8001eac <HAL_GPIO_Init>
 80017aa:	e000      	b.n	80017ae <HAL_FSMC_MspInit+0x72>
    return;
 80017ac:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80017ae:	3718      	adds	r7, #24
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	20000258 	.word	0x20000258
 80017b8:	40021000 	.word	0x40021000
 80017bc:	40011800 	.word	0x40011800
 80017c0:	40011400 	.word	0x40011400

080017c4 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80017cc:	f7ff ffb6 	bl	800173c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80017d0:	bf00      	nop
 80017d2:	3708      	adds	r7, #8
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017dc:	e7fe      	b.n	80017dc <NMI_Handler+0x4>

080017de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017de:	b480      	push	{r7}
 80017e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017e2:	e7fe      	b.n	80017e2 <HardFault_Handler+0x4>

080017e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017e8:	e7fe      	b.n	80017e8 <MemManage_Handler+0x4>

080017ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ea:	b480      	push	{r7}
 80017ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ee:	e7fe      	b.n	80017ee <BusFault_Handler+0x4>

080017f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017f4:	e7fe      	b.n	80017f4 <UsageFault_Handler+0x4>

080017f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017f6:	b480      	push	{r7}
 80017f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bc80      	pop	{r7}
 8001800:	4770      	bx	lr

08001802 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001802:	b480      	push	{r7}
 8001804:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	46bd      	mov	sp, r7
 800180a:	bc80      	pop	{r7}
 800180c:	4770      	bx	lr

0800180e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800180e:	b480      	push	{r7}
 8001810:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	46bd      	mov	sp, r7
 8001816:	bc80      	pop	{r7}
 8001818:	4770      	bx	lr

0800181a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800181e:	f000 f8b5 	bl	800198c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
	...

08001828 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800182c:	4802      	ldr	r0, [pc, #8]	; (8001838 <USART1_IRQHandler+0x10>)
 800182e:	f001 fea3 	bl	8003578 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001832:	bf00      	nop
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	20000128 	.word	0x20000128

0800183c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b086      	sub	sp, #24
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001844:	4a14      	ldr	r2, [pc, #80]	; (8001898 <_sbrk+0x5c>)
 8001846:	4b15      	ldr	r3, [pc, #84]	; (800189c <_sbrk+0x60>)
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001850:	4b13      	ldr	r3, [pc, #76]	; (80018a0 <_sbrk+0x64>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d102      	bne.n	800185e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001858:	4b11      	ldr	r3, [pc, #68]	; (80018a0 <_sbrk+0x64>)
 800185a:	4a12      	ldr	r2, [pc, #72]	; (80018a4 <_sbrk+0x68>)
 800185c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800185e:	4b10      	ldr	r3, [pc, #64]	; (80018a0 <_sbrk+0x64>)
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4413      	add	r3, r2
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	429a      	cmp	r2, r3
 800186a:	d207      	bcs.n	800187c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800186c:	f002 fb82 	bl	8003f74 <__errno>
 8001870:	4603      	mov	r3, r0
 8001872:	220c      	movs	r2, #12
 8001874:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001876:	f04f 33ff 	mov.w	r3, #4294967295
 800187a:	e009      	b.n	8001890 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800187c:	4b08      	ldr	r3, [pc, #32]	; (80018a0 <_sbrk+0x64>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001882:	4b07      	ldr	r3, [pc, #28]	; (80018a0 <_sbrk+0x64>)
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4413      	add	r3, r2
 800188a:	4a05      	ldr	r2, [pc, #20]	; (80018a0 <_sbrk+0x64>)
 800188c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800188e:	68fb      	ldr	r3, [r7, #12]
}
 8001890:	4618      	mov	r0, r3
 8001892:	3718      	adds	r7, #24
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	20010000 	.word	0x20010000
 800189c:	00000400 	.word	0x00000400
 80018a0:	2000025c 	.word	0x2000025c
 80018a4:	20000278 	.word	0x20000278

080018a8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018ac:	bf00      	nop
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bc80      	pop	{r7}
 80018b2:	4770      	bx	lr

080018b4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018b4:	480c      	ldr	r0, [pc, #48]	; (80018e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018b6:	490d      	ldr	r1, [pc, #52]	; (80018ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018b8:	4a0d      	ldr	r2, [pc, #52]	; (80018f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018bc:	e002      	b.n	80018c4 <LoopCopyDataInit>

080018be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018c2:	3304      	adds	r3, #4

080018c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018c8:	d3f9      	bcc.n	80018be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ca:	4a0a      	ldr	r2, [pc, #40]	; (80018f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018cc:	4c0a      	ldr	r4, [pc, #40]	; (80018f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80018ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018d0:	e001      	b.n	80018d6 <LoopFillZerobss>

080018d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018d4:	3204      	adds	r2, #4

080018d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018d8:	d3fb      	bcc.n	80018d2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80018da:	f7ff ffe5 	bl	80018a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018de:	f002 fb4f 	bl	8003f80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018e2:	f7ff fc07 	bl	80010f4 <main>
  bx lr
 80018e6:	4770      	bx	lr
  ldr r0, =_sdata
 80018e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018ec:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80018f0:	08004f54 	.word	0x08004f54
  ldr r2, =_sbss
 80018f4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80018f8:	20000274 	.word	0x20000274

080018fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018fc:	e7fe      	b.n	80018fc <ADC1_2_IRQHandler>
	...

08001900 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001904:	4b08      	ldr	r3, [pc, #32]	; (8001928 <HAL_Init+0x28>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a07      	ldr	r2, [pc, #28]	; (8001928 <HAL_Init+0x28>)
 800190a:	f043 0310 	orr.w	r3, r3, #16
 800190e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001910:	2003      	movs	r0, #3
 8001912:	f000 f947 	bl	8001ba4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001916:	200f      	movs	r0, #15
 8001918:	f000 f808 	bl	800192c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800191c:	f7ff fe2c 	bl	8001578 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001920:	2300      	movs	r3, #0
}
 8001922:	4618      	mov	r0, r3
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	40022000 	.word	0x40022000

0800192c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001934:	4b12      	ldr	r3, [pc, #72]	; (8001980 <HAL_InitTick+0x54>)
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	4b12      	ldr	r3, [pc, #72]	; (8001984 <HAL_InitTick+0x58>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	4619      	mov	r1, r3
 800193e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001942:	fbb3 f3f1 	udiv	r3, r3, r1
 8001946:	fbb2 f3f3 	udiv	r3, r2, r3
 800194a:	4618      	mov	r0, r3
 800194c:	f000 f95f 	bl	8001c0e <HAL_SYSTICK_Config>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e00e      	b.n	8001978 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2b0f      	cmp	r3, #15
 800195e:	d80a      	bhi.n	8001976 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001960:	2200      	movs	r2, #0
 8001962:	6879      	ldr	r1, [r7, #4]
 8001964:	f04f 30ff 	mov.w	r0, #4294967295
 8001968:	f000 f927 	bl	8001bba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800196c:	4a06      	ldr	r2, [pc, #24]	; (8001988 <HAL_InitTick+0x5c>)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001972:	2300      	movs	r3, #0
 8001974:	e000      	b.n	8001978 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
}
 8001978:	4618      	mov	r0, r3
 800197a:	3708      	adds	r7, #8
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	20000000 	.word	0x20000000
 8001984:	20000008 	.word	0x20000008
 8001988:	20000004 	.word	0x20000004

0800198c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001990:	4b05      	ldr	r3, [pc, #20]	; (80019a8 <HAL_IncTick+0x1c>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	461a      	mov	r2, r3
 8001996:	4b05      	ldr	r3, [pc, #20]	; (80019ac <HAL_IncTick+0x20>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4413      	add	r3, r2
 800199c:	4a03      	ldr	r2, [pc, #12]	; (80019ac <HAL_IncTick+0x20>)
 800199e:	6013      	str	r3, [r2, #0]
}
 80019a0:	bf00      	nop
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bc80      	pop	{r7}
 80019a6:	4770      	bx	lr
 80019a8:	20000008 	.word	0x20000008
 80019ac:	20000260 	.word	0x20000260

080019b0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  return uwTick;
 80019b4:	4b02      	ldr	r3, [pc, #8]	; (80019c0 <HAL_GetTick+0x10>)
 80019b6:	681b      	ldr	r3, [r3, #0]
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bc80      	pop	{r7}
 80019be:	4770      	bx	lr
 80019c0:	20000260 	.word	0x20000260

080019c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019cc:	f7ff fff0 	bl	80019b0 <HAL_GetTick>
 80019d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019dc:	d005      	beq.n	80019ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019de:	4b0a      	ldr	r3, [pc, #40]	; (8001a08 <HAL_Delay+0x44>)
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	461a      	mov	r2, r3
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	4413      	add	r3, r2
 80019e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019ea:	bf00      	nop
 80019ec:	f7ff ffe0 	bl	80019b0 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	68fa      	ldr	r2, [r7, #12]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d8f7      	bhi.n	80019ec <HAL_Delay+0x28>
  {
  }
}
 80019fc:	bf00      	nop
 80019fe:	bf00      	nop
 8001a00:	3710      	adds	r7, #16
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	20000008 	.word	0x20000008

08001a0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b085      	sub	sp, #20
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f003 0307 	and.w	r3, r3, #7
 8001a1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a1c:	4b0c      	ldr	r3, [pc, #48]	; (8001a50 <__NVIC_SetPriorityGrouping+0x44>)
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a22:	68ba      	ldr	r2, [r7, #8]
 8001a24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a28:	4013      	ands	r3, r2
 8001a2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a3e:	4a04      	ldr	r2, [pc, #16]	; (8001a50 <__NVIC_SetPriorityGrouping+0x44>)
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	60d3      	str	r3, [r2, #12]
}
 8001a44:	bf00      	nop
 8001a46:	3714      	adds	r7, #20
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bc80      	pop	{r7}
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	e000ed00 	.word	0xe000ed00

08001a54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a58:	4b04      	ldr	r3, [pc, #16]	; (8001a6c <__NVIC_GetPriorityGrouping+0x18>)
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	0a1b      	lsrs	r3, r3, #8
 8001a5e:	f003 0307 	and.w	r3, r3, #7
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bc80      	pop	{r7}
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	e000ed00 	.word	0xe000ed00

08001a70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	4603      	mov	r3, r0
 8001a78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	db0b      	blt.n	8001a9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a82:	79fb      	ldrb	r3, [r7, #7]
 8001a84:	f003 021f 	and.w	r2, r3, #31
 8001a88:	4906      	ldr	r1, [pc, #24]	; (8001aa4 <__NVIC_EnableIRQ+0x34>)
 8001a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8e:	095b      	lsrs	r3, r3, #5
 8001a90:	2001      	movs	r0, #1
 8001a92:	fa00 f202 	lsl.w	r2, r0, r2
 8001a96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a9a:	bf00      	nop
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bc80      	pop	{r7}
 8001aa2:	4770      	bx	lr
 8001aa4:	e000e100 	.word	0xe000e100

08001aa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	4603      	mov	r3, r0
 8001ab0:	6039      	str	r1, [r7, #0]
 8001ab2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ab4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	db0a      	blt.n	8001ad2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	b2da      	uxtb	r2, r3
 8001ac0:	490c      	ldr	r1, [pc, #48]	; (8001af4 <__NVIC_SetPriority+0x4c>)
 8001ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac6:	0112      	lsls	r2, r2, #4
 8001ac8:	b2d2      	uxtb	r2, r2
 8001aca:	440b      	add	r3, r1
 8001acc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ad0:	e00a      	b.n	8001ae8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	b2da      	uxtb	r2, r3
 8001ad6:	4908      	ldr	r1, [pc, #32]	; (8001af8 <__NVIC_SetPriority+0x50>)
 8001ad8:	79fb      	ldrb	r3, [r7, #7]
 8001ada:	f003 030f 	and.w	r3, r3, #15
 8001ade:	3b04      	subs	r3, #4
 8001ae0:	0112      	lsls	r2, r2, #4
 8001ae2:	b2d2      	uxtb	r2, r2
 8001ae4:	440b      	add	r3, r1
 8001ae6:	761a      	strb	r2, [r3, #24]
}
 8001ae8:	bf00      	nop
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bc80      	pop	{r7}
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	e000e100 	.word	0xe000e100
 8001af8:	e000ed00 	.word	0xe000ed00

08001afc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b089      	sub	sp, #36	; 0x24
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	60b9      	str	r1, [r7, #8]
 8001b06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f003 0307 	and.w	r3, r3, #7
 8001b0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	f1c3 0307 	rsb	r3, r3, #7
 8001b16:	2b04      	cmp	r3, #4
 8001b18:	bf28      	it	cs
 8001b1a:	2304      	movcs	r3, #4
 8001b1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	3304      	adds	r3, #4
 8001b22:	2b06      	cmp	r3, #6
 8001b24:	d902      	bls.n	8001b2c <NVIC_EncodePriority+0x30>
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	3b03      	subs	r3, #3
 8001b2a:	e000      	b.n	8001b2e <NVIC_EncodePriority+0x32>
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b30:	f04f 32ff 	mov.w	r2, #4294967295
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	43da      	mvns	r2, r3
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	401a      	ands	r2, r3
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b44:	f04f 31ff 	mov.w	r1, #4294967295
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b4e:	43d9      	mvns	r1, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b54:	4313      	orrs	r3, r2
         );
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3724      	adds	r7, #36	; 0x24
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bc80      	pop	{r7}
 8001b5e:	4770      	bx	lr

08001b60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b70:	d301      	bcc.n	8001b76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b72:	2301      	movs	r3, #1
 8001b74:	e00f      	b.n	8001b96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b76:	4a0a      	ldr	r2, [pc, #40]	; (8001ba0 <SysTick_Config+0x40>)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b7e:	210f      	movs	r1, #15
 8001b80:	f04f 30ff 	mov.w	r0, #4294967295
 8001b84:	f7ff ff90 	bl	8001aa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b88:	4b05      	ldr	r3, [pc, #20]	; (8001ba0 <SysTick_Config+0x40>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b8e:	4b04      	ldr	r3, [pc, #16]	; (8001ba0 <SysTick_Config+0x40>)
 8001b90:	2207      	movs	r2, #7
 8001b92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	e000e010 	.word	0xe000e010

08001ba4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f7ff ff2d 	bl	8001a0c <__NVIC_SetPriorityGrouping>
}
 8001bb2:	bf00      	nop
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b086      	sub	sp, #24
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	60b9      	str	r1, [r7, #8]
 8001bc4:	607a      	str	r2, [r7, #4]
 8001bc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bcc:	f7ff ff42 	bl	8001a54 <__NVIC_GetPriorityGrouping>
 8001bd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	68b9      	ldr	r1, [r7, #8]
 8001bd6:	6978      	ldr	r0, [r7, #20]
 8001bd8:	f7ff ff90 	bl	8001afc <NVIC_EncodePriority>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001be2:	4611      	mov	r1, r2
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff ff5f 	bl	8001aa8 <__NVIC_SetPriority>
}
 8001bea:	bf00      	nop
 8001bec:	3718      	adds	r7, #24
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b082      	sub	sp, #8
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff ff35 	bl	8001a70 <__NVIC_EnableIRQ>
}
 8001c06:	bf00      	nop
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b082      	sub	sp, #8
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f7ff ffa2 	bl	8001b60 <SysTick_Config>
 8001c1c:	4603      	mov	r3, r0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c26:	b480      	push	{r7}
 8001c28:	b085      	sub	sp, #20
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d008      	beq.n	8001c4e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2204      	movs	r2, #4
 8001c40:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e020      	b.n	8001c90 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f022 020e 	bic.w	r2, r2, #14
 8001c5c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f022 0201 	bic.w	r2, r2, #1
 8001c6c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c76:	2101      	movs	r1, #1
 8001c78:	fa01 f202 	lsl.w	r2, r1, r2
 8001c7c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2201      	movs	r2, #1
 8001c82:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3714      	adds	r7, #20
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bc80      	pop	{r7}
 8001c98:	4770      	bx	lr
	...

08001c9c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d005      	beq.n	8001cbe <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2204      	movs	r2, #4
 8001cb6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	73fb      	strb	r3, [r7, #15]
 8001cbc:	e0d6      	b.n	8001e6c <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f022 020e 	bic.w	r2, r2, #14
 8001ccc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f022 0201 	bic.w	r2, r2, #1
 8001cdc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	4b64      	ldr	r3, [pc, #400]	; (8001e78 <HAL_DMA_Abort_IT+0x1dc>)
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d958      	bls.n	8001d9c <HAL_DMA_Abort_IT+0x100>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a63      	ldr	r2, [pc, #396]	; (8001e7c <HAL_DMA_Abort_IT+0x1e0>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d04f      	beq.n	8001d94 <HAL_DMA_Abort_IT+0xf8>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a61      	ldr	r2, [pc, #388]	; (8001e80 <HAL_DMA_Abort_IT+0x1e4>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d048      	beq.n	8001d90 <HAL_DMA_Abort_IT+0xf4>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a60      	ldr	r2, [pc, #384]	; (8001e84 <HAL_DMA_Abort_IT+0x1e8>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d040      	beq.n	8001d8a <HAL_DMA_Abort_IT+0xee>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a5e      	ldr	r2, [pc, #376]	; (8001e88 <HAL_DMA_Abort_IT+0x1ec>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d038      	beq.n	8001d84 <HAL_DMA_Abort_IT+0xe8>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a5d      	ldr	r2, [pc, #372]	; (8001e8c <HAL_DMA_Abort_IT+0x1f0>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d030      	beq.n	8001d7e <HAL_DMA_Abort_IT+0xe2>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a5b      	ldr	r2, [pc, #364]	; (8001e90 <HAL_DMA_Abort_IT+0x1f4>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d028      	beq.n	8001d78 <HAL_DMA_Abort_IT+0xdc>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a53      	ldr	r2, [pc, #332]	; (8001e78 <HAL_DMA_Abort_IT+0x1dc>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d020      	beq.n	8001d72 <HAL_DMA_Abort_IT+0xd6>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a57      	ldr	r2, [pc, #348]	; (8001e94 <HAL_DMA_Abort_IT+0x1f8>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d019      	beq.n	8001d6e <HAL_DMA_Abort_IT+0xd2>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a56      	ldr	r2, [pc, #344]	; (8001e98 <HAL_DMA_Abort_IT+0x1fc>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d012      	beq.n	8001d6a <HAL_DMA_Abort_IT+0xce>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a54      	ldr	r2, [pc, #336]	; (8001e9c <HAL_DMA_Abort_IT+0x200>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d00a      	beq.n	8001d64 <HAL_DMA_Abort_IT+0xc8>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a53      	ldr	r2, [pc, #332]	; (8001ea0 <HAL_DMA_Abort_IT+0x204>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d102      	bne.n	8001d5e <HAL_DMA_Abort_IT+0xc2>
 8001d58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d5c:	e01b      	b.n	8001d96 <HAL_DMA_Abort_IT+0xfa>
 8001d5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d62:	e018      	b.n	8001d96 <HAL_DMA_Abort_IT+0xfa>
 8001d64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d68:	e015      	b.n	8001d96 <HAL_DMA_Abort_IT+0xfa>
 8001d6a:	2310      	movs	r3, #16
 8001d6c:	e013      	b.n	8001d96 <HAL_DMA_Abort_IT+0xfa>
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e011      	b.n	8001d96 <HAL_DMA_Abort_IT+0xfa>
 8001d72:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d76:	e00e      	b.n	8001d96 <HAL_DMA_Abort_IT+0xfa>
 8001d78:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001d7c:	e00b      	b.n	8001d96 <HAL_DMA_Abort_IT+0xfa>
 8001d7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d82:	e008      	b.n	8001d96 <HAL_DMA_Abort_IT+0xfa>
 8001d84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d88:	e005      	b.n	8001d96 <HAL_DMA_Abort_IT+0xfa>
 8001d8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d8e:	e002      	b.n	8001d96 <HAL_DMA_Abort_IT+0xfa>
 8001d90:	2310      	movs	r3, #16
 8001d92:	e000      	b.n	8001d96 <HAL_DMA_Abort_IT+0xfa>
 8001d94:	2301      	movs	r3, #1
 8001d96:	4a43      	ldr	r2, [pc, #268]	; (8001ea4 <HAL_DMA_Abort_IT+0x208>)
 8001d98:	6053      	str	r3, [r2, #4]
 8001d9a:	e057      	b.n	8001e4c <HAL_DMA_Abort_IT+0x1b0>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a36      	ldr	r2, [pc, #216]	; (8001e7c <HAL_DMA_Abort_IT+0x1e0>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d04f      	beq.n	8001e46 <HAL_DMA_Abort_IT+0x1aa>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a35      	ldr	r2, [pc, #212]	; (8001e80 <HAL_DMA_Abort_IT+0x1e4>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d048      	beq.n	8001e42 <HAL_DMA_Abort_IT+0x1a6>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a33      	ldr	r2, [pc, #204]	; (8001e84 <HAL_DMA_Abort_IT+0x1e8>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d040      	beq.n	8001e3c <HAL_DMA_Abort_IT+0x1a0>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a32      	ldr	r2, [pc, #200]	; (8001e88 <HAL_DMA_Abort_IT+0x1ec>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d038      	beq.n	8001e36 <HAL_DMA_Abort_IT+0x19a>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a30      	ldr	r2, [pc, #192]	; (8001e8c <HAL_DMA_Abort_IT+0x1f0>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d030      	beq.n	8001e30 <HAL_DMA_Abort_IT+0x194>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a2f      	ldr	r2, [pc, #188]	; (8001e90 <HAL_DMA_Abort_IT+0x1f4>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d028      	beq.n	8001e2a <HAL_DMA_Abort_IT+0x18e>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a26      	ldr	r2, [pc, #152]	; (8001e78 <HAL_DMA_Abort_IT+0x1dc>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d020      	beq.n	8001e24 <HAL_DMA_Abort_IT+0x188>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a2b      	ldr	r2, [pc, #172]	; (8001e94 <HAL_DMA_Abort_IT+0x1f8>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d019      	beq.n	8001e20 <HAL_DMA_Abort_IT+0x184>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a29      	ldr	r2, [pc, #164]	; (8001e98 <HAL_DMA_Abort_IT+0x1fc>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d012      	beq.n	8001e1c <HAL_DMA_Abort_IT+0x180>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a28      	ldr	r2, [pc, #160]	; (8001e9c <HAL_DMA_Abort_IT+0x200>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d00a      	beq.n	8001e16 <HAL_DMA_Abort_IT+0x17a>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a26      	ldr	r2, [pc, #152]	; (8001ea0 <HAL_DMA_Abort_IT+0x204>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d102      	bne.n	8001e10 <HAL_DMA_Abort_IT+0x174>
 8001e0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e0e:	e01b      	b.n	8001e48 <HAL_DMA_Abort_IT+0x1ac>
 8001e10:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e14:	e018      	b.n	8001e48 <HAL_DMA_Abort_IT+0x1ac>
 8001e16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e1a:	e015      	b.n	8001e48 <HAL_DMA_Abort_IT+0x1ac>
 8001e1c:	2310      	movs	r3, #16
 8001e1e:	e013      	b.n	8001e48 <HAL_DMA_Abort_IT+0x1ac>
 8001e20:	2301      	movs	r3, #1
 8001e22:	e011      	b.n	8001e48 <HAL_DMA_Abort_IT+0x1ac>
 8001e24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e28:	e00e      	b.n	8001e48 <HAL_DMA_Abort_IT+0x1ac>
 8001e2a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001e2e:	e00b      	b.n	8001e48 <HAL_DMA_Abort_IT+0x1ac>
 8001e30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e34:	e008      	b.n	8001e48 <HAL_DMA_Abort_IT+0x1ac>
 8001e36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e3a:	e005      	b.n	8001e48 <HAL_DMA_Abort_IT+0x1ac>
 8001e3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e40:	e002      	b.n	8001e48 <HAL_DMA_Abort_IT+0x1ac>
 8001e42:	2310      	movs	r3, #16
 8001e44:	e000      	b.n	8001e48 <HAL_DMA_Abort_IT+0x1ac>
 8001e46:	2301      	movs	r3, #1
 8001e48:	4a17      	ldr	r2, [pc, #92]	; (8001ea8 <HAL_DMA_Abort_IT+0x20c>)
 8001e4a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d003      	beq.n	8001e6c <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	4798      	blx	r3
    } 
  }
  return status;
 8001e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3710      	adds	r7, #16
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	40020080 	.word	0x40020080
 8001e7c:	40020008 	.word	0x40020008
 8001e80:	4002001c 	.word	0x4002001c
 8001e84:	40020030 	.word	0x40020030
 8001e88:	40020044 	.word	0x40020044
 8001e8c:	40020058 	.word	0x40020058
 8001e90:	4002006c 	.word	0x4002006c
 8001e94:	40020408 	.word	0x40020408
 8001e98:	4002041c 	.word	0x4002041c
 8001e9c:	40020430 	.word	0x40020430
 8001ea0:	40020444 	.word	0x40020444
 8001ea4:	40020400 	.word	0x40020400
 8001ea8:	40020000 	.word	0x40020000

08001eac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b08b      	sub	sp, #44	; 0x2c
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ebe:	e179      	b.n	80021b4 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	69fa      	ldr	r2, [r7, #28]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	f040 8168 	bne.w	80021ae <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	4a96      	ldr	r2, [pc, #600]	; (800213c <HAL_GPIO_Init+0x290>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d05e      	beq.n	8001fa6 <HAL_GPIO_Init+0xfa>
 8001ee8:	4a94      	ldr	r2, [pc, #592]	; (800213c <HAL_GPIO_Init+0x290>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d875      	bhi.n	8001fda <HAL_GPIO_Init+0x12e>
 8001eee:	4a94      	ldr	r2, [pc, #592]	; (8002140 <HAL_GPIO_Init+0x294>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d058      	beq.n	8001fa6 <HAL_GPIO_Init+0xfa>
 8001ef4:	4a92      	ldr	r2, [pc, #584]	; (8002140 <HAL_GPIO_Init+0x294>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d86f      	bhi.n	8001fda <HAL_GPIO_Init+0x12e>
 8001efa:	4a92      	ldr	r2, [pc, #584]	; (8002144 <HAL_GPIO_Init+0x298>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d052      	beq.n	8001fa6 <HAL_GPIO_Init+0xfa>
 8001f00:	4a90      	ldr	r2, [pc, #576]	; (8002144 <HAL_GPIO_Init+0x298>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d869      	bhi.n	8001fda <HAL_GPIO_Init+0x12e>
 8001f06:	4a90      	ldr	r2, [pc, #576]	; (8002148 <HAL_GPIO_Init+0x29c>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d04c      	beq.n	8001fa6 <HAL_GPIO_Init+0xfa>
 8001f0c:	4a8e      	ldr	r2, [pc, #568]	; (8002148 <HAL_GPIO_Init+0x29c>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d863      	bhi.n	8001fda <HAL_GPIO_Init+0x12e>
 8001f12:	4a8e      	ldr	r2, [pc, #568]	; (800214c <HAL_GPIO_Init+0x2a0>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d046      	beq.n	8001fa6 <HAL_GPIO_Init+0xfa>
 8001f18:	4a8c      	ldr	r2, [pc, #560]	; (800214c <HAL_GPIO_Init+0x2a0>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d85d      	bhi.n	8001fda <HAL_GPIO_Init+0x12e>
 8001f1e:	2b12      	cmp	r3, #18
 8001f20:	d82a      	bhi.n	8001f78 <HAL_GPIO_Init+0xcc>
 8001f22:	2b12      	cmp	r3, #18
 8001f24:	d859      	bhi.n	8001fda <HAL_GPIO_Init+0x12e>
 8001f26:	a201      	add	r2, pc, #4	; (adr r2, 8001f2c <HAL_GPIO_Init+0x80>)
 8001f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f2c:	08001fa7 	.word	0x08001fa7
 8001f30:	08001f81 	.word	0x08001f81
 8001f34:	08001f93 	.word	0x08001f93
 8001f38:	08001fd5 	.word	0x08001fd5
 8001f3c:	08001fdb 	.word	0x08001fdb
 8001f40:	08001fdb 	.word	0x08001fdb
 8001f44:	08001fdb 	.word	0x08001fdb
 8001f48:	08001fdb 	.word	0x08001fdb
 8001f4c:	08001fdb 	.word	0x08001fdb
 8001f50:	08001fdb 	.word	0x08001fdb
 8001f54:	08001fdb 	.word	0x08001fdb
 8001f58:	08001fdb 	.word	0x08001fdb
 8001f5c:	08001fdb 	.word	0x08001fdb
 8001f60:	08001fdb 	.word	0x08001fdb
 8001f64:	08001fdb 	.word	0x08001fdb
 8001f68:	08001fdb 	.word	0x08001fdb
 8001f6c:	08001fdb 	.word	0x08001fdb
 8001f70:	08001f89 	.word	0x08001f89
 8001f74:	08001f9d 	.word	0x08001f9d
 8001f78:	4a75      	ldr	r2, [pc, #468]	; (8002150 <HAL_GPIO_Init+0x2a4>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d013      	beq.n	8001fa6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f7e:	e02c      	b.n	8001fda <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	623b      	str	r3, [r7, #32]
          break;
 8001f86:	e029      	b.n	8001fdc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	3304      	adds	r3, #4
 8001f8e:	623b      	str	r3, [r7, #32]
          break;
 8001f90:	e024      	b.n	8001fdc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	3308      	adds	r3, #8
 8001f98:	623b      	str	r3, [r7, #32]
          break;
 8001f9a:	e01f      	b.n	8001fdc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	330c      	adds	r3, #12
 8001fa2:	623b      	str	r3, [r7, #32]
          break;
 8001fa4:	e01a      	b.n	8001fdc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d102      	bne.n	8001fb4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001fae:	2304      	movs	r3, #4
 8001fb0:	623b      	str	r3, [r7, #32]
          break;
 8001fb2:	e013      	b.n	8001fdc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d105      	bne.n	8001fc8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fbc:	2308      	movs	r3, #8
 8001fbe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	69fa      	ldr	r2, [r7, #28]
 8001fc4:	611a      	str	r2, [r3, #16]
          break;
 8001fc6:	e009      	b.n	8001fdc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fc8:	2308      	movs	r3, #8
 8001fca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	69fa      	ldr	r2, [r7, #28]
 8001fd0:	615a      	str	r2, [r3, #20]
          break;
 8001fd2:	e003      	b.n	8001fdc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	623b      	str	r3, [r7, #32]
          break;
 8001fd8:	e000      	b.n	8001fdc <HAL_GPIO_Init+0x130>
          break;
 8001fda:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	2bff      	cmp	r3, #255	; 0xff
 8001fe0:	d801      	bhi.n	8001fe6 <HAL_GPIO_Init+0x13a>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	e001      	b.n	8001fea <HAL_GPIO_Init+0x13e>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	3304      	adds	r3, #4
 8001fea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	2bff      	cmp	r3, #255	; 0xff
 8001ff0:	d802      	bhi.n	8001ff8 <HAL_GPIO_Init+0x14c>
 8001ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	e002      	b.n	8001ffe <HAL_GPIO_Init+0x152>
 8001ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffa:	3b08      	subs	r3, #8
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	210f      	movs	r1, #15
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	fa01 f303 	lsl.w	r3, r1, r3
 800200c:	43db      	mvns	r3, r3
 800200e:	401a      	ands	r2, r3
 8002010:	6a39      	ldr	r1, [r7, #32]
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	fa01 f303 	lsl.w	r3, r1, r3
 8002018:	431a      	orrs	r2, r3
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002026:	2b00      	cmp	r3, #0
 8002028:	f000 80c1 	beq.w	80021ae <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800202c:	4b49      	ldr	r3, [pc, #292]	; (8002154 <HAL_GPIO_Init+0x2a8>)
 800202e:	699b      	ldr	r3, [r3, #24]
 8002030:	4a48      	ldr	r2, [pc, #288]	; (8002154 <HAL_GPIO_Init+0x2a8>)
 8002032:	f043 0301 	orr.w	r3, r3, #1
 8002036:	6193      	str	r3, [r2, #24]
 8002038:	4b46      	ldr	r3, [pc, #280]	; (8002154 <HAL_GPIO_Init+0x2a8>)
 800203a:	699b      	ldr	r3, [r3, #24]
 800203c:	f003 0301 	and.w	r3, r3, #1
 8002040:	60bb      	str	r3, [r7, #8]
 8002042:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002044:	4a44      	ldr	r2, [pc, #272]	; (8002158 <HAL_GPIO_Init+0x2ac>)
 8002046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002048:	089b      	lsrs	r3, r3, #2
 800204a:	3302      	adds	r3, #2
 800204c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002050:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002054:	f003 0303 	and.w	r3, r3, #3
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	220f      	movs	r2, #15
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	43db      	mvns	r3, r3
 8002062:	68fa      	ldr	r2, [r7, #12]
 8002064:	4013      	ands	r3, r2
 8002066:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	4a3c      	ldr	r2, [pc, #240]	; (800215c <HAL_GPIO_Init+0x2b0>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d01f      	beq.n	80020b0 <HAL_GPIO_Init+0x204>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4a3b      	ldr	r2, [pc, #236]	; (8002160 <HAL_GPIO_Init+0x2b4>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d019      	beq.n	80020ac <HAL_GPIO_Init+0x200>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4a3a      	ldr	r2, [pc, #232]	; (8002164 <HAL_GPIO_Init+0x2b8>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d013      	beq.n	80020a8 <HAL_GPIO_Init+0x1fc>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	4a39      	ldr	r2, [pc, #228]	; (8002168 <HAL_GPIO_Init+0x2bc>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d00d      	beq.n	80020a4 <HAL_GPIO_Init+0x1f8>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	4a38      	ldr	r2, [pc, #224]	; (800216c <HAL_GPIO_Init+0x2c0>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d007      	beq.n	80020a0 <HAL_GPIO_Init+0x1f4>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	4a37      	ldr	r2, [pc, #220]	; (8002170 <HAL_GPIO_Init+0x2c4>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d101      	bne.n	800209c <HAL_GPIO_Init+0x1f0>
 8002098:	2305      	movs	r3, #5
 800209a:	e00a      	b.n	80020b2 <HAL_GPIO_Init+0x206>
 800209c:	2306      	movs	r3, #6
 800209e:	e008      	b.n	80020b2 <HAL_GPIO_Init+0x206>
 80020a0:	2304      	movs	r3, #4
 80020a2:	e006      	b.n	80020b2 <HAL_GPIO_Init+0x206>
 80020a4:	2303      	movs	r3, #3
 80020a6:	e004      	b.n	80020b2 <HAL_GPIO_Init+0x206>
 80020a8:	2302      	movs	r3, #2
 80020aa:	e002      	b.n	80020b2 <HAL_GPIO_Init+0x206>
 80020ac:	2301      	movs	r3, #1
 80020ae:	e000      	b.n	80020b2 <HAL_GPIO_Init+0x206>
 80020b0:	2300      	movs	r3, #0
 80020b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020b4:	f002 0203 	and.w	r2, r2, #3
 80020b8:	0092      	lsls	r2, r2, #2
 80020ba:	4093      	lsls	r3, r2
 80020bc:	68fa      	ldr	r2, [r7, #12]
 80020be:	4313      	orrs	r3, r2
 80020c0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80020c2:	4925      	ldr	r1, [pc, #148]	; (8002158 <HAL_GPIO_Init+0x2ac>)
 80020c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c6:	089b      	lsrs	r3, r3, #2
 80020c8:	3302      	adds	r3, #2
 80020ca:	68fa      	ldr	r2, [r7, #12]
 80020cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d006      	beq.n	80020ea <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80020dc:	4b25      	ldr	r3, [pc, #148]	; (8002174 <HAL_GPIO_Init+0x2c8>)
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	4924      	ldr	r1, [pc, #144]	; (8002174 <HAL_GPIO_Init+0x2c8>)
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	600b      	str	r3, [r1, #0]
 80020e8:	e006      	b.n	80020f8 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80020ea:	4b22      	ldr	r3, [pc, #136]	; (8002174 <HAL_GPIO_Init+0x2c8>)
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	43db      	mvns	r3, r3
 80020f2:	4920      	ldr	r1, [pc, #128]	; (8002174 <HAL_GPIO_Init+0x2c8>)
 80020f4:	4013      	ands	r3, r2
 80020f6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d006      	beq.n	8002112 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002104:	4b1b      	ldr	r3, [pc, #108]	; (8002174 <HAL_GPIO_Init+0x2c8>)
 8002106:	685a      	ldr	r2, [r3, #4]
 8002108:	491a      	ldr	r1, [pc, #104]	; (8002174 <HAL_GPIO_Init+0x2c8>)
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	4313      	orrs	r3, r2
 800210e:	604b      	str	r3, [r1, #4]
 8002110:	e006      	b.n	8002120 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002112:	4b18      	ldr	r3, [pc, #96]	; (8002174 <HAL_GPIO_Init+0x2c8>)
 8002114:	685a      	ldr	r2, [r3, #4]
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	43db      	mvns	r3, r3
 800211a:	4916      	ldr	r1, [pc, #88]	; (8002174 <HAL_GPIO_Init+0x2c8>)
 800211c:	4013      	ands	r3, r2
 800211e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d025      	beq.n	8002178 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800212c:	4b11      	ldr	r3, [pc, #68]	; (8002174 <HAL_GPIO_Init+0x2c8>)
 800212e:	689a      	ldr	r2, [r3, #8]
 8002130:	4910      	ldr	r1, [pc, #64]	; (8002174 <HAL_GPIO_Init+0x2c8>)
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	4313      	orrs	r3, r2
 8002136:	608b      	str	r3, [r1, #8]
 8002138:	e025      	b.n	8002186 <HAL_GPIO_Init+0x2da>
 800213a:	bf00      	nop
 800213c:	10320000 	.word	0x10320000
 8002140:	10310000 	.word	0x10310000
 8002144:	10220000 	.word	0x10220000
 8002148:	10210000 	.word	0x10210000
 800214c:	10120000 	.word	0x10120000
 8002150:	10110000 	.word	0x10110000
 8002154:	40021000 	.word	0x40021000
 8002158:	40010000 	.word	0x40010000
 800215c:	40010800 	.word	0x40010800
 8002160:	40010c00 	.word	0x40010c00
 8002164:	40011000 	.word	0x40011000
 8002168:	40011400 	.word	0x40011400
 800216c:	40011800 	.word	0x40011800
 8002170:	40011c00 	.word	0x40011c00
 8002174:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002178:	4b15      	ldr	r3, [pc, #84]	; (80021d0 <HAL_GPIO_Init+0x324>)
 800217a:	689a      	ldr	r2, [r3, #8]
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	43db      	mvns	r3, r3
 8002180:	4913      	ldr	r1, [pc, #76]	; (80021d0 <HAL_GPIO_Init+0x324>)
 8002182:	4013      	ands	r3, r2
 8002184:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d006      	beq.n	80021a0 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002192:	4b0f      	ldr	r3, [pc, #60]	; (80021d0 <HAL_GPIO_Init+0x324>)
 8002194:	68da      	ldr	r2, [r3, #12]
 8002196:	490e      	ldr	r1, [pc, #56]	; (80021d0 <HAL_GPIO_Init+0x324>)
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	4313      	orrs	r3, r2
 800219c:	60cb      	str	r3, [r1, #12]
 800219e:	e006      	b.n	80021ae <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80021a0:	4b0b      	ldr	r3, [pc, #44]	; (80021d0 <HAL_GPIO_Init+0x324>)
 80021a2:	68da      	ldr	r2, [r3, #12]
 80021a4:	69bb      	ldr	r3, [r7, #24]
 80021a6:	43db      	mvns	r3, r3
 80021a8:	4909      	ldr	r1, [pc, #36]	; (80021d0 <HAL_GPIO_Init+0x324>)
 80021aa:	4013      	ands	r3, r2
 80021ac:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80021ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b0:	3301      	adds	r3, #1
 80021b2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ba:	fa22 f303 	lsr.w	r3, r2, r3
 80021be:	2b00      	cmp	r3, #0
 80021c0:	f47f ae7e 	bne.w	8001ec0 <HAL_GPIO_Init+0x14>
  }
}
 80021c4:	bf00      	nop
 80021c6:	bf00      	nop
 80021c8:	372c      	adds	r7, #44	; 0x2c
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bc80      	pop	{r7}
 80021ce:	4770      	bx	lr
 80021d0:	40010400 	.word	0x40010400

080021d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b085      	sub	sp, #20
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	460b      	mov	r3, r1
 80021de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	689a      	ldr	r2, [r3, #8]
 80021e4:	887b      	ldrh	r3, [r7, #2]
 80021e6:	4013      	ands	r3, r2
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d002      	beq.n	80021f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021ec:	2301      	movs	r3, #1
 80021ee:	73fb      	strb	r3, [r7, #15]
 80021f0:	e001      	b.n	80021f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021f2:	2300      	movs	r3, #0
 80021f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3714      	adds	r7, #20
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bc80      	pop	{r7}
 8002200:	4770      	bx	lr

08002202 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002202:	b480      	push	{r7}
 8002204:	b083      	sub	sp, #12
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
 800220a:	460b      	mov	r3, r1
 800220c:	807b      	strh	r3, [r7, #2]
 800220e:	4613      	mov	r3, r2
 8002210:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002212:	787b      	ldrb	r3, [r7, #1]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d003      	beq.n	8002220 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002218:	887a      	ldrh	r2, [r7, #2]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800221e:	e003      	b.n	8002228 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002220:	887b      	ldrh	r3, [r7, #2]
 8002222:	041a      	lsls	r2, r3, #16
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	611a      	str	r2, [r3, #16]
}
 8002228:	bf00      	nop
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	bc80      	pop	{r7}
 8002230:	4770      	bx	lr
	...

08002234 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d101      	bne.n	8002246 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e12b      	b.n	800249e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800224c:	b2db      	uxtb	r3, r3
 800224e:	2b00      	cmp	r3, #0
 8002250:	d106      	bne.n	8002260 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f7ff f9be 	bl	80015dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2224      	movs	r2, #36	; 0x24
 8002264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f022 0201 	bic.w	r2, r2, #1
 8002276:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002286:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002296:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002298:	f000 fce4 	bl	8002c64 <HAL_RCC_GetPCLK1Freq>
 800229c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	4a81      	ldr	r2, [pc, #516]	; (80024a8 <HAL_I2C_Init+0x274>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d807      	bhi.n	80022b8 <HAL_I2C_Init+0x84>
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	4a80      	ldr	r2, [pc, #512]	; (80024ac <HAL_I2C_Init+0x278>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	bf94      	ite	ls
 80022b0:	2301      	movls	r3, #1
 80022b2:	2300      	movhi	r3, #0
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	e006      	b.n	80022c6 <HAL_I2C_Init+0x92>
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	4a7d      	ldr	r2, [pc, #500]	; (80024b0 <HAL_I2C_Init+0x27c>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	bf94      	ite	ls
 80022c0:	2301      	movls	r3, #1
 80022c2:	2300      	movhi	r3, #0
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e0e7      	b.n	800249e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	4a78      	ldr	r2, [pc, #480]	; (80024b4 <HAL_I2C_Init+0x280>)
 80022d2:	fba2 2303 	umull	r2, r3, r2, r3
 80022d6:	0c9b      	lsrs	r3, r3, #18
 80022d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	68ba      	ldr	r2, [r7, #8]
 80022ea:	430a      	orrs	r2, r1
 80022ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	6a1b      	ldr	r3, [r3, #32]
 80022f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	4a6a      	ldr	r2, [pc, #424]	; (80024a8 <HAL_I2C_Init+0x274>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d802      	bhi.n	8002308 <HAL_I2C_Init+0xd4>
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	3301      	adds	r3, #1
 8002306:	e009      	b.n	800231c <HAL_I2C_Init+0xe8>
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800230e:	fb02 f303 	mul.w	r3, r2, r3
 8002312:	4a69      	ldr	r2, [pc, #420]	; (80024b8 <HAL_I2C_Init+0x284>)
 8002314:	fba2 2303 	umull	r2, r3, r2, r3
 8002318:	099b      	lsrs	r3, r3, #6
 800231a:	3301      	adds	r3, #1
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	6812      	ldr	r2, [r2, #0]
 8002320:	430b      	orrs	r3, r1
 8002322:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	69db      	ldr	r3, [r3, #28]
 800232a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800232e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	495c      	ldr	r1, [pc, #368]	; (80024a8 <HAL_I2C_Init+0x274>)
 8002338:	428b      	cmp	r3, r1
 800233a:	d819      	bhi.n	8002370 <HAL_I2C_Init+0x13c>
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	1e59      	subs	r1, r3, #1
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	005b      	lsls	r3, r3, #1
 8002346:	fbb1 f3f3 	udiv	r3, r1, r3
 800234a:	1c59      	adds	r1, r3, #1
 800234c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002350:	400b      	ands	r3, r1
 8002352:	2b00      	cmp	r3, #0
 8002354:	d00a      	beq.n	800236c <HAL_I2C_Init+0x138>
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	1e59      	subs	r1, r3, #1
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	fbb1 f3f3 	udiv	r3, r1, r3
 8002364:	3301      	adds	r3, #1
 8002366:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800236a:	e051      	b.n	8002410 <HAL_I2C_Init+0x1dc>
 800236c:	2304      	movs	r3, #4
 800236e:	e04f      	b.n	8002410 <HAL_I2C_Init+0x1dc>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d111      	bne.n	800239c <HAL_I2C_Init+0x168>
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	1e58      	subs	r0, r3, #1
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6859      	ldr	r1, [r3, #4]
 8002380:	460b      	mov	r3, r1
 8002382:	005b      	lsls	r3, r3, #1
 8002384:	440b      	add	r3, r1
 8002386:	fbb0 f3f3 	udiv	r3, r0, r3
 800238a:	3301      	adds	r3, #1
 800238c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002390:	2b00      	cmp	r3, #0
 8002392:	bf0c      	ite	eq
 8002394:	2301      	moveq	r3, #1
 8002396:	2300      	movne	r3, #0
 8002398:	b2db      	uxtb	r3, r3
 800239a:	e012      	b.n	80023c2 <HAL_I2C_Init+0x18e>
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	1e58      	subs	r0, r3, #1
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6859      	ldr	r1, [r3, #4]
 80023a4:	460b      	mov	r3, r1
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	440b      	add	r3, r1
 80023aa:	0099      	lsls	r1, r3, #2
 80023ac:	440b      	add	r3, r1
 80023ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80023b2:	3301      	adds	r3, #1
 80023b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	bf0c      	ite	eq
 80023bc:	2301      	moveq	r3, #1
 80023be:	2300      	movne	r3, #0
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <HAL_I2C_Init+0x196>
 80023c6:	2301      	movs	r3, #1
 80023c8:	e022      	b.n	8002410 <HAL_I2C_Init+0x1dc>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d10e      	bne.n	80023f0 <HAL_I2C_Init+0x1bc>
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	1e58      	subs	r0, r3, #1
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6859      	ldr	r1, [r3, #4]
 80023da:	460b      	mov	r3, r1
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	440b      	add	r3, r1
 80023e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80023e4:	3301      	adds	r3, #1
 80023e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023ee:	e00f      	b.n	8002410 <HAL_I2C_Init+0x1dc>
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	1e58      	subs	r0, r3, #1
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6859      	ldr	r1, [r3, #4]
 80023f8:	460b      	mov	r3, r1
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	440b      	add	r3, r1
 80023fe:	0099      	lsls	r1, r3, #2
 8002400:	440b      	add	r3, r1
 8002402:	fbb0 f3f3 	udiv	r3, r0, r3
 8002406:	3301      	adds	r3, #1
 8002408:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800240c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002410:	6879      	ldr	r1, [r7, #4]
 8002412:	6809      	ldr	r1, [r1, #0]
 8002414:	4313      	orrs	r3, r2
 8002416:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	69da      	ldr	r2, [r3, #28]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a1b      	ldr	r3, [r3, #32]
 800242a:	431a      	orrs	r2, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	430a      	orrs	r2, r1
 8002432:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800243e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	6911      	ldr	r1, [r2, #16]
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	68d2      	ldr	r2, [r2, #12]
 800244a:	4311      	orrs	r1, r2
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	6812      	ldr	r2, [r2, #0]
 8002450:	430b      	orrs	r3, r1
 8002452:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	695a      	ldr	r2, [r3, #20]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	699b      	ldr	r3, [r3, #24]
 8002466:	431a      	orrs	r2, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	430a      	orrs	r2, r1
 800246e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f042 0201 	orr.w	r2, r2, #1
 800247e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2200      	movs	r2, #0
 8002484:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2220      	movs	r2, #32
 800248a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3710      	adds	r7, #16
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	000186a0 	.word	0x000186a0
 80024ac:	001e847f 	.word	0x001e847f
 80024b0:	003d08ff 	.word	0x003d08ff
 80024b4:	431bde83 	.word	0x431bde83
 80024b8:	10624dd3 	.word	0x10624dd3

080024bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b086      	sub	sp, #24
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d101      	bne.n	80024ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e272      	b.n	80029b4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	f000 8087 	beq.w	80025ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024dc:	4b92      	ldr	r3, [pc, #584]	; (8002728 <HAL_RCC_OscConfig+0x26c>)
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f003 030c 	and.w	r3, r3, #12
 80024e4:	2b04      	cmp	r3, #4
 80024e6:	d00c      	beq.n	8002502 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80024e8:	4b8f      	ldr	r3, [pc, #572]	; (8002728 <HAL_RCC_OscConfig+0x26c>)
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f003 030c 	and.w	r3, r3, #12
 80024f0:	2b08      	cmp	r3, #8
 80024f2:	d112      	bne.n	800251a <HAL_RCC_OscConfig+0x5e>
 80024f4:	4b8c      	ldr	r3, [pc, #560]	; (8002728 <HAL_RCC_OscConfig+0x26c>)
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002500:	d10b      	bne.n	800251a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002502:	4b89      	ldr	r3, [pc, #548]	; (8002728 <HAL_RCC_OscConfig+0x26c>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d06c      	beq.n	80025e8 <HAL_RCC_OscConfig+0x12c>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d168      	bne.n	80025e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e24c      	b.n	80029b4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002522:	d106      	bne.n	8002532 <HAL_RCC_OscConfig+0x76>
 8002524:	4b80      	ldr	r3, [pc, #512]	; (8002728 <HAL_RCC_OscConfig+0x26c>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a7f      	ldr	r2, [pc, #508]	; (8002728 <HAL_RCC_OscConfig+0x26c>)
 800252a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800252e:	6013      	str	r3, [r2, #0]
 8002530:	e02e      	b.n	8002590 <HAL_RCC_OscConfig+0xd4>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d10c      	bne.n	8002554 <HAL_RCC_OscConfig+0x98>
 800253a:	4b7b      	ldr	r3, [pc, #492]	; (8002728 <HAL_RCC_OscConfig+0x26c>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a7a      	ldr	r2, [pc, #488]	; (8002728 <HAL_RCC_OscConfig+0x26c>)
 8002540:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002544:	6013      	str	r3, [r2, #0]
 8002546:	4b78      	ldr	r3, [pc, #480]	; (8002728 <HAL_RCC_OscConfig+0x26c>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a77      	ldr	r2, [pc, #476]	; (8002728 <HAL_RCC_OscConfig+0x26c>)
 800254c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002550:	6013      	str	r3, [r2, #0]
 8002552:	e01d      	b.n	8002590 <HAL_RCC_OscConfig+0xd4>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800255c:	d10c      	bne.n	8002578 <HAL_RCC_OscConfig+0xbc>
 800255e:	4b72      	ldr	r3, [pc, #456]	; (8002728 <HAL_RCC_OscConfig+0x26c>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a71      	ldr	r2, [pc, #452]	; (8002728 <HAL_RCC_OscConfig+0x26c>)
 8002564:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002568:	6013      	str	r3, [r2, #0]
 800256a:	4b6f      	ldr	r3, [pc, #444]	; (8002728 <HAL_RCC_OscConfig+0x26c>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a6e      	ldr	r2, [pc, #440]	; (8002728 <HAL_RCC_OscConfig+0x26c>)
 8002570:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002574:	6013      	str	r3, [r2, #0]
 8002576:	e00b      	b.n	8002590 <HAL_RCC_OscConfig+0xd4>
 8002578:	4b6b      	ldr	r3, [pc, #428]	; (8002728 <HAL_RCC_OscConfig+0x26c>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a6a      	ldr	r2, [pc, #424]	; (8002728 <HAL_RCC_OscConfig+0x26c>)
 800257e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002582:	6013      	str	r3, [r2, #0]
 8002584:	4b68      	ldr	r3, [pc, #416]	; (8002728 <HAL_RCC_OscConfig+0x26c>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a67      	ldr	r2, [pc, #412]	; (8002728 <HAL_RCC_OscConfig+0x26c>)
 800258a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800258e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d013      	beq.n	80025c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002598:	f7ff fa0a 	bl	80019b0 <HAL_GetTick>
 800259c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800259e:	e008      	b.n	80025b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025a0:	f7ff fa06 	bl	80019b0 <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b64      	cmp	r3, #100	; 0x64
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e200      	b.n	80029b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025b2:	4b5d      	ldr	r3, [pc, #372]	; (8002728 <HAL_RCC_OscConfig+0x26c>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d0f0      	beq.n	80025a0 <HAL_RCC_OscConfig+0xe4>
 80025be:	e014      	b.n	80025ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c0:	f7ff f9f6 	bl	80019b0 <HAL_GetTick>
 80025c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025c6:	e008      	b.n	80025da <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025c8:	f7ff f9f2 	bl	80019b0 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b64      	cmp	r3, #100	; 0x64
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e1ec      	b.n	80029b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025da:	4b53      	ldr	r3, [pc, #332]	; (8002728 <HAL_RCC_OscConfig+0x26c>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d1f0      	bne.n	80025c8 <HAL_RCC_OscConfig+0x10c>
 80025e6:	e000      	b.n	80025ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d063      	beq.n	80026be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025f6:	4b4c      	ldr	r3, [pc, #304]	; (8002728 <HAL_RCC_OscConfig+0x26c>)
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f003 030c 	and.w	r3, r3, #12
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d00b      	beq.n	800261a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002602:	4b49      	ldr	r3, [pc, #292]	; (8002728 <HAL_RCC_OscConfig+0x26c>)
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f003 030c 	and.w	r3, r3, #12
 800260a:	2b08      	cmp	r3, #8
 800260c:	d11c      	bne.n	8002648 <HAL_RCC_OscConfig+0x18c>
 800260e:	4b46      	ldr	r3, [pc, #280]	; (8002728 <HAL_RCC_OscConfig+0x26c>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d116      	bne.n	8002648 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800261a:	4b43      	ldr	r3, [pc, #268]	; (8002728 <HAL_RCC_OscConfig+0x26c>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	2b00      	cmp	r3, #0
 8002624:	d005      	beq.n	8002632 <HAL_RCC_OscConfig+0x176>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	2b01      	cmp	r3, #1
 800262c:	d001      	beq.n	8002632 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e1c0      	b.n	80029b4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002632:	4b3d      	ldr	r3, [pc, #244]	; (8002728 <HAL_RCC_OscConfig+0x26c>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	695b      	ldr	r3, [r3, #20]
 800263e:	00db      	lsls	r3, r3, #3
 8002640:	4939      	ldr	r1, [pc, #228]	; (8002728 <HAL_RCC_OscConfig+0x26c>)
 8002642:	4313      	orrs	r3, r2
 8002644:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002646:	e03a      	b.n	80026be <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	691b      	ldr	r3, [r3, #16]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d020      	beq.n	8002692 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002650:	4b36      	ldr	r3, [pc, #216]	; (800272c <HAL_RCC_OscConfig+0x270>)
 8002652:	2201      	movs	r2, #1
 8002654:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002656:	f7ff f9ab 	bl	80019b0 <HAL_GetTick>
 800265a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800265c:	e008      	b.n	8002670 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800265e:	f7ff f9a7 	bl	80019b0 <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	2b02      	cmp	r3, #2
 800266a:	d901      	bls.n	8002670 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	e1a1      	b.n	80029b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002670:	4b2d      	ldr	r3, [pc, #180]	; (8002728 <HAL_RCC_OscConfig+0x26c>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0302 	and.w	r3, r3, #2
 8002678:	2b00      	cmp	r3, #0
 800267a:	d0f0      	beq.n	800265e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800267c:	4b2a      	ldr	r3, [pc, #168]	; (8002728 <HAL_RCC_OscConfig+0x26c>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	695b      	ldr	r3, [r3, #20]
 8002688:	00db      	lsls	r3, r3, #3
 800268a:	4927      	ldr	r1, [pc, #156]	; (8002728 <HAL_RCC_OscConfig+0x26c>)
 800268c:	4313      	orrs	r3, r2
 800268e:	600b      	str	r3, [r1, #0]
 8002690:	e015      	b.n	80026be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002692:	4b26      	ldr	r3, [pc, #152]	; (800272c <HAL_RCC_OscConfig+0x270>)
 8002694:	2200      	movs	r2, #0
 8002696:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002698:	f7ff f98a 	bl	80019b0 <HAL_GetTick>
 800269c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800269e:	e008      	b.n	80026b2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026a0:	f7ff f986 	bl	80019b0 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e180      	b.n	80029b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026b2:	4b1d      	ldr	r3, [pc, #116]	; (8002728 <HAL_RCC_OscConfig+0x26c>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d1f0      	bne.n	80026a0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0308 	and.w	r3, r3, #8
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d03a      	beq.n	8002740 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	699b      	ldr	r3, [r3, #24]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d019      	beq.n	8002706 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026d2:	4b17      	ldr	r3, [pc, #92]	; (8002730 <HAL_RCC_OscConfig+0x274>)
 80026d4:	2201      	movs	r2, #1
 80026d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026d8:	f7ff f96a 	bl	80019b0 <HAL_GetTick>
 80026dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026de:	e008      	b.n	80026f2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026e0:	f7ff f966 	bl	80019b0 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e160      	b.n	80029b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026f2:	4b0d      	ldr	r3, [pc, #52]	; (8002728 <HAL_RCC_OscConfig+0x26c>)
 80026f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d0f0      	beq.n	80026e0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80026fe:	2001      	movs	r0, #1
 8002700:	f000 fad8 	bl	8002cb4 <RCC_Delay>
 8002704:	e01c      	b.n	8002740 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002706:	4b0a      	ldr	r3, [pc, #40]	; (8002730 <HAL_RCC_OscConfig+0x274>)
 8002708:	2200      	movs	r2, #0
 800270a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800270c:	f7ff f950 	bl	80019b0 <HAL_GetTick>
 8002710:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002712:	e00f      	b.n	8002734 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002714:	f7ff f94c 	bl	80019b0 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b02      	cmp	r3, #2
 8002720:	d908      	bls.n	8002734 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e146      	b.n	80029b4 <HAL_RCC_OscConfig+0x4f8>
 8002726:	bf00      	nop
 8002728:	40021000 	.word	0x40021000
 800272c:	42420000 	.word	0x42420000
 8002730:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002734:	4b92      	ldr	r3, [pc, #584]	; (8002980 <HAL_RCC_OscConfig+0x4c4>)
 8002736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002738:	f003 0302 	and.w	r3, r3, #2
 800273c:	2b00      	cmp	r3, #0
 800273e:	d1e9      	bne.n	8002714 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0304 	and.w	r3, r3, #4
 8002748:	2b00      	cmp	r3, #0
 800274a:	f000 80a6 	beq.w	800289a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800274e:	2300      	movs	r3, #0
 8002750:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002752:	4b8b      	ldr	r3, [pc, #556]	; (8002980 <HAL_RCC_OscConfig+0x4c4>)
 8002754:	69db      	ldr	r3, [r3, #28]
 8002756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d10d      	bne.n	800277a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800275e:	4b88      	ldr	r3, [pc, #544]	; (8002980 <HAL_RCC_OscConfig+0x4c4>)
 8002760:	69db      	ldr	r3, [r3, #28]
 8002762:	4a87      	ldr	r2, [pc, #540]	; (8002980 <HAL_RCC_OscConfig+0x4c4>)
 8002764:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002768:	61d3      	str	r3, [r2, #28]
 800276a:	4b85      	ldr	r3, [pc, #532]	; (8002980 <HAL_RCC_OscConfig+0x4c4>)
 800276c:	69db      	ldr	r3, [r3, #28]
 800276e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002772:	60bb      	str	r3, [r7, #8]
 8002774:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002776:	2301      	movs	r3, #1
 8002778:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800277a:	4b82      	ldr	r3, [pc, #520]	; (8002984 <HAL_RCC_OscConfig+0x4c8>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002782:	2b00      	cmp	r3, #0
 8002784:	d118      	bne.n	80027b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002786:	4b7f      	ldr	r3, [pc, #508]	; (8002984 <HAL_RCC_OscConfig+0x4c8>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a7e      	ldr	r2, [pc, #504]	; (8002984 <HAL_RCC_OscConfig+0x4c8>)
 800278c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002790:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002792:	f7ff f90d 	bl	80019b0 <HAL_GetTick>
 8002796:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002798:	e008      	b.n	80027ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800279a:	f7ff f909 	bl	80019b0 <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	2b64      	cmp	r3, #100	; 0x64
 80027a6:	d901      	bls.n	80027ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80027a8:	2303      	movs	r3, #3
 80027aa:	e103      	b.n	80029b4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ac:	4b75      	ldr	r3, [pc, #468]	; (8002984 <HAL_RCC_OscConfig+0x4c8>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d0f0      	beq.n	800279a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d106      	bne.n	80027ce <HAL_RCC_OscConfig+0x312>
 80027c0:	4b6f      	ldr	r3, [pc, #444]	; (8002980 <HAL_RCC_OscConfig+0x4c4>)
 80027c2:	6a1b      	ldr	r3, [r3, #32]
 80027c4:	4a6e      	ldr	r2, [pc, #440]	; (8002980 <HAL_RCC_OscConfig+0x4c4>)
 80027c6:	f043 0301 	orr.w	r3, r3, #1
 80027ca:	6213      	str	r3, [r2, #32]
 80027cc:	e02d      	b.n	800282a <HAL_RCC_OscConfig+0x36e>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d10c      	bne.n	80027f0 <HAL_RCC_OscConfig+0x334>
 80027d6:	4b6a      	ldr	r3, [pc, #424]	; (8002980 <HAL_RCC_OscConfig+0x4c4>)
 80027d8:	6a1b      	ldr	r3, [r3, #32]
 80027da:	4a69      	ldr	r2, [pc, #420]	; (8002980 <HAL_RCC_OscConfig+0x4c4>)
 80027dc:	f023 0301 	bic.w	r3, r3, #1
 80027e0:	6213      	str	r3, [r2, #32]
 80027e2:	4b67      	ldr	r3, [pc, #412]	; (8002980 <HAL_RCC_OscConfig+0x4c4>)
 80027e4:	6a1b      	ldr	r3, [r3, #32]
 80027e6:	4a66      	ldr	r2, [pc, #408]	; (8002980 <HAL_RCC_OscConfig+0x4c4>)
 80027e8:	f023 0304 	bic.w	r3, r3, #4
 80027ec:	6213      	str	r3, [r2, #32]
 80027ee:	e01c      	b.n	800282a <HAL_RCC_OscConfig+0x36e>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	2b05      	cmp	r3, #5
 80027f6:	d10c      	bne.n	8002812 <HAL_RCC_OscConfig+0x356>
 80027f8:	4b61      	ldr	r3, [pc, #388]	; (8002980 <HAL_RCC_OscConfig+0x4c4>)
 80027fa:	6a1b      	ldr	r3, [r3, #32]
 80027fc:	4a60      	ldr	r2, [pc, #384]	; (8002980 <HAL_RCC_OscConfig+0x4c4>)
 80027fe:	f043 0304 	orr.w	r3, r3, #4
 8002802:	6213      	str	r3, [r2, #32]
 8002804:	4b5e      	ldr	r3, [pc, #376]	; (8002980 <HAL_RCC_OscConfig+0x4c4>)
 8002806:	6a1b      	ldr	r3, [r3, #32]
 8002808:	4a5d      	ldr	r2, [pc, #372]	; (8002980 <HAL_RCC_OscConfig+0x4c4>)
 800280a:	f043 0301 	orr.w	r3, r3, #1
 800280e:	6213      	str	r3, [r2, #32]
 8002810:	e00b      	b.n	800282a <HAL_RCC_OscConfig+0x36e>
 8002812:	4b5b      	ldr	r3, [pc, #364]	; (8002980 <HAL_RCC_OscConfig+0x4c4>)
 8002814:	6a1b      	ldr	r3, [r3, #32]
 8002816:	4a5a      	ldr	r2, [pc, #360]	; (8002980 <HAL_RCC_OscConfig+0x4c4>)
 8002818:	f023 0301 	bic.w	r3, r3, #1
 800281c:	6213      	str	r3, [r2, #32]
 800281e:	4b58      	ldr	r3, [pc, #352]	; (8002980 <HAL_RCC_OscConfig+0x4c4>)
 8002820:	6a1b      	ldr	r3, [r3, #32]
 8002822:	4a57      	ldr	r2, [pc, #348]	; (8002980 <HAL_RCC_OscConfig+0x4c4>)
 8002824:	f023 0304 	bic.w	r3, r3, #4
 8002828:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d015      	beq.n	800285e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002832:	f7ff f8bd 	bl	80019b0 <HAL_GetTick>
 8002836:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002838:	e00a      	b.n	8002850 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800283a:	f7ff f8b9 	bl	80019b0 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	f241 3288 	movw	r2, #5000	; 0x1388
 8002848:	4293      	cmp	r3, r2
 800284a:	d901      	bls.n	8002850 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	e0b1      	b.n	80029b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002850:	4b4b      	ldr	r3, [pc, #300]	; (8002980 <HAL_RCC_OscConfig+0x4c4>)
 8002852:	6a1b      	ldr	r3, [r3, #32]
 8002854:	f003 0302 	and.w	r3, r3, #2
 8002858:	2b00      	cmp	r3, #0
 800285a:	d0ee      	beq.n	800283a <HAL_RCC_OscConfig+0x37e>
 800285c:	e014      	b.n	8002888 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800285e:	f7ff f8a7 	bl	80019b0 <HAL_GetTick>
 8002862:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002864:	e00a      	b.n	800287c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002866:	f7ff f8a3 	bl	80019b0 <HAL_GetTick>
 800286a:	4602      	mov	r2, r0
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	f241 3288 	movw	r2, #5000	; 0x1388
 8002874:	4293      	cmp	r3, r2
 8002876:	d901      	bls.n	800287c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e09b      	b.n	80029b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800287c:	4b40      	ldr	r3, [pc, #256]	; (8002980 <HAL_RCC_OscConfig+0x4c4>)
 800287e:	6a1b      	ldr	r3, [r3, #32]
 8002880:	f003 0302 	and.w	r3, r3, #2
 8002884:	2b00      	cmp	r3, #0
 8002886:	d1ee      	bne.n	8002866 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002888:	7dfb      	ldrb	r3, [r7, #23]
 800288a:	2b01      	cmp	r3, #1
 800288c:	d105      	bne.n	800289a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800288e:	4b3c      	ldr	r3, [pc, #240]	; (8002980 <HAL_RCC_OscConfig+0x4c4>)
 8002890:	69db      	ldr	r3, [r3, #28]
 8002892:	4a3b      	ldr	r2, [pc, #236]	; (8002980 <HAL_RCC_OscConfig+0x4c4>)
 8002894:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002898:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	69db      	ldr	r3, [r3, #28]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	f000 8087 	beq.w	80029b2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028a4:	4b36      	ldr	r3, [pc, #216]	; (8002980 <HAL_RCC_OscConfig+0x4c4>)
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f003 030c 	and.w	r3, r3, #12
 80028ac:	2b08      	cmp	r3, #8
 80028ae:	d061      	beq.n	8002974 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	69db      	ldr	r3, [r3, #28]
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d146      	bne.n	8002946 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028b8:	4b33      	ldr	r3, [pc, #204]	; (8002988 <HAL_RCC_OscConfig+0x4cc>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028be:	f7ff f877 	bl	80019b0 <HAL_GetTick>
 80028c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028c4:	e008      	b.n	80028d8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028c6:	f7ff f873 	bl	80019b0 <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d901      	bls.n	80028d8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	e06d      	b.n	80029b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028d8:	4b29      	ldr	r3, [pc, #164]	; (8002980 <HAL_RCC_OscConfig+0x4c4>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d1f0      	bne.n	80028c6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6a1b      	ldr	r3, [r3, #32]
 80028e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028ec:	d108      	bne.n	8002900 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80028ee:	4b24      	ldr	r3, [pc, #144]	; (8002980 <HAL_RCC_OscConfig+0x4c4>)
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	4921      	ldr	r1, [pc, #132]	; (8002980 <HAL_RCC_OscConfig+0x4c4>)
 80028fc:	4313      	orrs	r3, r2
 80028fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002900:	4b1f      	ldr	r3, [pc, #124]	; (8002980 <HAL_RCC_OscConfig+0x4c4>)
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a19      	ldr	r1, [r3, #32]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002910:	430b      	orrs	r3, r1
 8002912:	491b      	ldr	r1, [pc, #108]	; (8002980 <HAL_RCC_OscConfig+0x4c4>)
 8002914:	4313      	orrs	r3, r2
 8002916:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002918:	4b1b      	ldr	r3, [pc, #108]	; (8002988 <HAL_RCC_OscConfig+0x4cc>)
 800291a:	2201      	movs	r2, #1
 800291c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800291e:	f7ff f847 	bl	80019b0 <HAL_GetTick>
 8002922:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002924:	e008      	b.n	8002938 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002926:	f7ff f843 	bl	80019b0 <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	2b02      	cmp	r3, #2
 8002932:	d901      	bls.n	8002938 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e03d      	b.n	80029b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002938:	4b11      	ldr	r3, [pc, #68]	; (8002980 <HAL_RCC_OscConfig+0x4c4>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d0f0      	beq.n	8002926 <HAL_RCC_OscConfig+0x46a>
 8002944:	e035      	b.n	80029b2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002946:	4b10      	ldr	r3, [pc, #64]	; (8002988 <HAL_RCC_OscConfig+0x4cc>)
 8002948:	2200      	movs	r2, #0
 800294a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800294c:	f7ff f830 	bl	80019b0 <HAL_GetTick>
 8002950:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002952:	e008      	b.n	8002966 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002954:	f7ff f82c 	bl	80019b0 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b02      	cmp	r3, #2
 8002960:	d901      	bls.n	8002966 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e026      	b.n	80029b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002966:	4b06      	ldr	r3, [pc, #24]	; (8002980 <HAL_RCC_OscConfig+0x4c4>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d1f0      	bne.n	8002954 <HAL_RCC_OscConfig+0x498>
 8002972:	e01e      	b.n	80029b2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	69db      	ldr	r3, [r3, #28]
 8002978:	2b01      	cmp	r3, #1
 800297a:	d107      	bne.n	800298c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e019      	b.n	80029b4 <HAL_RCC_OscConfig+0x4f8>
 8002980:	40021000 	.word	0x40021000
 8002984:	40007000 	.word	0x40007000
 8002988:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800298c:	4b0b      	ldr	r3, [pc, #44]	; (80029bc <HAL_RCC_OscConfig+0x500>)
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6a1b      	ldr	r3, [r3, #32]
 800299c:	429a      	cmp	r2, r3
 800299e:	d106      	bne.n	80029ae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d001      	beq.n	80029b2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e000      	b.n	80029b4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80029b2:	2300      	movs	r3, #0
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3718      	adds	r7, #24
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	40021000 	.word	0x40021000

080029c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d101      	bne.n	80029d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e0d0      	b.n	8002b76 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029d4:	4b6a      	ldr	r3, [pc, #424]	; (8002b80 <HAL_RCC_ClockConfig+0x1c0>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0307 	and.w	r3, r3, #7
 80029dc:	683a      	ldr	r2, [r7, #0]
 80029de:	429a      	cmp	r2, r3
 80029e0:	d910      	bls.n	8002a04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029e2:	4b67      	ldr	r3, [pc, #412]	; (8002b80 <HAL_RCC_ClockConfig+0x1c0>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f023 0207 	bic.w	r2, r3, #7
 80029ea:	4965      	ldr	r1, [pc, #404]	; (8002b80 <HAL_RCC_ClockConfig+0x1c0>)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029f2:	4b63      	ldr	r3, [pc, #396]	; (8002b80 <HAL_RCC_ClockConfig+0x1c0>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0307 	and.w	r3, r3, #7
 80029fa:	683a      	ldr	r2, [r7, #0]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d001      	beq.n	8002a04 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e0b8      	b.n	8002b76 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0302 	and.w	r3, r3, #2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d020      	beq.n	8002a52 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0304 	and.w	r3, r3, #4
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d005      	beq.n	8002a28 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a1c:	4b59      	ldr	r3, [pc, #356]	; (8002b84 <HAL_RCC_ClockConfig+0x1c4>)
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	4a58      	ldr	r2, [pc, #352]	; (8002b84 <HAL_RCC_ClockConfig+0x1c4>)
 8002a22:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002a26:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0308 	and.w	r3, r3, #8
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d005      	beq.n	8002a40 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a34:	4b53      	ldr	r3, [pc, #332]	; (8002b84 <HAL_RCC_ClockConfig+0x1c4>)
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	4a52      	ldr	r2, [pc, #328]	; (8002b84 <HAL_RCC_ClockConfig+0x1c4>)
 8002a3a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002a3e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a40:	4b50      	ldr	r3, [pc, #320]	; (8002b84 <HAL_RCC_ClockConfig+0x1c4>)
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	494d      	ldr	r1, [pc, #308]	; (8002b84 <HAL_RCC_ClockConfig+0x1c4>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d040      	beq.n	8002ae0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d107      	bne.n	8002a76 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a66:	4b47      	ldr	r3, [pc, #284]	; (8002b84 <HAL_RCC_ClockConfig+0x1c4>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d115      	bne.n	8002a9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e07f      	b.n	8002b76 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d107      	bne.n	8002a8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a7e:	4b41      	ldr	r3, [pc, #260]	; (8002b84 <HAL_RCC_ClockConfig+0x1c4>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d109      	bne.n	8002a9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e073      	b.n	8002b76 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a8e:	4b3d      	ldr	r3, [pc, #244]	; (8002b84 <HAL_RCC_ClockConfig+0x1c4>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d101      	bne.n	8002a9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e06b      	b.n	8002b76 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a9e:	4b39      	ldr	r3, [pc, #228]	; (8002b84 <HAL_RCC_ClockConfig+0x1c4>)
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f023 0203 	bic.w	r2, r3, #3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	4936      	ldr	r1, [pc, #216]	; (8002b84 <HAL_RCC_ClockConfig+0x1c4>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ab0:	f7fe ff7e 	bl	80019b0 <HAL_GetTick>
 8002ab4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ab6:	e00a      	b.n	8002ace <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ab8:	f7fe ff7a 	bl	80019b0 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e053      	b.n	8002b76 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ace:	4b2d      	ldr	r3, [pc, #180]	; (8002b84 <HAL_RCC_ClockConfig+0x1c4>)
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f003 020c 	and.w	r2, r3, #12
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d1eb      	bne.n	8002ab8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ae0:	4b27      	ldr	r3, [pc, #156]	; (8002b80 <HAL_RCC_ClockConfig+0x1c0>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0307 	and.w	r3, r3, #7
 8002ae8:	683a      	ldr	r2, [r7, #0]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d210      	bcs.n	8002b10 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aee:	4b24      	ldr	r3, [pc, #144]	; (8002b80 <HAL_RCC_ClockConfig+0x1c0>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f023 0207 	bic.w	r2, r3, #7
 8002af6:	4922      	ldr	r1, [pc, #136]	; (8002b80 <HAL_RCC_ClockConfig+0x1c0>)
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002afe:	4b20      	ldr	r3, [pc, #128]	; (8002b80 <HAL_RCC_ClockConfig+0x1c0>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0307 	and.w	r3, r3, #7
 8002b06:	683a      	ldr	r2, [r7, #0]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d001      	beq.n	8002b10 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e032      	b.n	8002b76 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0304 	and.w	r3, r3, #4
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d008      	beq.n	8002b2e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b1c:	4b19      	ldr	r3, [pc, #100]	; (8002b84 <HAL_RCC_ClockConfig+0x1c4>)
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	4916      	ldr	r1, [pc, #88]	; (8002b84 <HAL_RCC_ClockConfig+0x1c4>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0308 	and.w	r3, r3, #8
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d009      	beq.n	8002b4e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b3a:	4b12      	ldr	r3, [pc, #72]	; (8002b84 <HAL_RCC_ClockConfig+0x1c4>)
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	691b      	ldr	r3, [r3, #16]
 8002b46:	00db      	lsls	r3, r3, #3
 8002b48:	490e      	ldr	r1, [pc, #56]	; (8002b84 <HAL_RCC_ClockConfig+0x1c4>)
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b4e:	f000 f821 	bl	8002b94 <HAL_RCC_GetSysClockFreq>
 8002b52:	4602      	mov	r2, r0
 8002b54:	4b0b      	ldr	r3, [pc, #44]	; (8002b84 <HAL_RCC_ClockConfig+0x1c4>)
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	091b      	lsrs	r3, r3, #4
 8002b5a:	f003 030f 	and.w	r3, r3, #15
 8002b5e:	490a      	ldr	r1, [pc, #40]	; (8002b88 <HAL_RCC_ClockConfig+0x1c8>)
 8002b60:	5ccb      	ldrb	r3, [r1, r3]
 8002b62:	fa22 f303 	lsr.w	r3, r2, r3
 8002b66:	4a09      	ldr	r2, [pc, #36]	; (8002b8c <HAL_RCC_ClockConfig+0x1cc>)
 8002b68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b6a:	4b09      	ldr	r3, [pc, #36]	; (8002b90 <HAL_RCC_ClockConfig+0x1d0>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7fe fedc 	bl	800192c <HAL_InitTick>

  return HAL_OK;
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3710      	adds	r7, #16
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	40022000 	.word	0x40022000
 8002b84:	40021000 	.word	0x40021000
 8002b88:	08004f00 	.word	0x08004f00
 8002b8c:	20000000 	.word	0x20000000
 8002b90:	20000004 	.word	0x20000004

08002b94 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b94:	b490      	push	{r4, r7}
 8002b96:	b08a      	sub	sp, #40	; 0x28
 8002b98:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002b9a:	4b29      	ldr	r3, [pc, #164]	; (8002c40 <HAL_RCC_GetSysClockFreq+0xac>)
 8002b9c:	1d3c      	adds	r4, r7, #4
 8002b9e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ba0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002ba4:	f240 2301 	movw	r3, #513	; 0x201
 8002ba8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002baa:	2300      	movs	r3, #0
 8002bac:	61fb      	str	r3, [r7, #28]
 8002bae:	2300      	movs	r3, #0
 8002bb0:	61bb      	str	r3, [r7, #24]
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	627b      	str	r3, [r7, #36]	; 0x24
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002bbe:	4b21      	ldr	r3, [pc, #132]	; (8002c44 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	f003 030c 	and.w	r3, r3, #12
 8002bca:	2b04      	cmp	r3, #4
 8002bcc:	d002      	beq.n	8002bd4 <HAL_RCC_GetSysClockFreq+0x40>
 8002bce:	2b08      	cmp	r3, #8
 8002bd0:	d003      	beq.n	8002bda <HAL_RCC_GetSysClockFreq+0x46>
 8002bd2:	e02b      	b.n	8002c2c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002bd4:	4b1c      	ldr	r3, [pc, #112]	; (8002c48 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002bd6:	623b      	str	r3, [r7, #32]
      break;
 8002bd8:	e02b      	b.n	8002c32 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	0c9b      	lsrs	r3, r3, #18
 8002bde:	f003 030f 	and.w	r3, r3, #15
 8002be2:	3328      	adds	r3, #40	; 0x28
 8002be4:	443b      	add	r3, r7
 8002be6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002bea:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d012      	beq.n	8002c1c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002bf6:	4b13      	ldr	r3, [pc, #76]	; (8002c44 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	0c5b      	lsrs	r3, r3, #17
 8002bfc:	f003 0301 	and.w	r3, r3, #1
 8002c00:	3328      	adds	r3, #40	; 0x28
 8002c02:	443b      	add	r3, r7
 8002c04:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002c08:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	4a0e      	ldr	r2, [pc, #56]	; (8002c48 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002c0e:	fb03 f202 	mul.w	r2, r3, r2
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c18:	627b      	str	r3, [r7, #36]	; 0x24
 8002c1a:	e004      	b.n	8002c26 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	4a0b      	ldr	r2, [pc, #44]	; (8002c4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c20:	fb02 f303 	mul.w	r3, r2, r3
 8002c24:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c28:	623b      	str	r3, [r7, #32]
      break;
 8002c2a:	e002      	b.n	8002c32 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c2c:	4b06      	ldr	r3, [pc, #24]	; (8002c48 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002c2e:	623b      	str	r3, [r7, #32]
      break;
 8002c30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c32:	6a3b      	ldr	r3, [r7, #32]
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3728      	adds	r7, #40	; 0x28
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bc90      	pop	{r4, r7}
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	08004900 	.word	0x08004900
 8002c44:	40021000 	.word	0x40021000
 8002c48:	007a1200 	.word	0x007a1200
 8002c4c:	003d0900 	.word	0x003d0900

08002c50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c50:	b480      	push	{r7}
 8002c52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c54:	4b02      	ldr	r3, [pc, #8]	; (8002c60 <HAL_RCC_GetHCLKFreq+0x10>)
 8002c56:	681b      	ldr	r3, [r3, #0]
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bc80      	pop	{r7}
 8002c5e:	4770      	bx	lr
 8002c60:	20000000 	.word	0x20000000

08002c64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c68:	f7ff fff2 	bl	8002c50 <HAL_RCC_GetHCLKFreq>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	4b05      	ldr	r3, [pc, #20]	; (8002c84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	0a1b      	lsrs	r3, r3, #8
 8002c74:	f003 0307 	and.w	r3, r3, #7
 8002c78:	4903      	ldr	r1, [pc, #12]	; (8002c88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c7a:	5ccb      	ldrb	r3, [r1, r3]
 8002c7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	40021000 	.word	0x40021000
 8002c88:	08004f10 	.word	0x08004f10

08002c8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c90:	f7ff ffde 	bl	8002c50 <HAL_RCC_GetHCLKFreq>
 8002c94:	4602      	mov	r2, r0
 8002c96:	4b05      	ldr	r3, [pc, #20]	; (8002cac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	0adb      	lsrs	r3, r3, #11
 8002c9c:	f003 0307 	and.w	r3, r3, #7
 8002ca0:	4903      	ldr	r1, [pc, #12]	; (8002cb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ca2:	5ccb      	ldrb	r3, [r1, r3]
 8002ca4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	40021000 	.word	0x40021000
 8002cb0:	08004f10 	.word	0x08004f10

08002cb4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002cbc:	4b0a      	ldr	r3, [pc, #40]	; (8002ce8 <RCC_Delay+0x34>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a0a      	ldr	r2, [pc, #40]	; (8002cec <RCC_Delay+0x38>)
 8002cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc6:	0a5b      	lsrs	r3, r3, #9
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	fb02 f303 	mul.w	r3, r2, r3
 8002cce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002cd0:	bf00      	nop
  }
  while (Delay --);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	1e5a      	subs	r2, r3, #1
 8002cd6:	60fa      	str	r2, [r7, #12]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d1f9      	bne.n	8002cd0 <RCC_Delay+0x1c>
}
 8002cdc:	bf00      	nop
 8002cde:	bf00      	nop
 8002ce0:	3714      	adds	r7, #20
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bc80      	pop	{r7}
 8002ce6:	4770      	bx	lr
 8002ce8:	20000000 	.word	0x20000000
 8002cec:	10624dd3 	.word	0x10624dd3

08002cf0 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d004      	beq.n	8002d0c <HAL_SRAM_Init+0x1c>
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	699b      	ldr	r3, [r3, #24]
 8002d06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d0a:	d101      	bne.n	8002d10 <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e038      	b.n	8002d82 <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d106      	bne.n	8002d2a <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8002d24:	68f8      	ldr	r0, [r7, #12]
 8002d26:	f7fe fd4d 	bl	80017c4 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	3308      	adds	r3, #8
 8002d32:	4619      	mov	r1, r3
 8002d34:	4610      	mov	r0, r2
 8002d36:	f001 f847 	bl	8003dc8 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6818      	ldr	r0, [r3, #0]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	461a      	mov	r2, r3
 8002d44:	68b9      	ldr	r1, [r7, #8]
 8002d46:	f001 f8a9 	bl	8003e9c <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	6858      	ldr	r0, [r3, #4]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	689a      	ldr	r2, [r3, #8]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d56:	6879      	ldr	r1, [r7, #4]
 8002d58:	f001 f8d4 	bl	8003f04 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	68fa      	ldr	r2, [r7, #12]
 8002d62:	6892      	ldr	r2, [r2, #8]
 8002d64:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	68fa      	ldr	r2, [r7, #12]
 8002d6e:	6892      	ldr	r2, [r2, #8]
 8002d70:	f041 0101 	orr.w	r1, r1, #1
 8002d74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3710      	adds	r7, #16
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d8a:	b580      	push	{r7, lr}
 8002d8c:	b082      	sub	sp, #8
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d101      	bne.n	8002d9c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e041      	b.n	8002e20 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d106      	bne.n	8002db6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f7fe fc51 	bl	8001658 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2202      	movs	r2, #2
 8002dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	3304      	adds	r3, #4
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	4610      	mov	r0, r2
 8002dca:	f000 f949 	bl	8003060 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2201      	movs	r2, #1
 8002dda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2201      	movs	r2, #1
 8002de2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2201      	movs	r2, #1
 8002dea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2201      	movs	r2, #1
 8002df2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2201      	movs	r2, #1
 8002e02:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2201      	movs	r2, #1
 8002e12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e1e:	2300      	movs	r3, #0
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3708      	adds	r7, #8
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b085      	sub	sp, #20
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d001      	beq.n	8002e40 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e03c      	b.n	8002eba <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2202      	movs	r2, #2
 8002e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a1d      	ldr	r2, [pc, #116]	; (8002ec4 <HAL_TIM_Base_Start+0x9c>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d018      	beq.n	8002e84 <HAL_TIM_Base_Start+0x5c>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a1c      	ldr	r2, [pc, #112]	; (8002ec8 <HAL_TIM_Base_Start+0xa0>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d013      	beq.n	8002e84 <HAL_TIM_Base_Start+0x5c>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e64:	d00e      	beq.n	8002e84 <HAL_TIM_Base_Start+0x5c>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a18      	ldr	r2, [pc, #96]	; (8002ecc <HAL_TIM_Base_Start+0xa4>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d009      	beq.n	8002e84 <HAL_TIM_Base_Start+0x5c>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a16      	ldr	r2, [pc, #88]	; (8002ed0 <HAL_TIM_Base_Start+0xa8>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d004      	beq.n	8002e84 <HAL_TIM_Base_Start+0x5c>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a15      	ldr	r2, [pc, #84]	; (8002ed4 <HAL_TIM_Base_Start+0xac>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d111      	bne.n	8002ea8 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f003 0307 	and.w	r3, r3, #7
 8002e8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2b06      	cmp	r3, #6
 8002e94:	d010      	beq.n	8002eb8 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f042 0201 	orr.w	r2, r2, #1
 8002ea4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ea6:	e007      	b.n	8002eb8 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f042 0201 	orr.w	r2, r2, #1
 8002eb6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3714      	adds	r7, #20
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bc80      	pop	{r7}
 8002ec2:	4770      	bx	lr
 8002ec4:	40012c00 	.word	0x40012c00
 8002ec8:	40013400 	.word	0x40013400
 8002ecc:	40000400 	.word	0x40000400
 8002ed0:	40000800 	.word	0x40000800
 8002ed4:	40000c00 	.word	0x40000c00

08002ed8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d101      	bne.n	8002ef0 <HAL_TIM_ConfigClockSource+0x18>
 8002eec:	2302      	movs	r3, #2
 8002eee:	e0b3      	b.n	8003058 <HAL_TIM_ConfigClockSource+0x180>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2202      	movs	r2, #2
 8002efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002f0e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f16:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	68fa      	ldr	r2, [r7, #12]
 8002f1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f28:	d03e      	beq.n	8002fa8 <HAL_TIM_ConfigClockSource+0xd0>
 8002f2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f2e:	f200 8087 	bhi.w	8003040 <HAL_TIM_ConfigClockSource+0x168>
 8002f32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f36:	f000 8085 	beq.w	8003044 <HAL_TIM_ConfigClockSource+0x16c>
 8002f3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f3e:	d87f      	bhi.n	8003040 <HAL_TIM_ConfigClockSource+0x168>
 8002f40:	2b70      	cmp	r3, #112	; 0x70
 8002f42:	d01a      	beq.n	8002f7a <HAL_TIM_ConfigClockSource+0xa2>
 8002f44:	2b70      	cmp	r3, #112	; 0x70
 8002f46:	d87b      	bhi.n	8003040 <HAL_TIM_ConfigClockSource+0x168>
 8002f48:	2b60      	cmp	r3, #96	; 0x60
 8002f4a:	d050      	beq.n	8002fee <HAL_TIM_ConfigClockSource+0x116>
 8002f4c:	2b60      	cmp	r3, #96	; 0x60
 8002f4e:	d877      	bhi.n	8003040 <HAL_TIM_ConfigClockSource+0x168>
 8002f50:	2b50      	cmp	r3, #80	; 0x50
 8002f52:	d03c      	beq.n	8002fce <HAL_TIM_ConfigClockSource+0xf6>
 8002f54:	2b50      	cmp	r3, #80	; 0x50
 8002f56:	d873      	bhi.n	8003040 <HAL_TIM_ConfigClockSource+0x168>
 8002f58:	2b40      	cmp	r3, #64	; 0x40
 8002f5a:	d058      	beq.n	800300e <HAL_TIM_ConfigClockSource+0x136>
 8002f5c:	2b40      	cmp	r3, #64	; 0x40
 8002f5e:	d86f      	bhi.n	8003040 <HAL_TIM_ConfigClockSource+0x168>
 8002f60:	2b30      	cmp	r3, #48	; 0x30
 8002f62:	d064      	beq.n	800302e <HAL_TIM_ConfigClockSource+0x156>
 8002f64:	2b30      	cmp	r3, #48	; 0x30
 8002f66:	d86b      	bhi.n	8003040 <HAL_TIM_ConfigClockSource+0x168>
 8002f68:	2b20      	cmp	r3, #32
 8002f6a:	d060      	beq.n	800302e <HAL_TIM_ConfigClockSource+0x156>
 8002f6c:	2b20      	cmp	r3, #32
 8002f6e:	d867      	bhi.n	8003040 <HAL_TIM_ConfigClockSource+0x168>
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d05c      	beq.n	800302e <HAL_TIM_ConfigClockSource+0x156>
 8002f74:	2b10      	cmp	r3, #16
 8002f76:	d05a      	beq.n	800302e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002f78:	e062      	b.n	8003040 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6818      	ldr	r0, [r3, #0]
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	6899      	ldr	r1, [r3, #8]
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	685a      	ldr	r2, [r3, #4]
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	f000 f95a 	bl	8003242 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002f9c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	68fa      	ldr	r2, [r7, #12]
 8002fa4:	609a      	str	r2, [r3, #8]
      break;
 8002fa6:	e04e      	b.n	8003046 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6818      	ldr	r0, [r3, #0]
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	6899      	ldr	r1, [r3, #8]
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	685a      	ldr	r2, [r3, #4]
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	f000 f943 	bl	8003242 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	689a      	ldr	r2, [r3, #8]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002fca:	609a      	str	r2, [r3, #8]
      break;
 8002fcc:	e03b      	b.n	8003046 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6818      	ldr	r0, [r3, #0]
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	6859      	ldr	r1, [r3, #4]
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	461a      	mov	r2, r3
 8002fdc:	f000 f8ba 	bl	8003154 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2150      	movs	r1, #80	; 0x50
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f000 f911 	bl	800320e <TIM_ITRx_SetConfig>
      break;
 8002fec:	e02b      	b.n	8003046 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6818      	ldr	r0, [r3, #0]
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	6859      	ldr	r1, [r3, #4]
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	f000 f8d8 	bl	80031b0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2160      	movs	r1, #96	; 0x60
 8003006:	4618      	mov	r0, r3
 8003008:	f000 f901 	bl	800320e <TIM_ITRx_SetConfig>
      break;
 800300c:	e01b      	b.n	8003046 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6818      	ldr	r0, [r3, #0]
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	6859      	ldr	r1, [r3, #4]
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	461a      	mov	r2, r3
 800301c:	f000 f89a 	bl	8003154 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2140      	movs	r1, #64	; 0x40
 8003026:	4618      	mov	r0, r3
 8003028:	f000 f8f1 	bl	800320e <TIM_ITRx_SetConfig>
      break;
 800302c:	e00b      	b.n	8003046 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4619      	mov	r1, r3
 8003038:	4610      	mov	r0, r2
 800303a:	f000 f8e8 	bl	800320e <TIM_ITRx_SetConfig>
        break;
 800303e:	e002      	b.n	8003046 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003040:	bf00      	nop
 8003042:	e000      	b.n	8003046 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003044:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2201      	movs	r2, #1
 800304a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003056:	2300      	movs	r3, #0
}
 8003058:	4618      	mov	r0, r3
 800305a:	3710      	adds	r7, #16
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003060:	b480      	push	{r7}
 8003062:	b085      	sub	sp, #20
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	4a33      	ldr	r2, [pc, #204]	; (8003140 <TIM_Base_SetConfig+0xe0>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d013      	beq.n	80030a0 <TIM_Base_SetConfig+0x40>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4a32      	ldr	r2, [pc, #200]	; (8003144 <TIM_Base_SetConfig+0xe4>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d00f      	beq.n	80030a0 <TIM_Base_SetConfig+0x40>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003086:	d00b      	beq.n	80030a0 <TIM_Base_SetConfig+0x40>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	4a2f      	ldr	r2, [pc, #188]	; (8003148 <TIM_Base_SetConfig+0xe8>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d007      	beq.n	80030a0 <TIM_Base_SetConfig+0x40>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	4a2e      	ldr	r2, [pc, #184]	; (800314c <TIM_Base_SetConfig+0xec>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d003      	beq.n	80030a0 <TIM_Base_SetConfig+0x40>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	4a2d      	ldr	r2, [pc, #180]	; (8003150 <TIM_Base_SetConfig+0xf0>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d108      	bne.n	80030b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	68fa      	ldr	r2, [r7, #12]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a22      	ldr	r2, [pc, #136]	; (8003140 <TIM_Base_SetConfig+0xe0>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d013      	beq.n	80030e2 <TIM_Base_SetConfig+0x82>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a21      	ldr	r2, [pc, #132]	; (8003144 <TIM_Base_SetConfig+0xe4>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d00f      	beq.n	80030e2 <TIM_Base_SetConfig+0x82>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030c8:	d00b      	beq.n	80030e2 <TIM_Base_SetConfig+0x82>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a1e      	ldr	r2, [pc, #120]	; (8003148 <TIM_Base_SetConfig+0xe8>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d007      	beq.n	80030e2 <TIM_Base_SetConfig+0x82>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a1d      	ldr	r2, [pc, #116]	; (800314c <TIM_Base_SetConfig+0xec>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d003      	beq.n	80030e2 <TIM_Base_SetConfig+0x82>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a1c      	ldr	r2, [pc, #112]	; (8003150 <TIM_Base_SetConfig+0xf0>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d108      	bne.n	80030f4 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	4313      	orrs	r3, r2
 8003100:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	68fa      	ldr	r2, [r7, #12]
 8003106:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	689a      	ldr	r2, [r3, #8]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	4a09      	ldr	r2, [pc, #36]	; (8003140 <TIM_Base_SetConfig+0xe0>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d003      	beq.n	8003128 <TIM_Base_SetConfig+0xc8>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	4a08      	ldr	r2, [pc, #32]	; (8003144 <TIM_Base_SetConfig+0xe4>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d103      	bne.n	8003130 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	691a      	ldr	r2, [r3, #16]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	615a      	str	r2, [r3, #20]
}
 8003136:	bf00      	nop
 8003138:	3714      	adds	r7, #20
 800313a:	46bd      	mov	sp, r7
 800313c:	bc80      	pop	{r7}
 800313e:	4770      	bx	lr
 8003140:	40012c00 	.word	0x40012c00
 8003144:	40013400 	.word	0x40013400
 8003148:	40000400 	.word	0x40000400
 800314c:	40000800 	.word	0x40000800
 8003150:	40000c00 	.word	0x40000c00

08003154 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003154:	b480      	push	{r7}
 8003156:	b087      	sub	sp, #28
 8003158:	af00      	add	r7, sp, #0
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	60b9      	str	r1, [r7, #8]
 800315e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6a1b      	ldr	r3, [r3, #32]
 8003164:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6a1b      	ldr	r3, [r3, #32]
 800316a:	f023 0201 	bic.w	r2, r3, #1
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	699b      	ldr	r3, [r3, #24]
 8003176:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800317e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	011b      	lsls	r3, r3, #4
 8003184:	693a      	ldr	r2, [r7, #16]
 8003186:	4313      	orrs	r3, r2
 8003188:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	f023 030a 	bic.w	r3, r3, #10
 8003190:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003192:	697a      	ldr	r2, [r7, #20]
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	4313      	orrs	r3, r2
 8003198:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	693a      	ldr	r2, [r7, #16]
 800319e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	697a      	ldr	r2, [r7, #20]
 80031a4:	621a      	str	r2, [r3, #32]
}
 80031a6:	bf00      	nop
 80031a8:	371c      	adds	r7, #28
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bc80      	pop	{r7}
 80031ae:	4770      	bx	lr

080031b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b087      	sub	sp, #28
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	60b9      	str	r1, [r7, #8]
 80031ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6a1b      	ldr	r3, [r3, #32]
 80031c0:	f023 0210 	bic.w	r2, r3, #16
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	699b      	ldr	r3, [r3, #24]
 80031cc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6a1b      	ldr	r3, [r3, #32]
 80031d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80031da:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	031b      	lsls	r3, r3, #12
 80031e0:	697a      	ldr	r2, [r7, #20]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80031ec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	011b      	lsls	r3, r3, #4
 80031f2:	693a      	ldr	r2, [r7, #16]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	697a      	ldr	r2, [r7, #20]
 80031fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	693a      	ldr	r2, [r7, #16]
 8003202:	621a      	str	r2, [r3, #32]
}
 8003204:	bf00      	nop
 8003206:	371c      	adds	r7, #28
 8003208:	46bd      	mov	sp, r7
 800320a:	bc80      	pop	{r7}
 800320c:	4770      	bx	lr

0800320e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800320e:	b480      	push	{r7}
 8003210:	b085      	sub	sp, #20
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
 8003216:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003224:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003226:	683a      	ldr	r2, [r7, #0]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	4313      	orrs	r3, r2
 800322c:	f043 0307 	orr.w	r3, r3, #7
 8003230:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	68fa      	ldr	r2, [r7, #12]
 8003236:	609a      	str	r2, [r3, #8]
}
 8003238:	bf00      	nop
 800323a:	3714      	adds	r7, #20
 800323c:	46bd      	mov	sp, r7
 800323e:	bc80      	pop	{r7}
 8003240:	4770      	bx	lr

08003242 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003242:	b480      	push	{r7}
 8003244:	b087      	sub	sp, #28
 8003246:	af00      	add	r7, sp, #0
 8003248:	60f8      	str	r0, [r7, #12]
 800324a:	60b9      	str	r1, [r7, #8]
 800324c:	607a      	str	r2, [r7, #4]
 800324e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800325c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	021a      	lsls	r2, r3, #8
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	431a      	orrs	r2, r3
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	4313      	orrs	r3, r2
 800326a:	697a      	ldr	r2, [r7, #20]
 800326c:	4313      	orrs	r3, r2
 800326e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	697a      	ldr	r2, [r7, #20]
 8003274:	609a      	str	r2, [r3, #8]
}
 8003276:	bf00      	nop
 8003278:	371c      	adds	r7, #28
 800327a:	46bd      	mov	sp, r7
 800327c:	bc80      	pop	{r7}
 800327e:	4770      	bx	lr

08003280 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003280:	b480      	push	{r7}
 8003282:	b085      	sub	sp, #20
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003290:	2b01      	cmp	r3, #1
 8003292:	d101      	bne.n	8003298 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003294:	2302      	movs	r3, #2
 8003296:	e050      	b.n	800333a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2202      	movs	r2, #2
 80032a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	68fa      	ldr	r2, [r7, #12]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	68fa      	ldr	r2, [r7, #12]
 80032d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a1b      	ldr	r2, [pc, #108]	; (8003344 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d018      	beq.n	800330e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a19      	ldr	r2, [pc, #100]	; (8003348 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d013      	beq.n	800330e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032ee:	d00e      	beq.n	800330e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a15      	ldr	r2, [pc, #84]	; (800334c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d009      	beq.n	800330e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a14      	ldr	r2, [pc, #80]	; (8003350 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d004      	beq.n	800330e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a12      	ldr	r2, [pc, #72]	; (8003354 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d10c      	bne.n	8003328 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003314:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	68ba      	ldr	r2, [r7, #8]
 800331c:	4313      	orrs	r3, r2
 800331e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	68ba      	ldr	r2, [r7, #8]
 8003326:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2201      	movs	r2, #1
 800332c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3714      	adds	r7, #20
 800333e:	46bd      	mov	sp, r7
 8003340:	bc80      	pop	{r7}
 8003342:	4770      	bx	lr
 8003344:	40012c00 	.word	0x40012c00
 8003348:	40013400 	.word	0x40013400
 800334c:	40000400 	.word	0x40000400
 8003350:	40000800 	.word	0x40000800
 8003354:	40000c00 	.word	0x40000c00

08003358 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d101      	bne.n	800336a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e03f      	b.n	80033ea <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003370:	b2db      	uxtb	r3, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d106      	bne.n	8003384 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f7fe f988 	bl	8001694 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2224      	movs	r2, #36	; 0x24
 8003388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	68da      	ldr	r2, [r3, #12]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800339a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f000 fc85 	bl	8003cac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	691a      	ldr	r2, [r3, #16]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	695a      	ldr	r2, [r3, #20]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	68da      	ldr	r2, [r3, #12]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2220      	movs	r2, #32
 80033dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2220      	movs	r2, #32
 80033e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3708      	adds	r7, #8
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}

080033f2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033f2:	b580      	push	{r7, lr}
 80033f4:	b08a      	sub	sp, #40	; 0x28
 80033f6:	af02      	add	r7, sp, #8
 80033f8:	60f8      	str	r0, [r7, #12]
 80033fa:	60b9      	str	r1, [r7, #8]
 80033fc:	603b      	str	r3, [r7, #0]
 80033fe:	4613      	mov	r3, r2
 8003400:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003402:	2300      	movs	r3, #0
 8003404:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800340c:	b2db      	uxtb	r3, r3
 800340e:	2b20      	cmp	r3, #32
 8003410:	d17c      	bne.n	800350c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d002      	beq.n	800341e <HAL_UART_Transmit+0x2c>
 8003418:	88fb      	ldrh	r3, [r7, #6]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d101      	bne.n	8003422 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e075      	b.n	800350e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003428:	2b01      	cmp	r3, #1
 800342a:	d101      	bne.n	8003430 <HAL_UART_Transmit+0x3e>
 800342c:	2302      	movs	r3, #2
 800342e:	e06e      	b.n	800350e <HAL_UART_Transmit+0x11c>
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2200      	movs	r2, #0
 800343c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2221      	movs	r2, #33	; 0x21
 8003442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003446:	f7fe fab3 	bl	80019b0 <HAL_GetTick>
 800344a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	88fa      	ldrh	r2, [r7, #6]
 8003450:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	88fa      	ldrh	r2, [r7, #6]
 8003456:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003460:	d108      	bne.n	8003474 <HAL_UART_Transmit+0x82>
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d104      	bne.n	8003474 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800346a:	2300      	movs	r3, #0
 800346c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	61bb      	str	r3, [r7, #24]
 8003472:	e003      	b.n	800347c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003478:	2300      	movs	r3, #0
 800347a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2200      	movs	r2, #0
 8003480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003484:	e02a      	b.n	80034dc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	9300      	str	r3, [sp, #0]
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	2200      	movs	r2, #0
 800348e:	2180      	movs	r1, #128	; 0x80
 8003490:	68f8      	ldr	r0, [r7, #12]
 8003492:	f000 fa38 	bl	8003906 <UART_WaitOnFlagUntilTimeout>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d001      	beq.n	80034a0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	e036      	b.n	800350e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d10b      	bne.n	80034be <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	881b      	ldrh	r3, [r3, #0]
 80034aa:	461a      	mov	r2, r3
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	3302      	adds	r3, #2
 80034ba:	61bb      	str	r3, [r7, #24]
 80034bc:	e007      	b.n	80034ce <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	781a      	ldrb	r2, [r3, #0]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	3301      	adds	r3, #1
 80034cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	3b01      	subs	r3, #1
 80034d6:	b29a      	uxth	r2, r3
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d1cf      	bne.n	8003486 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	9300      	str	r3, [sp, #0]
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	2200      	movs	r2, #0
 80034ee:	2140      	movs	r1, #64	; 0x40
 80034f0:	68f8      	ldr	r0, [r7, #12]
 80034f2:	f000 fa08 	bl	8003906 <UART_WaitOnFlagUntilTimeout>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d001      	beq.n	8003500 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	e006      	b.n	800350e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2220      	movs	r2, #32
 8003504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003508:	2300      	movs	r3, #0
 800350a:	e000      	b.n	800350e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800350c:	2302      	movs	r3, #2
  }
}
 800350e:	4618      	mov	r0, r3
 8003510:	3720      	adds	r7, #32
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}

08003516 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003516:	b580      	push	{r7, lr}
 8003518:	b084      	sub	sp, #16
 800351a:	af00      	add	r7, sp, #0
 800351c:	60f8      	str	r0, [r7, #12]
 800351e:	60b9      	str	r1, [r7, #8]
 8003520:	4613      	mov	r3, r2
 8003522:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800352a:	b2db      	uxtb	r3, r3
 800352c:	2b20      	cmp	r3, #32
 800352e:	d11d      	bne.n	800356c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d002      	beq.n	800353c <HAL_UART_Receive_IT+0x26>
 8003536:	88fb      	ldrh	r3, [r7, #6]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d101      	bne.n	8003540 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e016      	b.n	800356e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003546:	2b01      	cmp	r3, #1
 8003548:	d101      	bne.n	800354e <HAL_UART_Receive_IT+0x38>
 800354a:	2302      	movs	r3, #2
 800354c:	e00f      	b.n	800356e <HAL_UART_Receive_IT+0x58>
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2201      	movs	r2, #1
 8003552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2200      	movs	r2, #0
 800355a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800355c:	88fb      	ldrh	r3, [r7, #6]
 800355e:	461a      	mov	r2, r3
 8003560:	68b9      	ldr	r1, [r7, #8]
 8003562:	68f8      	ldr	r0, [r7, #12]
 8003564:	f000 fa19 	bl	800399a <UART_Start_Receive_IT>
 8003568:	4603      	mov	r3, r0
 800356a:	e000      	b.n	800356e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800356c:	2302      	movs	r3, #2
  }
}
 800356e:	4618      	mov	r0, r3
 8003570:	3710      	adds	r7, #16
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
	...

08003578 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b08a      	sub	sp, #40	; 0x28
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	695b      	ldr	r3, [r3, #20]
 8003596:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003598:	2300      	movs	r3, #0
 800359a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800359c:	2300      	movs	r3, #0
 800359e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80035a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a2:	f003 030f 	and.w	r3, r3, #15
 80035a6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d10d      	bne.n	80035ca <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80035ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b0:	f003 0320 	and.w	r3, r3, #32
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d008      	beq.n	80035ca <HAL_UART_IRQHandler+0x52>
 80035b8:	6a3b      	ldr	r3, [r7, #32]
 80035ba:	f003 0320 	and.w	r3, r3, #32
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d003      	beq.n	80035ca <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 fac9 	bl	8003b5a <UART_Receive_IT>
      return;
 80035c8:	e17b      	b.n	80038c2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	f000 80b1 	beq.w	8003734 <HAL_UART_IRQHandler+0x1bc>
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	f003 0301 	and.w	r3, r3, #1
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d105      	bne.n	80035e8 <HAL_UART_IRQHandler+0x70>
 80035dc:	6a3b      	ldr	r3, [r7, #32]
 80035de:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	f000 80a6 	beq.w	8003734 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80035e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ea:	f003 0301 	and.w	r3, r3, #1
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d00a      	beq.n	8003608 <HAL_UART_IRQHandler+0x90>
 80035f2:	6a3b      	ldr	r3, [r7, #32]
 80035f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d005      	beq.n	8003608 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003600:	f043 0201 	orr.w	r2, r3, #1
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360a:	f003 0304 	and.w	r3, r3, #4
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00a      	beq.n	8003628 <HAL_UART_IRQHandler+0xb0>
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	f003 0301 	and.w	r3, r3, #1
 8003618:	2b00      	cmp	r3, #0
 800361a:	d005      	beq.n	8003628 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003620:	f043 0202 	orr.w	r2, r3, #2
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362a:	f003 0302 	and.w	r3, r3, #2
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00a      	beq.n	8003648 <HAL_UART_IRQHandler+0xd0>
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	f003 0301 	and.w	r3, r3, #1
 8003638:	2b00      	cmp	r3, #0
 800363a:	d005      	beq.n	8003648 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003640:	f043 0204 	orr.w	r2, r3, #4
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364a:	f003 0308 	and.w	r3, r3, #8
 800364e:	2b00      	cmp	r3, #0
 8003650:	d00f      	beq.n	8003672 <HAL_UART_IRQHandler+0xfa>
 8003652:	6a3b      	ldr	r3, [r7, #32]
 8003654:	f003 0320 	and.w	r3, r3, #32
 8003658:	2b00      	cmp	r3, #0
 800365a:	d104      	bne.n	8003666 <HAL_UART_IRQHandler+0xee>
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	f003 0301 	and.w	r3, r3, #1
 8003662:	2b00      	cmp	r3, #0
 8003664:	d005      	beq.n	8003672 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366a:	f043 0208 	orr.w	r2, r3, #8
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003676:	2b00      	cmp	r3, #0
 8003678:	f000 811e 	beq.w	80038b8 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800367c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367e:	f003 0320 	and.w	r3, r3, #32
 8003682:	2b00      	cmp	r3, #0
 8003684:	d007      	beq.n	8003696 <HAL_UART_IRQHandler+0x11e>
 8003686:	6a3b      	ldr	r3, [r7, #32]
 8003688:	f003 0320 	and.w	r3, r3, #32
 800368c:	2b00      	cmp	r3, #0
 800368e:	d002      	beq.n	8003696 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f000 fa62 	bl	8003b5a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	695b      	ldr	r3, [r3, #20]
 800369c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	bf14      	ite	ne
 80036a4:	2301      	movne	r3, #1
 80036a6:	2300      	moveq	r3, #0
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b0:	f003 0308 	and.w	r3, r3, #8
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d102      	bne.n	80036be <HAL_UART_IRQHandler+0x146>
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d031      	beq.n	8003722 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 f9a4 	bl	8003a0c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	695b      	ldr	r3, [r3, #20]
 80036ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d023      	beq.n	800371a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	695a      	ldr	r2, [r3, #20]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036e0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d013      	beq.n	8003712 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ee:	4a76      	ldr	r2, [pc, #472]	; (80038c8 <HAL_UART_IRQHandler+0x350>)
 80036f0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7fe fad0 	bl	8001c9c <HAL_DMA_Abort_IT>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d016      	beq.n	8003730 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800370c:	4610      	mov	r0, r2
 800370e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003710:	e00e      	b.n	8003730 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f000 f8e3 	bl	80038de <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003718:	e00a      	b.n	8003730 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f000 f8df 	bl	80038de <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003720:	e006      	b.n	8003730 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f000 f8db 	bl	80038de <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800372e:	e0c3      	b.n	80038b8 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003730:	bf00      	nop
    return;
 8003732:	e0c1      	b.n	80038b8 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003738:	2b01      	cmp	r3, #1
 800373a:	f040 80a1 	bne.w	8003880 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800373e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003740:	f003 0310 	and.w	r3, r3, #16
 8003744:	2b00      	cmp	r3, #0
 8003746:	f000 809b 	beq.w	8003880 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800374a:	6a3b      	ldr	r3, [r7, #32]
 800374c:	f003 0310 	and.w	r3, r3, #16
 8003750:	2b00      	cmp	r3, #0
 8003752:	f000 8095 	beq.w	8003880 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003756:	2300      	movs	r3, #0
 8003758:	60fb      	str	r3, [r7, #12]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	60fb      	str	r3, [r7, #12]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	60fb      	str	r3, [r7, #12]
 800376a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	695b      	ldr	r3, [r3, #20]
 8003772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003776:	2b00      	cmp	r3, #0
 8003778:	d04e      	beq.n	8003818 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003784:	8a3b      	ldrh	r3, [r7, #16]
 8003786:	2b00      	cmp	r3, #0
 8003788:	f000 8098 	beq.w	80038bc <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003790:	8a3a      	ldrh	r2, [r7, #16]
 8003792:	429a      	cmp	r2, r3
 8003794:	f080 8092 	bcs.w	80038bc <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	8a3a      	ldrh	r2, [r7, #16]
 800379c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a2:	699b      	ldr	r3, [r3, #24]
 80037a4:	2b20      	cmp	r3, #32
 80037a6:	d02b      	beq.n	8003800 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	68da      	ldr	r2, [r3, #12]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037b6:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	695a      	ldr	r2, [r3, #20]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f022 0201 	bic.w	r2, r2, #1
 80037c6:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	695a      	ldr	r2, [r3, #20]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037d6:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2220      	movs	r2, #32
 80037dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	68da      	ldr	r2, [r3, #12]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f022 0210 	bic.w	r2, r2, #16
 80037f4:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7fe fa13 	bl	8001c26 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003808:	b29b      	uxth	r3, r3
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	b29b      	uxth	r3, r3
 800380e:	4619      	mov	r1, r3
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f000 f86d 	bl	80038f0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003816:	e051      	b.n	80038bc <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003820:	b29b      	uxth	r3, r3
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800382a:	b29b      	uxth	r3, r3
 800382c:	2b00      	cmp	r3, #0
 800382e:	d047      	beq.n	80038c0 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003830:	8a7b      	ldrh	r3, [r7, #18]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d044      	beq.n	80038c0 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	68da      	ldr	r2, [r3, #12]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003844:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	695a      	ldr	r2, [r3, #20]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f022 0201 	bic.w	r2, r2, #1
 8003854:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2220      	movs	r2, #32
 800385a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68da      	ldr	r2, [r3, #12]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f022 0210 	bic.w	r2, r2, #16
 8003872:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003874:	8a7b      	ldrh	r3, [r7, #18]
 8003876:	4619      	mov	r1, r3
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f000 f839 	bl	80038f0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800387e:	e01f      	b.n	80038c0 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003886:	2b00      	cmp	r3, #0
 8003888:	d008      	beq.n	800389c <HAL_UART_IRQHandler+0x324>
 800388a:	6a3b      	ldr	r3, [r7, #32]
 800388c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003890:	2b00      	cmp	r3, #0
 8003892:	d003      	beq.n	800389c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f000 f8f9 	bl	8003a8c <UART_Transmit_IT>
    return;
 800389a:	e012      	b.n	80038c2 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800389c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d00d      	beq.n	80038c2 <HAL_UART_IRQHandler+0x34a>
 80038a6:	6a3b      	ldr	r3, [r7, #32]
 80038a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d008      	beq.n	80038c2 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f000 f93a 	bl	8003b2a <UART_EndTransmit_IT>
    return;
 80038b6:	e004      	b.n	80038c2 <HAL_UART_IRQHandler+0x34a>
    return;
 80038b8:	bf00      	nop
 80038ba:	e002      	b.n	80038c2 <HAL_UART_IRQHandler+0x34a>
      return;
 80038bc:	bf00      	nop
 80038be:	e000      	b.n	80038c2 <HAL_UART_IRQHandler+0x34a>
      return;
 80038c0:	bf00      	nop
  }
}
 80038c2:	3728      	adds	r7, #40	; 0x28
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	08003a65 	.word	0x08003a65

080038cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80038d4:	bf00      	nop
 80038d6:	370c      	adds	r7, #12
 80038d8:	46bd      	mov	sp, r7
 80038da:	bc80      	pop	{r7}
 80038dc:	4770      	bx	lr

080038de <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80038de:	b480      	push	{r7}
 80038e0:	b083      	sub	sp, #12
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80038e6:	bf00      	nop
 80038e8:	370c      	adds	r7, #12
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bc80      	pop	{r7}
 80038ee:	4770      	bx	lr

080038f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	460b      	mov	r3, r1
 80038fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80038fc:	bf00      	nop
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	bc80      	pop	{r7}
 8003904:	4770      	bx	lr

08003906 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003906:	b580      	push	{r7, lr}
 8003908:	b084      	sub	sp, #16
 800390a:	af00      	add	r7, sp, #0
 800390c:	60f8      	str	r0, [r7, #12]
 800390e:	60b9      	str	r1, [r7, #8]
 8003910:	603b      	str	r3, [r7, #0]
 8003912:	4613      	mov	r3, r2
 8003914:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003916:	e02c      	b.n	8003972 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800391e:	d028      	beq.n	8003972 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003920:	69bb      	ldr	r3, [r7, #24]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d007      	beq.n	8003936 <UART_WaitOnFlagUntilTimeout+0x30>
 8003926:	f7fe f843 	bl	80019b0 <HAL_GetTick>
 800392a:	4602      	mov	r2, r0
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	69ba      	ldr	r2, [r7, #24]
 8003932:	429a      	cmp	r2, r3
 8003934:	d21d      	bcs.n	8003972 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	68da      	ldr	r2, [r3, #12]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003944:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	695a      	ldr	r2, [r3, #20]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f022 0201 	bic.w	r2, r2, #1
 8003954:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2220      	movs	r2, #32
 800395a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2220      	movs	r2, #32
 8003962:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2200      	movs	r2, #0
 800396a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e00f      	b.n	8003992 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	4013      	ands	r3, r2
 800397c:	68ba      	ldr	r2, [r7, #8]
 800397e:	429a      	cmp	r2, r3
 8003980:	bf0c      	ite	eq
 8003982:	2301      	moveq	r3, #1
 8003984:	2300      	movne	r3, #0
 8003986:	b2db      	uxtb	r3, r3
 8003988:	461a      	mov	r2, r3
 800398a:	79fb      	ldrb	r3, [r7, #7]
 800398c:	429a      	cmp	r2, r3
 800398e:	d0c3      	beq.n	8003918 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	3710      	adds	r7, #16
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}

0800399a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800399a:	b480      	push	{r7}
 800399c:	b085      	sub	sp, #20
 800399e:	af00      	add	r7, sp, #0
 80039a0:	60f8      	str	r0, [r7, #12]
 80039a2:	60b9      	str	r1, [r7, #8]
 80039a4:	4613      	mov	r3, r2
 80039a6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	68ba      	ldr	r2, [r7, #8]
 80039ac:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	88fa      	ldrh	r2, [r7, #6]
 80039b2:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	88fa      	ldrh	r2, [r7, #6]
 80039b8:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2200      	movs	r2, #0
 80039be:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2222      	movs	r2, #34	; 0x22
 80039c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2200      	movs	r2, #0
 80039cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	68da      	ldr	r2, [r3, #12]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039de:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	695a      	ldr	r2, [r3, #20]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f042 0201 	orr.w	r2, r2, #1
 80039ee:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	68da      	ldr	r2, [r3, #12]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f042 0220 	orr.w	r2, r2, #32
 80039fe:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3714      	adds	r7, #20
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bc80      	pop	{r7}
 8003a0a:	4770      	bx	lr

08003a0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	68da      	ldr	r2, [r3, #12]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003a22:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	695a      	ldr	r2, [r3, #20]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f022 0201 	bic.w	r2, r2, #1
 8003a32:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d107      	bne.n	8003a4c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	68da      	ldr	r2, [r3, #12]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f022 0210 	bic.w	r2, r2, #16
 8003a4a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2220      	movs	r2, #32
 8003a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003a5a:	bf00      	nop
 8003a5c:	370c      	adds	r7, #12
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bc80      	pop	{r7}
 8003a62:	4770      	bx	lr

08003a64 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a70:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2200      	movs	r2, #0
 8003a76:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003a7e:	68f8      	ldr	r0, [r7, #12]
 8003a80:	f7ff ff2d 	bl	80038de <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a84:	bf00      	nop
 8003a86:	3710      	adds	r7, #16
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b085      	sub	sp, #20
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	2b21      	cmp	r3, #33	; 0x21
 8003a9e:	d13e      	bne.n	8003b1e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aa8:	d114      	bne.n	8003ad4 <UART_Transmit_IT+0x48>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	691b      	ldr	r3, [r3, #16]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d110      	bne.n	8003ad4 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a1b      	ldr	r3, [r3, #32]
 8003ab6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	881b      	ldrh	r3, [r3, #0]
 8003abc:	461a      	mov	r2, r3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ac6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a1b      	ldr	r3, [r3, #32]
 8003acc:	1c9a      	adds	r2, r3, #2
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	621a      	str	r2, [r3, #32]
 8003ad2:	e008      	b.n	8003ae6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6a1b      	ldr	r3, [r3, #32]
 8003ad8:	1c59      	adds	r1, r3, #1
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	6211      	str	r1, [r2, #32]
 8003ade:	781a      	ldrb	r2, [r3, #0]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	3b01      	subs	r3, #1
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	4619      	mov	r1, r3
 8003af4:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d10f      	bne.n	8003b1a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	68da      	ldr	r2, [r3, #12]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b08:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	68da      	ldr	r2, [r3, #12]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b18:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	e000      	b.n	8003b20 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003b1e:	2302      	movs	r3, #2
  }
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3714      	adds	r7, #20
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bc80      	pop	{r7}
 8003b28:	4770      	bx	lr

08003b2a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003b2a:	b580      	push	{r7, lr}
 8003b2c:	b082      	sub	sp, #8
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	68da      	ldr	r2, [r3, #12]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b40:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2220      	movs	r2, #32
 8003b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f7ff febe 	bl	80038cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3708      	adds	r7, #8
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}

08003b5a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003b5a:	b580      	push	{r7, lr}
 8003b5c:	b086      	sub	sp, #24
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	2b22      	cmp	r3, #34	; 0x22
 8003b6c:	f040 8099 	bne.w	8003ca2 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b78:	d117      	bne.n	8003baa <UART_Receive_IT+0x50>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d113      	bne.n	8003baa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003b82:	2300      	movs	r3, #0
 8003b84:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b8a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b98:	b29a      	uxth	r2, r3
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba2:	1c9a      	adds	r2, r3, #2
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	629a      	str	r2, [r3, #40]	; 0x28
 8003ba8:	e026      	b.n	8003bf8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bae:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bbc:	d007      	beq.n	8003bce <UART_Receive_IT+0x74>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d10a      	bne.n	8003bdc <UART_Receive_IT+0x82>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d106      	bne.n	8003bdc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	b2da      	uxtb	r2, r3
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	701a      	strb	r2, [r3, #0]
 8003bda:	e008      	b.n	8003bee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003be8:	b2da      	uxtb	r2, r3
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf2:	1c5a      	adds	r2, r3, #1
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	3b01      	subs	r3, #1
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	4619      	mov	r1, r3
 8003c06:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d148      	bne.n	8003c9e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	68da      	ldr	r2, [r3, #12]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f022 0220 	bic.w	r2, r2, #32
 8003c1a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	68da      	ldr	r2, [r3, #12]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c2a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	695a      	ldr	r2, [r3, #20]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f022 0201 	bic.w	r2, r2, #1
 8003c3a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2220      	movs	r2, #32
 8003c40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d123      	bne.n	8003c94 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	68da      	ldr	r2, [r3, #12]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f022 0210 	bic.w	r2, r2, #16
 8003c60:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0310 	and.w	r3, r3, #16
 8003c6c:	2b10      	cmp	r3, #16
 8003c6e:	d10a      	bne.n	8003c86 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c70:	2300      	movs	r3, #0
 8003c72:	60fb      	str	r3, [r7, #12]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	60fb      	str	r3, [r7, #12]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	60fb      	str	r3, [r7, #12]
 8003c84:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f7ff fe2f 	bl	80038f0 <HAL_UARTEx_RxEventCallback>
 8003c92:	e002      	b.n	8003c9a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f7fd f959 	bl	8000f4c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	e002      	b.n	8003ca4 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	e000      	b.n	8003ca4 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003ca2:	2302      	movs	r3, #2
  }
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3718      	adds	r7, #24
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}

08003cac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b084      	sub	sp, #16
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	691b      	ldr	r3, [r3, #16]
 8003cba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	68da      	ldr	r2, [r3, #12]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	430a      	orrs	r2, r1
 8003cc8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	689a      	ldr	r2, [r3, #8]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	431a      	orrs	r2, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	695b      	ldr	r3, [r3, #20]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003ce6:	f023 030c 	bic.w	r3, r3, #12
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	6812      	ldr	r2, [r2, #0]
 8003cee:	68b9      	ldr	r1, [r7, #8]
 8003cf0:	430b      	orrs	r3, r1
 8003cf2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	695b      	ldr	r3, [r3, #20]
 8003cfa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	699a      	ldr	r2, [r3, #24]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	430a      	orrs	r2, r1
 8003d08:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a2c      	ldr	r2, [pc, #176]	; (8003dc0 <UART_SetConfig+0x114>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d103      	bne.n	8003d1c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003d14:	f7fe ffba 	bl	8002c8c <HAL_RCC_GetPCLK2Freq>
 8003d18:	60f8      	str	r0, [r7, #12]
 8003d1a:	e002      	b.n	8003d22 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003d1c:	f7fe ffa2 	bl	8002c64 <HAL_RCC_GetPCLK1Freq>
 8003d20:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d22:	68fa      	ldr	r2, [r7, #12]
 8003d24:	4613      	mov	r3, r2
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	4413      	add	r3, r2
 8003d2a:	009a      	lsls	r2, r3, #2
 8003d2c:	441a      	add	r2, r3
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d38:	4a22      	ldr	r2, [pc, #136]	; (8003dc4 <UART_SetConfig+0x118>)
 8003d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d3e:	095b      	lsrs	r3, r3, #5
 8003d40:	0119      	lsls	r1, r3, #4
 8003d42:	68fa      	ldr	r2, [r7, #12]
 8003d44:	4613      	mov	r3, r2
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	4413      	add	r3, r2
 8003d4a:	009a      	lsls	r2, r3, #2
 8003d4c:	441a      	add	r2, r3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d58:	4b1a      	ldr	r3, [pc, #104]	; (8003dc4 <UART_SetConfig+0x118>)
 8003d5a:	fba3 0302 	umull	r0, r3, r3, r2
 8003d5e:	095b      	lsrs	r3, r3, #5
 8003d60:	2064      	movs	r0, #100	; 0x64
 8003d62:	fb00 f303 	mul.w	r3, r0, r3
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	011b      	lsls	r3, r3, #4
 8003d6a:	3332      	adds	r3, #50	; 0x32
 8003d6c:	4a15      	ldr	r2, [pc, #84]	; (8003dc4 <UART_SetConfig+0x118>)
 8003d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d72:	095b      	lsrs	r3, r3, #5
 8003d74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d78:	4419      	add	r1, r3
 8003d7a:	68fa      	ldr	r2, [r7, #12]
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	4413      	add	r3, r2
 8003d82:	009a      	lsls	r2, r3, #2
 8003d84:	441a      	add	r2, r3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d90:	4b0c      	ldr	r3, [pc, #48]	; (8003dc4 <UART_SetConfig+0x118>)
 8003d92:	fba3 0302 	umull	r0, r3, r3, r2
 8003d96:	095b      	lsrs	r3, r3, #5
 8003d98:	2064      	movs	r0, #100	; 0x64
 8003d9a:	fb00 f303 	mul.w	r3, r0, r3
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	011b      	lsls	r3, r3, #4
 8003da2:	3332      	adds	r3, #50	; 0x32
 8003da4:	4a07      	ldr	r2, [pc, #28]	; (8003dc4 <UART_SetConfig+0x118>)
 8003da6:	fba2 2303 	umull	r2, r3, r2, r3
 8003daa:	095b      	lsrs	r3, r3, #5
 8003dac:	f003 020f 	and.w	r2, r3, #15
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	440a      	add	r2, r1
 8003db6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003db8:	bf00      	nop
 8003dba:	3710      	adds	r7, #16
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	40013800 	.word	0x40013800
 8003dc4:	51eb851f 	.word	0x51eb851f

08003dc8 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b087      	sub	sp, #28
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ddc:	683a      	ldr	r2, [r7, #0]
 8003dde:	6812      	ldr	r2, [r2, #0]
 8003de0:	f023 0101 	bic.w	r1, r3, #1
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	2b08      	cmp	r3, #8
 8003df0:	d102      	bne.n	8003df8 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8003df2:	2340      	movs	r3, #64	; 0x40
 8003df4:	617b      	str	r3, [r7, #20]
 8003df6:	e001      	b.n	8003dfc <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8003e08:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8003e0e:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8003e14:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8003e1a:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8003e20:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8003e26:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8003e2c:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 8003e32:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8003e38:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	699b      	ldr	r3, [r3, #24]
 8003e46:	693a      	ldr	r2, [r7, #16]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e50:	693a      	ldr	r2, [r7, #16]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 8003e56:	4b10      	ldr	r3, [pc, #64]	; (8003e98 <FSMC_NORSRAM_Init+0xd0>)
 8003e58:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e60:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8003e68:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	43db      	mvns	r3, r3
 8003e78:	ea02 0103 	and.w	r1, r2, r3
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	4319      	orrs	r1, r3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 8003e8a:	2300      	movs	r3, #0
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	371c      	adds	r7, #28
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bc80      	pop	{r7}
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop
 8003e98:	0008fb7f 	.word	0x0008fb7f

08003e9c <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b085      	sub	sp, #20
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	1c5a      	adds	r2, r3, #1
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003eb2:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	011b      	lsls	r3, r3, #4
 8003ec0:	431a      	orrs	r2, r3
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	021b      	lsls	r3, r3, #8
 8003ec8:	431a      	orrs	r2, r3
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	041b      	lsls	r3, r3, #16
 8003ed0:	431a      	orrs	r2, r3
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	3b01      	subs	r3, #1
 8003ed8:	051b      	lsls	r3, r3, #20
 8003eda:	431a      	orrs	r2, r3
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	695b      	ldr	r3, [r3, #20]
 8003ee0:	3b02      	subs	r3, #2
 8003ee2:	061b      	lsls	r3, r3, #24
 8003ee4:	431a      	orrs	r2, r3
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	699b      	ldr	r3, [r3, #24]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	687a      	ldr	r2, [r7, #4]
 8003eee:	3201      	adds	r2, #1
 8003ef0:	4319      	orrs	r1, r3
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
 8003ef8:	2300      	movs	r3, #0
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3714      	adds	r7, #20
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bc80      	pop	{r7}
 8003f02:	4770      	bx	lr

08003f04 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b085      	sub	sp, #20
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	60f8      	str	r0, [r7, #12]
 8003f0c:	60b9      	str	r1, [r7, #8]
 8003f0e:	607a      	str	r2, [r7, #4]
 8003f10:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f18:	d11d      	bne.n	8003f56 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003f22:	4b13      	ldr	r3, [pc, #76]	; (8003f70 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8003f24:	4013      	ands	r3, r2
 8003f26:	68ba      	ldr	r2, [r7, #8]
 8003f28:	6811      	ldr	r1, [r2, #0]
 8003f2a:	68ba      	ldr	r2, [r7, #8]
 8003f2c:	6852      	ldr	r2, [r2, #4]
 8003f2e:	0112      	lsls	r2, r2, #4
 8003f30:	4311      	orrs	r1, r2
 8003f32:	68ba      	ldr	r2, [r7, #8]
 8003f34:	6892      	ldr	r2, [r2, #8]
 8003f36:	0212      	lsls	r2, r2, #8
 8003f38:	4311      	orrs	r1, r2
 8003f3a:	68ba      	ldr	r2, [r7, #8]
 8003f3c:	6992      	ldr	r2, [r2, #24]
 8003f3e:	4311      	orrs	r1, r2
 8003f40:	68ba      	ldr	r2, [r7, #8]
 8003f42:	68d2      	ldr	r2, [r2, #12]
 8003f44:	0412      	lsls	r2, r2, #16
 8003f46:	430a      	orrs	r2, r1
 8003f48:	ea43 0102 	orr.w	r1, r3, r2
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003f54:	e005      	b.n	8003f62 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8003f5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8003f62:	2300      	movs	r3, #0
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3714      	adds	r7, #20
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bc80      	pop	{r7}
 8003f6c:	4770      	bx	lr
 8003f6e:	bf00      	nop
 8003f70:	cff00000 	.word	0xcff00000

08003f74 <__errno>:
 8003f74:	4b01      	ldr	r3, [pc, #4]	; (8003f7c <__errno+0x8>)
 8003f76:	6818      	ldr	r0, [r3, #0]
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop
 8003f7c:	2000000c 	.word	0x2000000c

08003f80 <__libc_init_array>:
 8003f80:	b570      	push	{r4, r5, r6, lr}
 8003f82:	2600      	movs	r6, #0
 8003f84:	4d0c      	ldr	r5, [pc, #48]	; (8003fb8 <__libc_init_array+0x38>)
 8003f86:	4c0d      	ldr	r4, [pc, #52]	; (8003fbc <__libc_init_array+0x3c>)
 8003f88:	1b64      	subs	r4, r4, r5
 8003f8a:	10a4      	asrs	r4, r4, #2
 8003f8c:	42a6      	cmp	r6, r4
 8003f8e:	d109      	bne.n	8003fa4 <__libc_init_array+0x24>
 8003f90:	f000 fc9c 	bl	80048cc <_init>
 8003f94:	2600      	movs	r6, #0
 8003f96:	4d0a      	ldr	r5, [pc, #40]	; (8003fc0 <__libc_init_array+0x40>)
 8003f98:	4c0a      	ldr	r4, [pc, #40]	; (8003fc4 <__libc_init_array+0x44>)
 8003f9a:	1b64      	subs	r4, r4, r5
 8003f9c:	10a4      	asrs	r4, r4, #2
 8003f9e:	42a6      	cmp	r6, r4
 8003fa0:	d105      	bne.n	8003fae <__libc_init_array+0x2e>
 8003fa2:	bd70      	pop	{r4, r5, r6, pc}
 8003fa4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fa8:	4798      	blx	r3
 8003faa:	3601      	adds	r6, #1
 8003fac:	e7ee      	b.n	8003f8c <__libc_init_array+0xc>
 8003fae:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fb2:	4798      	blx	r3
 8003fb4:	3601      	adds	r6, #1
 8003fb6:	e7f2      	b.n	8003f9e <__libc_init_array+0x1e>
 8003fb8:	08004f4c 	.word	0x08004f4c
 8003fbc:	08004f4c 	.word	0x08004f4c
 8003fc0:	08004f4c 	.word	0x08004f4c
 8003fc4:	08004f50 	.word	0x08004f50

08003fc8 <memset>:
 8003fc8:	4603      	mov	r3, r0
 8003fca:	4402      	add	r2, r0
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d100      	bne.n	8003fd2 <memset+0xa>
 8003fd0:	4770      	bx	lr
 8003fd2:	f803 1b01 	strb.w	r1, [r3], #1
 8003fd6:	e7f9      	b.n	8003fcc <memset+0x4>

08003fd8 <siprintf>:
 8003fd8:	b40e      	push	{r1, r2, r3}
 8003fda:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003fde:	b500      	push	{lr}
 8003fe0:	b09c      	sub	sp, #112	; 0x70
 8003fe2:	ab1d      	add	r3, sp, #116	; 0x74
 8003fe4:	9002      	str	r0, [sp, #8]
 8003fe6:	9006      	str	r0, [sp, #24]
 8003fe8:	9107      	str	r1, [sp, #28]
 8003fea:	9104      	str	r1, [sp, #16]
 8003fec:	4808      	ldr	r0, [pc, #32]	; (8004010 <siprintf+0x38>)
 8003fee:	4909      	ldr	r1, [pc, #36]	; (8004014 <siprintf+0x3c>)
 8003ff0:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ff4:	9105      	str	r1, [sp, #20]
 8003ff6:	6800      	ldr	r0, [r0, #0]
 8003ff8:	a902      	add	r1, sp, #8
 8003ffa:	9301      	str	r3, [sp, #4]
 8003ffc:	f000 f868 	bl	80040d0 <_svfiprintf_r>
 8004000:	2200      	movs	r2, #0
 8004002:	9b02      	ldr	r3, [sp, #8]
 8004004:	701a      	strb	r2, [r3, #0]
 8004006:	b01c      	add	sp, #112	; 0x70
 8004008:	f85d eb04 	ldr.w	lr, [sp], #4
 800400c:	b003      	add	sp, #12
 800400e:	4770      	bx	lr
 8004010:	2000000c 	.word	0x2000000c
 8004014:	ffff0208 	.word	0xffff0208

08004018 <__ssputs_r>:
 8004018:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800401c:	688e      	ldr	r6, [r1, #8]
 800401e:	4682      	mov	sl, r0
 8004020:	429e      	cmp	r6, r3
 8004022:	460c      	mov	r4, r1
 8004024:	4690      	mov	r8, r2
 8004026:	461f      	mov	r7, r3
 8004028:	d838      	bhi.n	800409c <__ssputs_r+0x84>
 800402a:	898a      	ldrh	r2, [r1, #12]
 800402c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004030:	d032      	beq.n	8004098 <__ssputs_r+0x80>
 8004032:	6825      	ldr	r5, [r4, #0]
 8004034:	6909      	ldr	r1, [r1, #16]
 8004036:	3301      	adds	r3, #1
 8004038:	eba5 0901 	sub.w	r9, r5, r1
 800403c:	6965      	ldr	r5, [r4, #20]
 800403e:	444b      	add	r3, r9
 8004040:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004044:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004048:	106d      	asrs	r5, r5, #1
 800404a:	429d      	cmp	r5, r3
 800404c:	bf38      	it	cc
 800404e:	461d      	movcc	r5, r3
 8004050:	0553      	lsls	r3, r2, #21
 8004052:	d531      	bpl.n	80040b8 <__ssputs_r+0xa0>
 8004054:	4629      	mov	r1, r5
 8004056:	f000 fb6f 	bl	8004738 <_malloc_r>
 800405a:	4606      	mov	r6, r0
 800405c:	b950      	cbnz	r0, 8004074 <__ssputs_r+0x5c>
 800405e:	230c      	movs	r3, #12
 8004060:	f04f 30ff 	mov.w	r0, #4294967295
 8004064:	f8ca 3000 	str.w	r3, [sl]
 8004068:	89a3      	ldrh	r3, [r4, #12]
 800406a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800406e:	81a3      	strh	r3, [r4, #12]
 8004070:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004074:	464a      	mov	r2, r9
 8004076:	6921      	ldr	r1, [r4, #16]
 8004078:	f000 face 	bl	8004618 <memcpy>
 800407c:	89a3      	ldrh	r3, [r4, #12]
 800407e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004082:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004086:	81a3      	strh	r3, [r4, #12]
 8004088:	6126      	str	r6, [r4, #16]
 800408a:	444e      	add	r6, r9
 800408c:	6026      	str	r6, [r4, #0]
 800408e:	463e      	mov	r6, r7
 8004090:	6165      	str	r5, [r4, #20]
 8004092:	eba5 0509 	sub.w	r5, r5, r9
 8004096:	60a5      	str	r5, [r4, #8]
 8004098:	42be      	cmp	r6, r7
 800409a:	d900      	bls.n	800409e <__ssputs_r+0x86>
 800409c:	463e      	mov	r6, r7
 800409e:	4632      	mov	r2, r6
 80040a0:	4641      	mov	r1, r8
 80040a2:	6820      	ldr	r0, [r4, #0]
 80040a4:	f000 fac6 	bl	8004634 <memmove>
 80040a8:	68a3      	ldr	r3, [r4, #8]
 80040aa:	2000      	movs	r0, #0
 80040ac:	1b9b      	subs	r3, r3, r6
 80040ae:	60a3      	str	r3, [r4, #8]
 80040b0:	6823      	ldr	r3, [r4, #0]
 80040b2:	4433      	add	r3, r6
 80040b4:	6023      	str	r3, [r4, #0]
 80040b6:	e7db      	b.n	8004070 <__ssputs_r+0x58>
 80040b8:	462a      	mov	r2, r5
 80040ba:	f000 fbb1 	bl	8004820 <_realloc_r>
 80040be:	4606      	mov	r6, r0
 80040c0:	2800      	cmp	r0, #0
 80040c2:	d1e1      	bne.n	8004088 <__ssputs_r+0x70>
 80040c4:	4650      	mov	r0, sl
 80040c6:	6921      	ldr	r1, [r4, #16]
 80040c8:	f000 face 	bl	8004668 <_free_r>
 80040cc:	e7c7      	b.n	800405e <__ssputs_r+0x46>
	...

080040d0 <_svfiprintf_r>:
 80040d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040d4:	4698      	mov	r8, r3
 80040d6:	898b      	ldrh	r3, [r1, #12]
 80040d8:	4607      	mov	r7, r0
 80040da:	061b      	lsls	r3, r3, #24
 80040dc:	460d      	mov	r5, r1
 80040de:	4614      	mov	r4, r2
 80040e0:	b09d      	sub	sp, #116	; 0x74
 80040e2:	d50e      	bpl.n	8004102 <_svfiprintf_r+0x32>
 80040e4:	690b      	ldr	r3, [r1, #16]
 80040e6:	b963      	cbnz	r3, 8004102 <_svfiprintf_r+0x32>
 80040e8:	2140      	movs	r1, #64	; 0x40
 80040ea:	f000 fb25 	bl	8004738 <_malloc_r>
 80040ee:	6028      	str	r0, [r5, #0]
 80040f0:	6128      	str	r0, [r5, #16]
 80040f2:	b920      	cbnz	r0, 80040fe <_svfiprintf_r+0x2e>
 80040f4:	230c      	movs	r3, #12
 80040f6:	603b      	str	r3, [r7, #0]
 80040f8:	f04f 30ff 	mov.w	r0, #4294967295
 80040fc:	e0d1      	b.n	80042a2 <_svfiprintf_r+0x1d2>
 80040fe:	2340      	movs	r3, #64	; 0x40
 8004100:	616b      	str	r3, [r5, #20]
 8004102:	2300      	movs	r3, #0
 8004104:	9309      	str	r3, [sp, #36]	; 0x24
 8004106:	2320      	movs	r3, #32
 8004108:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800410c:	2330      	movs	r3, #48	; 0x30
 800410e:	f04f 0901 	mov.w	r9, #1
 8004112:	f8cd 800c 	str.w	r8, [sp, #12]
 8004116:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80042bc <_svfiprintf_r+0x1ec>
 800411a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800411e:	4623      	mov	r3, r4
 8004120:	469a      	mov	sl, r3
 8004122:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004126:	b10a      	cbz	r2, 800412c <_svfiprintf_r+0x5c>
 8004128:	2a25      	cmp	r2, #37	; 0x25
 800412a:	d1f9      	bne.n	8004120 <_svfiprintf_r+0x50>
 800412c:	ebba 0b04 	subs.w	fp, sl, r4
 8004130:	d00b      	beq.n	800414a <_svfiprintf_r+0x7a>
 8004132:	465b      	mov	r3, fp
 8004134:	4622      	mov	r2, r4
 8004136:	4629      	mov	r1, r5
 8004138:	4638      	mov	r0, r7
 800413a:	f7ff ff6d 	bl	8004018 <__ssputs_r>
 800413e:	3001      	adds	r0, #1
 8004140:	f000 80aa 	beq.w	8004298 <_svfiprintf_r+0x1c8>
 8004144:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004146:	445a      	add	r2, fp
 8004148:	9209      	str	r2, [sp, #36]	; 0x24
 800414a:	f89a 3000 	ldrb.w	r3, [sl]
 800414e:	2b00      	cmp	r3, #0
 8004150:	f000 80a2 	beq.w	8004298 <_svfiprintf_r+0x1c8>
 8004154:	2300      	movs	r3, #0
 8004156:	f04f 32ff 	mov.w	r2, #4294967295
 800415a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800415e:	f10a 0a01 	add.w	sl, sl, #1
 8004162:	9304      	str	r3, [sp, #16]
 8004164:	9307      	str	r3, [sp, #28]
 8004166:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800416a:	931a      	str	r3, [sp, #104]	; 0x68
 800416c:	4654      	mov	r4, sl
 800416e:	2205      	movs	r2, #5
 8004170:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004174:	4851      	ldr	r0, [pc, #324]	; (80042bc <_svfiprintf_r+0x1ec>)
 8004176:	f000 fa41 	bl	80045fc <memchr>
 800417a:	9a04      	ldr	r2, [sp, #16]
 800417c:	b9d8      	cbnz	r0, 80041b6 <_svfiprintf_r+0xe6>
 800417e:	06d0      	lsls	r0, r2, #27
 8004180:	bf44      	itt	mi
 8004182:	2320      	movmi	r3, #32
 8004184:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004188:	0711      	lsls	r1, r2, #28
 800418a:	bf44      	itt	mi
 800418c:	232b      	movmi	r3, #43	; 0x2b
 800418e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004192:	f89a 3000 	ldrb.w	r3, [sl]
 8004196:	2b2a      	cmp	r3, #42	; 0x2a
 8004198:	d015      	beq.n	80041c6 <_svfiprintf_r+0xf6>
 800419a:	4654      	mov	r4, sl
 800419c:	2000      	movs	r0, #0
 800419e:	f04f 0c0a 	mov.w	ip, #10
 80041a2:	9a07      	ldr	r2, [sp, #28]
 80041a4:	4621      	mov	r1, r4
 80041a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80041aa:	3b30      	subs	r3, #48	; 0x30
 80041ac:	2b09      	cmp	r3, #9
 80041ae:	d94e      	bls.n	800424e <_svfiprintf_r+0x17e>
 80041b0:	b1b0      	cbz	r0, 80041e0 <_svfiprintf_r+0x110>
 80041b2:	9207      	str	r2, [sp, #28]
 80041b4:	e014      	b.n	80041e0 <_svfiprintf_r+0x110>
 80041b6:	eba0 0308 	sub.w	r3, r0, r8
 80041ba:	fa09 f303 	lsl.w	r3, r9, r3
 80041be:	4313      	orrs	r3, r2
 80041c0:	46a2      	mov	sl, r4
 80041c2:	9304      	str	r3, [sp, #16]
 80041c4:	e7d2      	b.n	800416c <_svfiprintf_r+0x9c>
 80041c6:	9b03      	ldr	r3, [sp, #12]
 80041c8:	1d19      	adds	r1, r3, #4
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	9103      	str	r1, [sp, #12]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	bfbb      	ittet	lt
 80041d2:	425b      	neglt	r3, r3
 80041d4:	f042 0202 	orrlt.w	r2, r2, #2
 80041d8:	9307      	strge	r3, [sp, #28]
 80041da:	9307      	strlt	r3, [sp, #28]
 80041dc:	bfb8      	it	lt
 80041de:	9204      	strlt	r2, [sp, #16]
 80041e0:	7823      	ldrb	r3, [r4, #0]
 80041e2:	2b2e      	cmp	r3, #46	; 0x2e
 80041e4:	d10c      	bne.n	8004200 <_svfiprintf_r+0x130>
 80041e6:	7863      	ldrb	r3, [r4, #1]
 80041e8:	2b2a      	cmp	r3, #42	; 0x2a
 80041ea:	d135      	bne.n	8004258 <_svfiprintf_r+0x188>
 80041ec:	9b03      	ldr	r3, [sp, #12]
 80041ee:	3402      	adds	r4, #2
 80041f0:	1d1a      	adds	r2, r3, #4
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	9203      	str	r2, [sp, #12]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	bfb8      	it	lt
 80041fa:	f04f 33ff 	movlt.w	r3, #4294967295
 80041fe:	9305      	str	r3, [sp, #20]
 8004200:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80042c0 <_svfiprintf_r+0x1f0>
 8004204:	2203      	movs	r2, #3
 8004206:	4650      	mov	r0, sl
 8004208:	7821      	ldrb	r1, [r4, #0]
 800420a:	f000 f9f7 	bl	80045fc <memchr>
 800420e:	b140      	cbz	r0, 8004222 <_svfiprintf_r+0x152>
 8004210:	2340      	movs	r3, #64	; 0x40
 8004212:	eba0 000a 	sub.w	r0, r0, sl
 8004216:	fa03 f000 	lsl.w	r0, r3, r0
 800421a:	9b04      	ldr	r3, [sp, #16]
 800421c:	3401      	adds	r4, #1
 800421e:	4303      	orrs	r3, r0
 8004220:	9304      	str	r3, [sp, #16]
 8004222:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004226:	2206      	movs	r2, #6
 8004228:	4826      	ldr	r0, [pc, #152]	; (80042c4 <_svfiprintf_r+0x1f4>)
 800422a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800422e:	f000 f9e5 	bl	80045fc <memchr>
 8004232:	2800      	cmp	r0, #0
 8004234:	d038      	beq.n	80042a8 <_svfiprintf_r+0x1d8>
 8004236:	4b24      	ldr	r3, [pc, #144]	; (80042c8 <_svfiprintf_r+0x1f8>)
 8004238:	bb1b      	cbnz	r3, 8004282 <_svfiprintf_r+0x1b2>
 800423a:	9b03      	ldr	r3, [sp, #12]
 800423c:	3307      	adds	r3, #7
 800423e:	f023 0307 	bic.w	r3, r3, #7
 8004242:	3308      	adds	r3, #8
 8004244:	9303      	str	r3, [sp, #12]
 8004246:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004248:	4433      	add	r3, r6
 800424a:	9309      	str	r3, [sp, #36]	; 0x24
 800424c:	e767      	b.n	800411e <_svfiprintf_r+0x4e>
 800424e:	460c      	mov	r4, r1
 8004250:	2001      	movs	r0, #1
 8004252:	fb0c 3202 	mla	r2, ip, r2, r3
 8004256:	e7a5      	b.n	80041a4 <_svfiprintf_r+0xd4>
 8004258:	2300      	movs	r3, #0
 800425a:	f04f 0c0a 	mov.w	ip, #10
 800425e:	4619      	mov	r1, r3
 8004260:	3401      	adds	r4, #1
 8004262:	9305      	str	r3, [sp, #20]
 8004264:	4620      	mov	r0, r4
 8004266:	f810 2b01 	ldrb.w	r2, [r0], #1
 800426a:	3a30      	subs	r2, #48	; 0x30
 800426c:	2a09      	cmp	r2, #9
 800426e:	d903      	bls.n	8004278 <_svfiprintf_r+0x1a8>
 8004270:	2b00      	cmp	r3, #0
 8004272:	d0c5      	beq.n	8004200 <_svfiprintf_r+0x130>
 8004274:	9105      	str	r1, [sp, #20]
 8004276:	e7c3      	b.n	8004200 <_svfiprintf_r+0x130>
 8004278:	4604      	mov	r4, r0
 800427a:	2301      	movs	r3, #1
 800427c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004280:	e7f0      	b.n	8004264 <_svfiprintf_r+0x194>
 8004282:	ab03      	add	r3, sp, #12
 8004284:	9300      	str	r3, [sp, #0]
 8004286:	462a      	mov	r2, r5
 8004288:	4638      	mov	r0, r7
 800428a:	4b10      	ldr	r3, [pc, #64]	; (80042cc <_svfiprintf_r+0x1fc>)
 800428c:	a904      	add	r1, sp, #16
 800428e:	f3af 8000 	nop.w
 8004292:	1c42      	adds	r2, r0, #1
 8004294:	4606      	mov	r6, r0
 8004296:	d1d6      	bne.n	8004246 <_svfiprintf_r+0x176>
 8004298:	89ab      	ldrh	r3, [r5, #12]
 800429a:	065b      	lsls	r3, r3, #25
 800429c:	f53f af2c 	bmi.w	80040f8 <_svfiprintf_r+0x28>
 80042a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80042a2:	b01d      	add	sp, #116	; 0x74
 80042a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042a8:	ab03      	add	r3, sp, #12
 80042aa:	9300      	str	r3, [sp, #0]
 80042ac:	462a      	mov	r2, r5
 80042ae:	4638      	mov	r0, r7
 80042b0:	4b06      	ldr	r3, [pc, #24]	; (80042cc <_svfiprintf_r+0x1fc>)
 80042b2:	a904      	add	r1, sp, #16
 80042b4:	f000 f87c 	bl	80043b0 <_printf_i>
 80042b8:	e7eb      	b.n	8004292 <_svfiprintf_r+0x1c2>
 80042ba:	bf00      	nop
 80042bc:	08004f18 	.word	0x08004f18
 80042c0:	08004f1e 	.word	0x08004f1e
 80042c4:	08004f22 	.word	0x08004f22
 80042c8:	00000000 	.word	0x00000000
 80042cc:	08004019 	.word	0x08004019

080042d0 <_printf_common>:
 80042d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042d4:	4616      	mov	r6, r2
 80042d6:	4699      	mov	r9, r3
 80042d8:	688a      	ldr	r2, [r1, #8]
 80042da:	690b      	ldr	r3, [r1, #16]
 80042dc:	4607      	mov	r7, r0
 80042de:	4293      	cmp	r3, r2
 80042e0:	bfb8      	it	lt
 80042e2:	4613      	movlt	r3, r2
 80042e4:	6033      	str	r3, [r6, #0]
 80042e6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80042ea:	460c      	mov	r4, r1
 80042ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80042f0:	b10a      	cbz	r2, 80042f6 <_printf_common+0x26>
 80042f2:	3301      	adds	r3, #1
 80042f4:	6033      	str	r3, [r6, #0]
 80042f6:	6823      	ldr	r3, [r4, #0]
 80042f8:	0699      	lsls	r1, r3, #26
 80042fa:	bf42      	ittt	mi
 80042fc:	6833      	ldrmi	r3, [r6, #0]
 80042fe:	3302      	addmi	r3, #2
 8004300:	6033      	strmi	r3, [r6, #0]
 8004302:	6825      	ldr	r5, [r4, #0]
 8004304:	f015 0506 	ands.w	r5, r5, #6
 8004308:	d106      	bne.n	8004318 <_printf_common+0x48>
 800430a:	f104 0a19 	add.w	sl, r4, #25
 800430e:	68e3      	ldr	r3, [r4, #12]
 8004310:	6832      	ldr	r2, [r6, #0]
 8004312:	1a9b      	subs	r3, r3, r2
 8004314:	42ab      	cmp	r3, r5
 8004316:	dc28      	bgt.n	800436a <_printf_common+0x9a>
 8004318:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800431c:	1e13      	subs	r3, r2, #0
 800431e:	6822      	ldr	r2, [r4, #0]
 8004320:	bf18      	it	ne
 8004322:	2301      	movne	r3, #1
 8004324:	0692      	lsls	r2, r2, #26
 8004326:	d42d      	bmi.n	8004384 <_printf_common+0xb4>
 8004328:	4649      	mov	r1, r9
 800432a:	4638      	mov	r0, r7
 800432c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004330:	47c0      	blx	r8
 8004332:	3001      	adds	r0, #1
 8004334:	d020      	beq.n	8004378 <_printf_common+0xa8>
 8004336:	6823      	ldr	r3, [r4, #0]
 8004338:	68e5      	ldr	r5, [r4, #12]
 800433a:	f003 0306 	and.w	r3, r3, #6
 800433e:	2b04      	cmp	r3, #4
 8004340:	bf18      	it	ne
 8004342:	2500      	movne	r5, #0
 8004344:	6832      	ldr	r2, [r6, #0]
 8004346:	f04f 0600 	mov.w	r6, #0
 800434a:	68a3      	ldr	r3, [r4, #8]
 800434c:	bf08      	it	eq
 800434e:	1aad      	subeq	r5, r5, r2
 8004350:	6922      	ldr	r2, [r4, #16]
 8004352:	bf08      	it	eq
 8004354:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004358:	4293      	cmp	r3, r2
 800435a:	bfc4      	itt	gt
 800435c:	1a9b      	subgt	r3, r3, r2
 800435e:	18ed      	addgt	r5, r5, r3
 8004360:	341a      	adds	r4, #26
 8004362:	42b5      	cmp	r5, r6
 8004364:	d11a      	bne.n	800439c <_printf_common+0xcc>
 8004366:	2000      	movs	r0, #0
 8004368:	e008      	b.n	800437c <_printf_common+0xac>
 800436a:	2301      	movs	r3, #1
 800436c:	4652      	mov	r2, sl
 800436e:	4649      	mov	r1, r9
 8004370:	4638      	mov	r0, r7
 8004372:	47c0      	blx	r8
 8004374:	3001      	adds	r0, #1
 8004376:	d103      	bne.n	8004380 <_printf_common+0xb0>
 8004378:	f04f 30ff 	mov.w	r0, #4294967295
 800437c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004380:	3501      	adds	r5, #1
 8004382:	e7c4      	b.n	800430e <_printf_common+0x3e>
 8004384:	2030      	movs	r0, #48	; 0x30
 8004386:	18e1      	adds	r1, r4, r3
 8004388:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800438c:	1c5a      	adds	r2, r3, #1
 800438e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004392:	4422      	add	r2, r4
 8004394:	3302      	adds	r3, #2
 8004396:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800439a:	e7c5      	b.n	8004328 <_printf_common+0x58>
 800439c:	2301      	movs	r3, #1
 800439e:	4622      	mov	r2, r4
 80043a0:	4649      	mov	r1, r9
 80043a2:	4638      	mov	r0, r7
 80043a4:	47c0      	blx	r8
 80043a6:	3001      	adds	r0, #1
 80043a8:	d0e6      	beq.n	8004378 <_printf_common+0xa8>
 80043aa:	3601      	adds	r6, #1
 80043ac:	e7d9      	b.n	8004362 <_printf_common+0x92>
	...

080043b0 <_printf_i>:
 80043b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80043b4:	7e0f      	ldrb	r7, [r1, #24]
 80043b6:	4691      	mov	r9, r2
 80043b8:	2f78      	cmp	r7, #120	; 0x78
 80043ba:	4680      	mov	r8, r0
 80043bc:	460c      	mov	r4, r1
 80043be:	469a      	mov	sl, r3
 80043c0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80043c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80043c6:	d807      	bhi.n	80043d8 <_printf_i+0x28>
 80043c8:	2f62      	cmp	r7, #98	; 0x62
 80043ca:	d80a      	bhi.n	80043e2 <_printf_i+0x32>
 80043cc:	2f00      	cmp	r7, #0
 80043ce:	f000 80d9 	beq.w	8004584 <_printf_i+0x1d4>
 80043d2:	2f58      	cmp	r7, #88	; 0x58
 80043d4:	f000 80a4 	beq.w	8004520 <_printf_i+0x170>
 80043d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80043dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80043e0:	e03a      	b.n	8004458 <_printf_i+0xa8>
 80043e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80043e6:	2b15      	cmp	r3, #21
 80043e8:	d8f6      	bhi.n	80043d8 <_printf_i+0x28>
 80043ea:	a101      	add	r1, pc, #4	; (adr r1, 80043f0 <_printf_i+0x40>)
 80043ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80043f0:	08004449 	.word	0x08004449
 80043f4:	0800445d 	.word	0x0800445d
 80043f8:	080043d9 	.word	0x080043d9
 80043fc:	080043d9 	.word	0x080043d9
 8004400:	080043d9 	.word	0x080043d9
 8004404:	080043d9 	.word	0x080043d9
 8004408:	0800445d 	.word	0x0800445d
 800440c:	080043d9 	.word	0x080043d9
 8004410:	080043d9 	.word	0x080043d9
 8004414:	080043d9 	.word	0x080043d9
 8004418:	080043d9 	.word	0x080043d9
 800441c:	0800456b 	.word	0x0800456b
 8004420:	0800448d 	.word	0x0800448d
 8004424:	0800454d 	.word	0x0800454d
 8004428:	080043d9 	.word	0x080043d9
 800442c:	080043d9 	.word	0x080043d9
 8004430:	0800458d 	.word	0x0800458d
 8004434:	080043d9 	.word	0x080043d9
 8004438:	0800448d 	.word	0x0800448d
 800443c:	080043d9 	.word	0x080043d9
 8004440:	080043d9 	.word	0x080043d9
 8004444:	08004555 	.word	0x08004555
 8004448:	682b      	ldr	r3, [r5, #0]
 800444a:	1d1a      	adds	r2, r3, #4
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	602a      	str	r2, [r5, #0]
 8004450:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004454:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004458:	2301      	movs	r3, #1
 800445a:	e0a4      	b.n	80045a6 <_printf_i+0x1f6>
 800445c:	6820      	ldr	r0, [r4, #0]
 800445e:	6829      	ldr	r1, [r5, #0]
 8004460:	0606      	lsls	r6, r0, #24
 8004462:	f101 0304 	add.w	r3, r1, #4
 8004466:	d50a      	bpl.n	800447e <_printf_i+0xce>
 8004468:	680e      	ldr	r6, [r1, #0]
 800446a:	602b      	str	r3, [r5, #0]
 800446c:	2e00      	cmp	r6, #0
 800446e:	da03      	bge.n	8004478 <_printf_i+0xc8>
 8004470:	232d      	movs	r3, #45	; 0x2d
 8004472:	4276      	negs	r6, r6
 8004474:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004478:	230a      	movs	r3, #10
 800447a:	485e      	ldr	r0, [pc, #376]	; (80045f4 <_printf_i+0x244>)
 800447c:	e019      	b.n	80044b2 <_printf_i+0x102>
 800447e:	680e      	ldr	r6, [r1, #0]
 8004480:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004484:	602b      	str	r3, [r5, #0]
 8004486:	bf18      	it	ne
 8004488:	b236      	sxthne	r6, r6
 800448a:	e7ef      	b.n	800446c <_printf_i+0xbc>
 800448c:	682b      	ldr	r3, [r5, #0]
 800448e:	6820      	ldr	r0, [r4, #0]
 8004490:	1d19      	adds	r1, r3, #4
 8004492:	6029      	str	r1, [r5, #0]
 8004494:	0601      	lsls	r1, r0, #24
 8004496:	d501      	bpl.n	800449c <_printf_i+0xec>
 8004498:	681e      	ldr	r6, [r3, #0]
 800449a:	e002      	b.n	80044a2 <_printf_i+0xf2>
 800449c:	0646      	lsls	r6, r0, #25
 800449e:	d5fb      	bpl.n	8004498 <_printf_i+0xe8>
 80044a0:	881e      	ldrh	r6, [r3, #0]
 80044a2:	2f6f      	cmp	r7, #111	; 0x6f
 80044a4:	bf0c      	ite	eq
 80044a6:	2308      	moveq	r3, #8
 80044a8:	230a      	movne	r3, #10
 80044aa:	4852      	ldr	r0, [pc, #328]	; (80045f4 <_printf_i+0x244>)
 80044ac:	2100      	movs	r1, #0
 80044ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80044b2:	6865      	ldr	r5, [r4, #4]
 80044b4:	2d00      	cmp	r5, #0
 80044b6:	bfa8      	it	ge
 80044b8:	6821      	ldrge	r1, [r4, #0]
 80044ba:	60a5      	str	r5, [r4, #8]
 80044bc:	bfa4      	itt	ge
 80044be:	f021 0104 	bicge.w	r1, r1, #4
 80044c2:	6021      	strge	r1, [r4, #0]
 80044c4:	b90e      	cbnz	r6, 80044ca <_printf_i+0x11a>
 80044c6:	2d00      	cmp	r5, #0
 80044c8:	d04d      	beq.n	8004566 <_printf_i+0x1b6>
 80044ca:	4615      	mov	r5, r2
 80044cc:	fbb6 f1f3 	udiv	r1, r6, r3
 80044d0:	fb03 6711 	mls	r7, r3, r1, r6
 80044d4:	5dc7      	ldrb	r7, [r0, r7]
 80044d6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80044da:	4637      	mov	r7, r6
 80044dc:	42bb      	cmp	r3, r7
 80044de:	460e      	mov	r6, r1
 80044e0:	d9f4      	bls.n	80044cc <_printf_i+0x11c>
 80044e2:	2b08      	cmp	r3, #8
 80044e4:	d10b      	bne.n	80044fe <_printf_i+0x14e>
 80044e6:	6823      	ldr	r3, [r4, #0]
 80044e8:	07de      	lsls	r6, r3, #31
 80044ea:	d508      	bpl.n	80044fe <_printf_i+0x14e>
 80044ec:	6923      	ldr	r3, [r4, #16]
 80044ee:	6861      	ldr	r1, [r4, #4]
 80044f0:	4299      	cmp	r1, r3
 80044f2:	bfde      	ittt	le
 80044f4:	2330      	movle	r3, #48	; 0x30
 80044f6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80044fa:	f105 35ff 	addle.w	r5, r5, #4294967295
 80044fe:	1b52      	subs	r2, r2, r5
 8004500:	6122      	str	r2, [r4, #16]
 8004502:	464b      	mov	r3, r9
 8004504:	4621      	mov	r1, r4
 8004506:	4640      	mov	r0, r8
 8004508:	f8cd a000 	str.w	sl, [sp]
 800450c:	aa03      	add	r2, sp, #12
 800450e:	f7ff fedf 	bl	80042d0 <_printf_common>
 8004512:	3001      	adds	r0, #1
 8004514:	d14c      	bne.n	80045b0 <_printf_i+0x200>
 8004516:	f04f 30ff 	mov.w	r0, #4294967295
 800451a:	b004      	add	sp, #16
 800451c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004520:	4834      	ldr	r0, [pc, #208]	; (80045f4 <_printf_i+0x244>)
 8004522:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004526:	6829      	ldr	r1, [r5, #0]
 8004528:	6823      	ldr	r3, [r4, #0]
 800452a:	f851 6b04 	ldr.w	r6, [r1], #4
 800452e:	6029      	str	r1, [r5, #0]
 8004530:	061d      	lsls	r5, r3, #24
 8004532:	d514      	bpl.n	800455e <_printf_i+0x1ae>
 8004534:	07df      	lsls	r7, r3, #31
 8004536:	bf44      	itt	mi
 8004538:	f043 0320 	orrmi.w	r3, r3, #32
 800453c:	6023      	strmi	r3, [r4, #0]
 800453e:	b91e      	cbnz	r6, 8004548 <_printf_i+0x198>
 8004540:	6823      	ldr	r3, [r4, #0]
 8004542:	f023 0320 	bic.w	r3, r3, #32
 8004546:	6023      	str	r3, [r4, #0]
 8004548:	2310      	movs	r3, #16
 800454a:	e7af      	b.n	80044ac <_printf_i+0xfc>
 800454c:	6823      	ldr	r3, [r4, #0]
 800454e:	f043 0320 	orr.w	r3, r3, #32
 8004552:	6023      	str	r3, [r4, #0]
 8004554:	2378      	movs	r3, #120	; 0x78
 8004556:	4828      	ldr	r0, [pc, #160]	; (80045f8 <_printf_i+0x248>)
 8004558:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800455c:	e7e3      	b.n	8004526 <_printf_i+0x176>
 800455e:	0659      	lsls	r1, r3, #25
 8004560:	bf48      	it	mi
 8004562:	b2b6      	uxthmi	r6, r6
 8004564:	e7e6      	b.n	8004534 <_printf_i+0x184>
 8004566:	4615      	mov	r5, r2
 8004568:	e7bb      	b.n	80044e2 <_printf_i+0x132>
 800456a:	682b      	ldr	r3, [r5, #0]
 800456c:	6826      	ldr	r6, [r4, #0]
 800456e:	1d18      	adds	r0, r3, #4
 8004570:	6961      	ldr	r1, [r4, #20]
 8004572:	6028      	str	r0, [r5, #0]
 8004574:	0635      	lsls	r5, r6, #24
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	d501      	bpl.n	800457e <_printf_i+0x1ce>
 800457a:	6019      	str	r1, [r3, #0]
 800457c:	e002      	b.n	8004584 <_printf_i+0x1d4>
 800457e:	0670      	lsls	r0, r6, #25
 8004580:	d5fb      	bpl.n	800457a <_printf_i+0x1ca>
 8004582:	8019      	strh	r1, [r3, #0]
 8004584:	2300      	movs	r3, #0
 8004586:	4615      	mov	r5, r2
 8004588:	6123      	str	r3, [r4, #16]
 800458a:	e7ba      	b.n	8004502 <_printf_i+0x152>
 800458c:	682b      	ldr	r3, [r5, #0]
 800458e:	2100      	movs	r1, #0
 8004590:	1d1a      	adds	r2, r3, #4
 8004592:	602a      	str	r2, [r5, #0]
 8004594:	681d      	ldr	r5, [r3, #0]
 8004596:	6862      	ldr	r2, [r4, #4]
 8004598:	4628      	mov	r0, r5
 800459a:	f000 f82f 	bl	80045fc <memchr>
 800459e:	b108      	cbz	r0, 80045a4 <_printf_i+0x1f4>
 80045a0:	1b40      	subs	r0, r0, r5
 80045a2:	6060      	str	r0, [r4, #4]
 80045a4:	6863      	ldr	r3, [r4, #4]
 80045a6:	6123      	str	r3, [r4, #16]
 80045a8:	2300      	movs	r3, #0
 80045aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045ae:	e7a8      	b.n	8004502 <_printf_i+0x152>
 80045b0:	462a      	mov	r2, r5
 80045b2:	4649      	mov	r1, r9
 80045b4:	4640      	mov	r0, r8
 80045b6:	6923      	ldr	r3, [r4, #16]
 80045b8:	47d0      	blx	sl
 80045ba:	3001      	adds	r0, #1
 80045bc:	d0ab      	beq.n	8004516 <_printf_i+0x166>
 80045be:	6823      	ldr	r3, [r4, #0]
 80045c0:	079b      	lsls	r3, r3, #30
 80045c2:	d413      	bmi.n	80045ec <_printf_i+0x23c>
 80045c4:	68e0      	ldr	r0, [r4, #12]
 80045c6:	9b03      	ldr	r3, [sp, #12]
 80045c8:	4298      	cmp	r0, r3
 80045ca:	bfb8      	it	lt
 80045cc:	4618      	movlt	r0, r3
 80045ce:	e7a4      	b.n	800451a <_printf_i+0x16a>
 80045d0:	2301      	movs	r3, #1
 80045d2:	4632      	mov	r2, r6
 80045d4:	4649      	mov	r1, r9
 80045d6:	4640      	mov	r0, r8
 80045d8:	47d0      	blx	sl
 80045da:	3001      	adds	r0, #1
 80045dc:	d09b      	beq.n	8004516 <_printf_i+0x166>
 80045de:	3501      	adds	r5, #1
 80045e0:	68e3      	ldr	r3, [r4, #12]
 80045e2:	9903      	ldr	r1, [sp, #12]
 80045e4:	1a5b      	subs	r3, r3, r1
 80045e6:	42ab      	cmp	r3, r5
 80045e8:	dcf2      	bgt.n	80045d0 <_printf_i+0x220>
 80045ea:	e7eb      	b.n	80045c4 <_printf_i+0x214>
 80045ec:	2500      	movs	r5, #0
 80045ee:	f104 0619 	add.w	r6, r4, #25
 80045f2:	e7f5      	b.n	80045e0 <_printf_i+0x230>
 80045f4:	08004f29 	.word	0x08004f29
 80045f8:	08004f3a 	.word	0x08004f3a

080045fc <memchr>:
 80045fc:	4603      	mov	r3, r0
 80045fe:	b510      	push	{r4, lr}
 8004600:	b2c9      	uxtb	r1, r1
 8004602:	4402      	add	r2, r0
 8004604:	4293      	cmp	r3, r2
 8004606:	4618      	mov	r0, r3
 8004608:	d101      	bne.n	800460e <memchr+0x12>
 800460a:	2000      	movs	r0, #0
 800460c:	e003      	b.n	8004616 <memchr+0x1a>
 800460e:	7804      	ldrb	r4, [r0, #0]
 8004610:	3301      	adds	r3, #1
 8004612:	428c      	cmp	r4, r1
 8004614:	d1f6      	bne.n	8004604 <memchr+0x8>
 8004616:	bd10      	pop	{r4, pc}

08004618 <memcpy>:
 8004618:	440a      	add	r2, r1
 800461a:	4291      	cmp	r1, r2
 800461c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004620:	d100      	bne.n	8004624 <memcpy+0xc>
 8004622:	4770      	bx	lr
 8004624:	b510      	push	{r4, lr}
 8004626:	f811 4b01 	ldrb.w	r4, [r1], #1
 800462a:	4291      	cmp	r1, r2
 800462c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004630:	d1f9      	bne.n	8004626 <memcpy+0xe>
 8004632:	bd10      	pop	{r4, pc}

08004634 <memmove>:
 8004634:	4288      	cmp	r0, r1
 8004636:	b510      	push	{r4, lr}
 8004638:	eb01 0402 	add.w	r4, r1, r2
 800463c:	d902      	bls.n	8004644 <memmove+0x10>
 800463e:	4284      	cmp	r4, r0
 8004640:	4623      	mov	r3, r4
 8004642:	d807      	bhi.n	8004654 <memmove+0x20>
 8004644:	1e43      	subs	r3, r0, #1
 8004646:	42a1      	cmp	r1, r4
 8004648:	d008      	beq.n	800465c <memmove+0x28>
 800464a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800464e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004652:	e7f8      	b.n	8004646 <memmove+0x12>
 8004654:	4601      	mov	r1, r0
 8004656:	4402      	add	r2, r0
 8004658:	428a      	cmp	r2, r1
 800465a:	d100      	bne.n	800465e <memmove+0x2a>
 800465c:	bd10      	pop	{r4, pc}
 800465e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004662:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004666:	e7f7      	b.n	8004658 <memmove+0x24>

08004668 <_free_r>:
 8004668:	b538      	push	{r3, r4, r5, lr}
 800466a:	4605      	mov	r5, r0
 800466c:	2900      	cmp	r1, #0
 800466e:	d040      	beq.n	80046f2 <_free_r+0x8a>
 8004670:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004674:	1f0c      	subs	r4, r1, #4
 8004676:	2b00      	cmp	r3, #0
 8004678:	bfb8      	it	lt
 800467a:	18e4      	addlt	r4, r4, r3
 800467c:	f000 f910 	bl	80048a0 <__malloc_lock>
 8004680:	4a1c      	ldr	r2, [pc, #112]	; (80046f4 <_free_r+0x8c>)
 8004682:	6813      	ldr	r3, [r2, #0]
 8004684:	b933      	cbnz	r3, 8004694 <_free_r+0x2c>
 8004686:	6063      	str	r3, [r4, #4]
 8004688:	6014      	str	r4, [r2, #0]
 800468a:	4628      	mov	r0, r5
 800468c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004690:	f000 b90c 	b.w	80048ac <__malloc_unlock>
 8004694:	42a3      	cmp	r3, r4
 8004696:	d908      	bls.n	80046aa <_free_r+0x42>
 8004698:	6820      	ldr	r0, [r4, #0]
 800469a:	1821      	adds	r1, r4, r0
 800469c:	428b      	cmp	r3, r1
 800469e:	bf01      	itttt	eq
 80046a0:	6819      	ldreq	r1, [r3, #0]
 80046a2:	685b      	ldreq	r3, [r3, #4]
 80046a4:	1809      	addeq	r1, r1, r0
 80046a6:	6021      	streq	r1, [r4, #0]
 80046a8:	e7ed      	b.n	8004686 <_free_r+0x1e>
 80046aa:	461a      	mov	r2, r3
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	b10b      	cbz	r3, 80046b4 <_free_r+0x4c>
 80046b0:	42a3      	cmp	r3, r4
 80046b2:	d9fa      	bls.n	80046aa <_free_r+0x42>
 80046b4:	6811      	ldr	r1, [r2, #0]
 80046b6:	1850      	adds	r0, r2, r1
 80046b8:	42a0      	cmp	r0, r4
 80046ba:	d10b      	bne.n	80046d4 <_free_r+0x6c>
 80046bc:	6820      	ldr	r0, [r4, #0]
 80046be:	4401      	add	r1, r0
 80046c0:	1850      	adds	r0, r2, r1
 80046c2:	4283      	cmp	r3, r0
 80046c4:	6011      	str	r1, [r2, #0]
 80046c6:	d1e0      	bne.n	800468a <_free_r+0x22>
 80046c8:	6818      	ldr	r0, [r3, #0]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	4401      	add	r1, r0
 80046ce:	6011      	str	r1, [r2, #0]
 80046d0:	6053      	str	r3, [r2, #4]
 80046d2:	e7da      	b.n	800468a <_free_r+0x22>
 80046d4:	d902      	bls.n	80046dc <_free_r+0x74>
 80046d6:	230c      	movs	r3, #12
 80046d8:	602b      	str	r3, [r5, #0]
 80046da:	e7d6      	b.n	800468a <_free_r+0x22>
 80046dc:	6820      	ldr	r0, [r4, #0]
 80046de:	1821      	adds	r1, r4, r0
 80046e0:	428b      	cmp	r3, r1
 80046e2:	bf01      	itttt	eq
 80046e4:	6819      	ldreq	r1, [r3, #0]
 80046e6:	685b      	ldreq	r3, [r3, #4]
 80046e8:	1809      	addeq	r1, r1, r0
 80046ea:	6021      	streq	r1, [r4, #0]
 80046ec:	6063      	str	r3, [r4, #4]
 80046ee:	6054      	str	r4, [r2, #4]
 80046f0:	e7cb      	b.n	800468a <_free_r+0x22>
 80046f2:	bd38      	pop	{r3, r4, r5, pc}
 80046f4:	20000264 	.word	0x20000264

080046f8 <sbrk_aligned>:
 80046f8:	b570      	push	{r4, r5, r6, lr}
 80046fa:	4e0e      	ldr	r6, [pc, #56]	; (8004734 <sbrk_aligned+0x3c>)
 80046fc:	460c      	mov	r4, r1
 80046fe:	6831      	ldr	r1, [r6, #0]
 8004700:	4605      	mov	r5, r0
 8004702:	b911      	cbnz	r1, 800470a <sbrk_aligned+0x12>
 8004704:	f000 f8bc 	bl	8004880 <_sbrk_r>
 8004708:	6030      	str	r0, [r6, #0]
 800470a:	4621      	mov	r1, r4
 800470c:	4628      	mov	r0, r5
 800470e:	f000 f8b7 	bl	8004880 <_sbrk_r>
 8004712:	1c43      	adds	r3, r0, #1
 8004714:	d00a      	beq.n	800472c <sbrk_aligned+0x34>
 8004716:	1cc4      	adds	r4, r0, #3
 8004718:	f024 0403 	bic.w	r4, r4, #3
 800471c:	42a0      	cmp	r0, r4
 800471e:	d007      	beq.n	8004730 <sbrk_aligned+0x38>
 8004720:	1a21      	subs	r1, r4, r0
 8004722:	4628      	mov	r0, r5
 8004724:	f000 f8ac 	bl	8004880 <_sbrk_r>
 8004728:	3001      	adds	r0, #1
 800472a:	d101      	bne.n	8004730 <sbrk_aligned+0x38>
 800472c:	f04f 34ff 	mov.w	r4, #4294967295
 8004730:	4620      	mov	r0, r4
 8004732:	bd70      	pop	{r4, r5, r6, pc}
 8004734:	20000268 	.word	0x20000268

08004738 <_malloc_r>:
 8004738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800473c:	1ccd      	adds	r5, r1, #3
 800473e:	f025 0503 	bic.w	r5, r5, #3
 8004742:	3508      	adds	r5, #8
 8004744:	2d0c      	cmp	r5, #12
 8004746:	bf38      	it	cc
 8004748:	250c      	movcc	r5, #12
 800474a:	2d00      	cmp	r5, #0
 800474c:	4607      	mov	r7, r0
 800474e:	db01      	blt.n	8004754 <_malloc_r+0x1c>
 8004750:	42a9      	cmp	r1, r5
 8004752:	d905      	bls.n	8004760 <_malloc_r+0x28>
 8004754:	230c      	movs	r3, #12
 8004756:	2600      	movs	r6, #0
 8004758:	603b      	str	r3, [r7, #0]
 800475a:	4630      	mov	r0, r6
 800475c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004760:	4e2e      	ldr	r6, [pc, #184]	; (800481c <_malloc_r+0xe4>)
 8004762:	f000 f89d 	bl	80048a0 <__malloc_lock>
 8004766:	6833      	ldr	r3, [r6, #0]
 8004768:	461c      	mov	r4, r3
 800476a:	bb34      	cbnz	r4, 80047ba <_malloc_r+0x82>
 800476c:	4629      	mov	r1, r5
 800476e:	4638      	mov	r0, r7
 8004770:	f7ff ffc2 	bl	80046f8 <sbrk_aligned>
 8004774:	1c43      	adds	r3, r0, #1
 8004776:	4604      	mov	r4, r0
 8004778:	d14d      	bne.n	8004816 <_malloc_r+0xde>
 800477a:	6834      	ldr	r4, [r6, #0]
 800477c:	4626      	mov	r6, r4
 800477e:	2e00      	cmp	r6, #0
 8004780:	d140      	bne.n	8004804 <_malloc_r+0xcc>
 8004782:	6823      	ldr	r3, [r4, #0]
 8004784:	4631      	mov	r1, r6
 8004786:	4638      	mov	r0, r7
 8004788:	eb04 0803 	add.w	r8, r4, r3
 800478c:	f000 f878 	bl	8004880 <_sbrk_r>
 8004790:	4580      	cmp	r8, r0
 8004792:	d13a      	bne.n	800480a <_malloc_r+0xd2>
 8004794:	6821      	ldr	r1, [r4, #0]
 8004796:	3503      	adds	r5, #3
 8004798:	1a6d      	subs	r5, r5, r1
 800479a:	f025 0503 	bic.w	r5, r5, #3
 800479e:	3508      	adds	r5, #8
 80047a0:	2d0c      	cmp	r5, #12
 80047a2:	bf38      	it	cc
 80047a4:	250c      	movcc	r5, #12
 80047a6:	4638      	mov	r0, r7
 80047a8:	4629      	mov	r1, r5
 80047aa:	f7ff ffa5 	bl	80046f8 <sbrk_aligned>
 80047ae:	3001      	adds	r0, #1
 80047b0:	d02b      	beq.n	800480a <_malloc_r+0xd2>
 80047b2:	6823      	ldr	r3, [r4, #0]
 80047b4:	442b      	add	r3, r5
 80047b6:	6023      	str	r3, [r4, #0]
 80047b8:	e00e      	b.n	80047d8 <_malloc_r+0xa0>
 80047ba:	6822      	ldr	r2, [r4, #0]
 80047bc:	1b52      	subs	r2, r2, r5
 80047be:	d41e      	bmi.n	80047fe <_malloc_r+0xc6>
 80047c0:	2a0b      	cmp	r2, #11
 80047c2:	d916      	bls.n	80047f2 <_malloc_r+0xba>
 80047c4:	1961      	adds	r1, r4, r5
 80047c6:	42a3      	cmp	r3, r4
 80047c8:	6025      	str	r5, [r4, #0]
 80047ca:	bf18      	it	ne
 80047cc:	6059      	strne	r1, [r3, #4]
 80047ce:	6863      	ldr	r3, [r4, #4]
 80047d0:	bf08      	it	eq
 80047d2:	6031      	streq	r1, [r6, #0]
 80047d4:	5162      	str	r2, [r4, r5]
 80047d6:	604b      	str	r3, [r1, #4]
 80047d8:	4638      	mov	r0, r7
 80047da:	f104 060b 	add.w	r6, r4, #11
 80047de:	f000 f865 	bl	80048ac <__malloc_unlock>
 80047e2:	f026 0607 	bic.w	r6, r6, #7
 80047e6:	1d23      	adds	r3, r4, #4
 80047e8:	1af2      	subs	r2, r6, r3
 80047ea:	d0b6      	beq.n	800475a <_malloc_r+0x22>
 80047ec:	1b9b      	subs	r3, r3, r6
 80047ee:	50a3      	str	r3, [r4, r2]
 80047f0:	e7b3      	b.n	800475a <_malloc_r+0x22>
 80047f2:	6862      	ldr	r2, [r4, #4]
 80047f4:	42a3      	cmp	r3, r4
 80047f6:	bf0c      	ite	eq
 80047f8:	6032      	streq	r2, [r6, #0]
 80047fa:	605a      	strne	r2, [r3, #4]
 80047fc:	e7ec      	b.n	80047d8 <_malloc_r+0xa0>
 80047fe:	4623      	mov	r3, r4
 8004800:	6864      	ldr	r4, [r4, #4]
 8004802:	e7b2      	b.n	800476a <_malloc_r+0x32>
 8004804:	4634      	mov	r4, r6
 8004806:	6876      	ldr	r6, [r6, #4]
 8004808:	e7b9      	b.n	800477e <_malloc_r+0x46>
 800480a:	230c      	movs	r3, #12
 800480c:	4638      	mov	r0, r7
 800480e:	603b      	str	r3, [r7, #0]
 8004810:	f000 f84c 	bl	80048ac <__malloc_unlock>
 8004814:	e7a1      	b.n	800475a <_malloc_r+0x22>
 8004816:	6025      	str	r5, [r4, #0]
 8004818:	e7de      	b.n	80047d8 <_malloc_r+0xa0>
 800481a:	bf00      	nop
 800481c:	20000264 	.word	0x20000264

08004820 <_realloc_r>:
 8004820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004824:	4680      	mov	r8, r0
 8004826:	4614      	mov	r4, r2
 8004828:	460e      	mov	r6, r1
 800482a:	b921      	cbnz	r1, 8004836 <_realloc_r+0x16>
 800482c:	4611      	mov	r1, r2
 800482e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004832:	f7ff bf81 	b.w	8004738 <_malloc_r>
 8004836:	b92a      	cbnz	r2, 8004844 <_realloc_r+0x24>
 8004838:	f7ff ff16 	bl	8004668 <_free_r>
 800483c:	4625      	mov	r5, r4
 800483e:	4628      	mov	r0, r5
 8004840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004844:	f000 f838 	bl	80048b8 <_malloc_usable_size_r>
 8004848:	4284      	cmp	r4, r0
 800484a:	4607      	mov	r7, r0
 800484c:	d802      	bhi.n	8004854 <_realloc_r+0x34>
 800484e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004852:	d812      	bhi.n	800487a <_realloc_r+0x5a>
 8004854:	4621      	mov	r1, r4
 8004856:	4640      	mov	r0, r8
 8004858:	f7ff ff6e 	bl	8004738 <_malloc_r>
 800485c:	4605      	mov	r5, r0
 800485e:	2800      	cmp	r0, #0
 8004860:	d0ed      	beq.n	800483e <_realloc_r+0x1e>
 8004862:	42bc      	cmp	r4, r7
 8004864:	4622      	mov	r2, r4
 8004866:	4631      	mov	r1, r6
 8004868:	bf28      	it	cs
 800486a:	463a      	movcs	r2, r7
 800486c:	f7ff fed4 	bl	8004618 <memcpy>
 8004870:	4631      	mov	r1, r6
 8004872:	4640      	mov	r0, r8
 8004874:	f7ff fef8 	bl	8004668 <_free_r>
 8004878:	e7e1      	b.n	800483e <_realloc_r+0x1e>
 800487a:	4635      	mov	r5, r6
 800487c:	e7df      	b.n	800483e <_realloc_r+0x1e>
	...

08004880 <_sbrk_r>:
 8004880:	b538      	push	{r3, r4, r5, lr}
 8004882:	2300      	movs	r3, #0
 8004884:	4d05      	ldr	r5, [pc, #20]	; (800489c <_sbrk_r+0x1c>)
 8004886:	4604      	mov	r4, r0
 8004888:	4608      	mov	r0, r1
 800488a:	602b      	str	r3, [r5, #0]
 800488c:	f7fc ffd6 	bl	800183c <_sbrk>
 8004890:	1c43      	adds	r3, r0, #1
 8004892:	d102      	bne.n	800489a <_sbrk_r+0x1a>
 8004894:	682b      	ldr	r3, [r5, #0]
 8004896:	b103      	cbz	r3, 800489a <_sbrk_r+0x1a>
 8004898:	6023      	str	r3, [r4, #0]
 800489a:	bd38      	pop	{r3, r4, r5, pc}
 800489c:	2000026c 	.word	0x2000026c

080048a0 <__malloc_lock>:
 80048a0:	4801      	ldr	r0, [pc, #4]	; (80048a8 <__malloc_lock+0x8>)
 80048a2:	f000 b811 	b.w	80048c8 <__retarget_lock_acquire_recursive>
 80048a6:	bf00      	nop
 80048a8:	20000270 	.word	0x20000270

080048ac <__malloc_unlock>:
 80048ac:	4801      	ldr	r0, [pc, #4]	; (80048b4 <__malloc_unlock+0x8>)
 80048ae:	f000 b80c 	b.w	80048ca <__retarget_lock_release_recursive>
 80048b2:	bf00      	nop
 80048b4:	20000270 	.word	0x20000270

080048b8 <_malloc_usable_size_r>:
 80048b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048bc:	1f18      	subs	r0, r3, #4
 80048be:	2b00      	cmp	r3, #0
 80048c0:	bfbc      	itt	lt
 80048c2:	580b      	ldrlt	r3, [r1, r0]
 80048c4:	18c0      	addlt	r0, r0, r3
 80048c6:	4770      	bx	lr

080048c8 <__retarget_lock_acquire_recursive>:
 80048c8:	4770      	bx	lr

080048ca <__retarget_lock_release_recursive>:
 80048ca:	4770      	bx	lr

080048cc <_init>:
 80048cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ce:	bf00      	nop
 80048d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048d2:	bc08      	pop	{r3}
 80048d4:	469e      	mov	lr, r3
 80048d6:	4770      	bx	lr

080048d8 <_fini>:
 80048d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048da:	bf00      	nop
 80048dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048de:	bc08      	pop	{r3}
 80048e0:	469e      	mov	lr, r3
 80048e2:	4770      	bx	lr
