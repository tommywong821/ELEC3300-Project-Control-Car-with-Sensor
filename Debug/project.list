
project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000439c  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006a4  08004580  08004580  00014580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c24  08004c24  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004c24  08004c24  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004c24  08004c24  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c24  08004c24  00014c24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c28  08004c28  00014c28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004c2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  20000070  08004c9c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001e4  08004c9c  000201e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a5b4  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021a0  00000000  00000000  0002a64d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a90  00000000  00000000  0002c7f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009a8  00000000  00000000  0002d280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a216  00000000  00000000  0002dc28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c58e  00000000  00000000  00047e3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009882b  00000000  00000000  000543cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ecbf7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e2c  00000000  00000000  000ecc48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000070 	.word	0x20000070
 8000200:	00000000 	.word	0x00000000
 8000204:	08004568 	.word	0x08004568

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000074 	.word	0x20000074
 8000220:	08004568 	.word	0x08004568

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <Delay>:
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );



void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 8000234:	b480      	push	{r7}
 8000236:	b083      	sub	sp, #12
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
 800023c:	e002      	b.n	8000244 <Delay+0x10>
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	3b01      	subs	r3, #1
 8000242:	607b      	str	r3, [r7, #4]
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	2b00      	cmp	r3, #0
 8000248:	d1f9      	bne.n	800023e <Delay+0xa>
 800024a:	bf00      	nop
 800024c:	bf00      	nop
 800024e:	370c      	adds	r7, #12
 8000250:	46bd      	mov	sp, r7
 8000252:	bc80      	pop	{r7}
 8000254:	4770      	bx	lr

08000256 <LCD_INIT>:

void LCD_INIT ( void )
{
 8000256:	b580      	push	{r7, lr}
 8000258:	b082      	sub	sp, #8
 800025a:	af02      	add	r7, sp, #8
	LCD_BackLed_Control(ENABLE);      
 800025c:	2001      	movs	r0, #1
 800025e:	f000 f829 	bl	80002b4 <LCD_BackLed_Control>
	LCD_Rst();
 8000262:	f000 f80f 	bl	8000284 <LCD_Rst>
	LCD_REG_Config();
 8000266:	f000 f85f 	bl	8000328 <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320, BACKGROUND);
 800026a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800026e:	9300      	str	r3, [sp, #0]
 8000270:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000274:	22f0      	movs	r2, #240	; 0xf0
 8000276:	2100      	movs	r1, #0
 8000278:	2000      	movs	r0, #0
 800027a:	f000 f9e6 	bl	800064a <LCD_Clear>
}
 800027e:	bf00      	nop
 8000280:	46bd      	mov	sp, r7
 8000282:	bd80      	pop	{r7, pc}

08000284 <LCD_Rst>:



void LCD_Rst ( void )
{			
 8000284:	b580      	push	{r7, lr}
 8000286:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 8000288:	2200      	movs	r2, #0
 800028a:	2102      	movs	r1, #2
 800028c:	4807      	ldr	r0, [pc, #28]	; (80002ac <LCD_Rst+0x28>)
 800028e:	f002 f883 	bl	8002398 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 8000292:	4807      	ldr	r0, [pc, #28]	; (80002b0 <LCD_Rst+0x2c>)
 8000294:	f7ff ffce 	bl	8000234 <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 8000298:	2201      	movs	r2, #1
 800029a:	2102      	movs	r1, #2
 800029c:	4803      	ldr	r0, [pc, #12]	; (80002ac <LCD_Rst+0x28>)
 800029e:	f002 f87b 	bl	8002398 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 80002a2:	4803      	ldr	r0, [pc, #12]	; (80002b0 <LCD_Rst+0x2c>)
 80002a4:	f7ff ffc6 	bl	8000234 <Delay>
}
 80002a8:	bf00      	nop
 80002aa:	bd80      	pop	{r7, pc}
 80002ac:	40011800 	.word	0x40011800
 80002b0:	0002bffc 	.word	0x0002bffc

080002b4 <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b082      	sub	sp, #8
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	4603      	mov	r3, r0
 80002bc:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 80002be:	79fb      	ldrb	r3, [r7, #7]
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d006      	beq.n	80002d2 <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 80002c4:	2200      	movs	r2, #0
 80002c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002ca:	4807      	ldr	r0, [pc, #28]	; (80002e8 <LCD_BackLed_Control+0x34>)
 80002cc:	f002 f864 	bl	8002398 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 80002d0:	e005      	b.n	80002de <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 80002d2:	2201      	movs	r2, #1
 80002d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <LCD_BackLed_Control+0x34>)
 80002da:	f002 f85d 	bl	8002398 <HAL_GPIO_WritePin>
}
 80002de:	bf00      	nop
 80002e0:	3708      	adds	r7, #8
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	40011400 	.word	0x40011400

080002ec <LCD_Write_Cmd>:




void LCD_Write_Cmd ( uint16_t usCmd )
{
 80002ec:	b480      	push	{r7}
 80002ee:	b083      	sub	sp, #12
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	4603      	mov	r3, r0
 80002f4:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80002f6:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80002fa:	88fb      	ldrh	r3, [r7, #6]
 80002fc:	8013      	strh	r3, [r2, #0]
}
 80002fe:	bf00      	nop
 8000300:	370c      	adds	r7, #12
 8000302:	46bd      	mov	sp, r7
 8000304:	bc80      	pop	{r7}
 8000306:	4770      	bx	lr

08000308 <LCD_Write_Data>:




void LCD_Write_Data ( uint16_t usData )
{
 8000308:	b480      	push	{r7}
 800030a:	b083      	sub	sp, #12
 800030c:	af00      	add	r7, sp, #0
 800030e:	4603      	mov	r3, r0
 8000310:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000312:	4a04      	ldr	r2, [pc, #16]	; (8000324 <LCD_Write_Data+0x1c>)
 8000314:	88fb      	ldrh	r3, [r7, #6]
 8000316:	8013      	strh	r3, [r2, #0]
}
 8000318:	bf00      	nop
 800031a:	370c      	adds	r7, #12
 800031c:	46bd      	mov	sp, r7
 800031e:	bc80      	pop	{r7}
 8000320:	4770      	bx	lr
 8000322:	bf00      	nop
 8000324:	60020000 	.word	0x60020000

08000328 <LCD_REG_Config>:
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 800032c:	20cf      	movs	r0, #207	; 0xcf
 800032e:	f7ff ffdd 	bl	80002ec <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 8000332:	2000      	movs	r0, #0
 8000334:	f7ff ffe8 	bl	8000308 <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 8000338:	2081      	movs	r0, #129	; 0x81
 800033a:	f7ff ffe5 	bl	8000308 <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 800033e:	2030      	movs	r0, #48	; 0x30
 8000340:	f7ff ffe2 	bl	8000308 <LCD_Write_Data>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 8000344:	20ed      	movs	r0, #237	; 0xed
 8000346:	f7ff ffd1 	bl	80002ec <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 800034a:	2064      	movs	r0, #100	; 0x64
 800034c:	f7ff ffdc 	bl	8000308 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8000350:	2003      	movs	r0, #3
 8000352:	f7ff ffd9 	bl	8000308 <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 8000356:	2012      	movs	r0, #18
 8000358:	f7ff ffd6 	bl	8000308 <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 800035c:	2081      	movs	r0, #129	; 0x81
 800035e:	f7ff ffd3 	bl	8000308 <LCD_Write_Data>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 8000362:	20e8      	movs	r0, #232	; 0xe8
 8000364:	f7ff ffc2 	bl	80002ec <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 8000368:	2085      	movs	r0, #133	; 0x85
 800036a:	f7ff ffcd 	bl	8000308 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 800036e:	2010      	movs	r0, #16
 8000370:	f7ff ffca 	bl	8000308 <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 8000374:	2078      	movs	r0, #120	; 0x78
 8000376:	f7ff ffc7 	bl	8000308 <LCD_Write_Data>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 800037a:	20cb      	movs	r0, #203	; 0xcb
 800037c:	f7ff ffb6 	bl	80002ec <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 8000380:	2039      	movs	r0, #57	; 0x39
 8000382:	f7ff ffc1 	bl	8000308 <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 8000386:	202c      	movs	r0, #44	; 0x2c
 8000388:	f7ff ffbe 	bl	8000308 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 800038c:	2000      	movs	r0, #0
 800038e:	f7ff ffbb 	bl	8000308 <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 8000392:	2034      	movs	r0, #52	; 0x34
 8000394:	f7ff ffb8 	bl	8000308 <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 8000398:	2002      	movs	r0, #2
 800039a:	f7ff ffb5 	bl	8000308 <LCD_Write_Data>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 800039e:	20f7      	movs	r0, #247	; 0xf7
 80003a0:	f7ff ffa4 	bl	80002ec <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 80003a4:	2020      	movs	r0, #32
 80003a6:	f7ff ffaf 	bl	8000308 <LCD_Write_Data>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 80003aa:	20ea      	movs	r0, #234	; 0xea
 80003ac:	f7ff ff9e 	bl	80002ec <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80003b0:	2000      	movs	r0, #0
 80003b2:	f7ff ffa9 	bl	8000308 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80003b6:	2000      	movs	r0, #0
 80003b8:	f7ff ffa6 	bl	8000308 <LCD_Write_Data>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 80003bc:	20b1      	movs	r0, #177	; 0xb1
 80003be:	f7ff ff95 	bl	80002ec <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80003c2:	2000      	movs	r0, #0
 80003c4:	f7ff ffa0 	bl	8000308 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 80003c8:	201b      	movs	r0, #27
 80003ca:	f7ff ff9d 	bl	8000308 <LCD_Write_Data>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 80003ce:	20b6      	movs	r0, #182	; 0xb6
 80003d0:	f7ff ff8c 	bl	80002ec <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 80003d4:	200a      	movs	r0, #10
 80003d6:	f7ff ff97 	bl	8000308 <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 80003da:	20a2      	movs	r0, #162	; 0xa2
 80003dc:	f7ff ff94 	bl	8000308 <LCD_Write_Data>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 80003e0:	20c0      	movs	r0, #192	; 0xc0
 80003e2:	f7ff ff83 	bl	80002ec <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 80003e6:	2035      	movs	r0, #53	; 0x35
 80003e8:	f7ff ff8e 	bl	8000308 <LCD_Write_Data>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 80003ec:	20c1      	movs	r0, #193	; 0xc1
 80003ee:	f7ff ff7d 	bl	80002ec <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 80003f2:	2011      	movs	r0, #17
 80003f4:	f7ff ff88 	bl	8000308 <LCD_Write_Data>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 80003f8:	20c5      	movs	r0, #197	; 0xc5
 80003fa:	f7ff ff77 	bl	80002ec <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 80003fe:	2045      	movs	r0, #69	; 0x45
 8000400:	f7ff ff82 	bl	8000308 <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 8000404:	2045      	movs	r0, #69	; 0x45
 8000406:	f7ff ff7f 	bl	8000308 <LCD_Write_Data>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 800040a:	20c7      	movs	r0, #199	; 0xc7
 800040c:	f7ff ff6e 	bl	80002ec <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 8000410:	20a2      	movs	r0, #162	; 0xa2
 8000412:	f7ff ff79 	bl	8000308 <LCD_Write_Data>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 8000416:	20f2      	movs	r0, #242	; 0xf2
 8000418:	f7ff ff68 	bl	80002ec <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 800041c:	2000      	movs	r0, #0
 800041e:	f7ff ff73 	bl	8000308 <LCD_Write_Data>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 8000422:	2026      	movs	r0, #38	; 0x26
 8000424:	f7ff ff62 	bl	80002ec <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 8000428:	2001      	movs	r0, #1
 800042a:	f7ff ff6d 	bl	8000308 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 800042e:	20e0      	movs	r0, #224	; 0xe0
 8000430:	f7ff ff5c 	bl	80002ec <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 8000434:	200f      	movs	r0, #15
 8000436:	f7ff ff67 	bl	8000308 <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 800043a:	2026      	movs	r0, #38	; 0x26
 800043c:	f7ff ff64 	bl	8000308 <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 8000440:	2024      	movs	r0, #36	; 0x24
 8000442:	f7ff ff61 	bl	8000308 <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 8000446:	200b      	movs	r0, #11
 8000448:	f7ff ff5e 	bl	8000308 <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 800044c:	200e      	movs	r0, #14
 800044e:	f7ff ff5b 	bl	8000308 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8000452:	2009      	movs	r0, #9
 8000454:	f7ff ff58 	bl	8000308 <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 8000458:	2054      	movs	r0, #84	; 0x54
 800045a:	f7ff ff55 	bl	8000308 <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 800045e:	20a8      	movs	r0, #168	; 0xa8
 8000460:	f7ff ff52 	bl	8000308 <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 8000464:	2046      	movs	r0, #70	; 0x46
 8000466:	f7ff ff4f 	bl	8000308 <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 800046a:	200c      	movs	r0, #12
 800046c:	f7ff ff4c 	bl	8000308 <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 8000470:	2017      	movs	r0, #23
 8000472:	f7ff ff49 	bl	8000308 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8000476:	2009      	movs	r0, #9
 8000478:	f7ff ff46 	bl	8000308 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 800047c:	200f      	movs	r0, #15
 800047e:	f7ff ff43 	bl	8000308 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8000482:	2007      	movs	r0, #7
 8000484:	f7ff ff40 	bl	8000308 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000488:	2000      	movs	r0, #0
 800048a:	f7ff ff3d 	bl	8000308 <LCD_Write_Data>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 800048e:	20e1      	movs	r0, #225	; 0xe1
 8000490:	f7ff ff2c 	bl	80002ec <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000494:	2000      	movs	r0, #0
 8000496:	f7ff ff37 	bl	8000308 <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 800049a:	2019      	movs	r0, #25
 800049c:	f7ff ff34 	bl	8000308 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 80004a0:	201b      	movs	r0, #27
 80004a2:	f7ff ff31 	bl	8000308 <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 80004a6:	2004      	movs	r0, #4
 80004a8:	f7ff ff2e 	bl	8000308 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 80004ac:	2010      	movs	r0, #16
 80004ae:	f7ff ff2b 	bl	8000308 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 80004b2:	2007      	movs	r0, #7
 80004b4:	f7ff ff28 	bl	8000308 <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 80004b8:	202a      	movs	r0, #42	; 0x2a
 80004ba:	f7ff ff25 	bl	8000308 <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 80004be:	2047      	movs	r0, #71	; 0x47
 80004c0:	f7ff ff22 	bl	8000308 <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 80004c4:	2039      	movs	r0, #57	; 0x39
 80004c6:	f7ff ff1f 	bl	8000308 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 80004ca:	2003      	movs	r0, #3
 80004cc:	f7ff ff1c 	bl	8000308 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 80004d0:	2006      	movs	r0, #6
 80004d2:	f7ff ff19 	bl	8000308 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 80004d6:	2006      	movs	r0, #6
 80004d8:	f7ff ff16 	bl	8000308 <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 80004dc:	2030      	movs	r0, #48	; 0x30
 80004de:	f7ff ff13 	bl	8000308 <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 80004e2:	2038      	movs	r0, #56	; 0x38
 80004e4:	f7ff ff10 	bl	8000308 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 80004e8:	200f      	movs	r0, #15
 80004ea:	f7ff ff0d 	bl	8000308 <LCD_Write_Data>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 80004ee:	2036      	movs	r0, #54	; 0x36
 80004f0:	f7ff fefc 	bl	80002ec <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );    
 80004f4:	20c8      	movs	r0, #200	; 0xc8
 80004f6:	f7ff ff07 	bl	8000308 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 80004fa:	202a      	movs	r0, #42	; 0x2a
 80004fc:	f7ff fef6 	bl	80002ec <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000500:	2000      	movs	r0, #0
 8000502:	f7ff ff01 	bl	8000308 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000506:	2000      	movs	r0, #0
 8000508:	f7ff fefe 	bl	8000308 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 800050c:	2000      	movs	r0, #0
 800050e:	f7ff fefb 	bl	8000308 <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 8000512:	20ef      	movs	r0, #239	; 0xef
 8000514:	f7ff fef8 	bl	8000308 <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 8000518:	202b      	movs	r0, #43	; 0x2b
 800051a:	f7ff fee7 	bl	80002ec <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 800051e:	2000      	movs	r0, #0
 8000520:	f7ff fef2 	bl	8000308 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000524:	2000      	movs	r0, #0
 8000526:	f7ff feef 	bl	8000308 <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 800052a:	2001      	movs	r0, #1
 800052c:	f7ff feec 	bl	8000308 <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 8000530:	203f      	movs	r0, #63	; 0x3f
 8000532:	f7ff fee9 	bl	8000308 <LCD_Write_Data>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 8000536:	203a      	movs	r0, #58	; 0x3a
 8000538:	f7ff fed8 	bl	80002ec <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 800053c:	2055      	movs	r0, #85	; 0x55
 800053e:	f7ff fee3 	bl	8000308 <LCD_Write_Data>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 8000542:	2011      	movs	r0, #17
 8000544:	f7ff fed2 	bl	80002ec <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 8000548:	4803      	ldr	r0, [pc, #12]	; (8000558 <LCD_REG_Config+0x230>)
 800054a:	f7ff fe73 	bl	8000234 <Delay>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 800054e:	2029      	movs	r0, #41	; 0x29
 8000550:	f7ff fecc 	bl	80002ec <LCD_Write_Cmd>
	
	
}
 8000554:	bf00      	nop
 8000556:	bd80      	pop	{r7, pc}
 8000558:	0002bffc 	.word	0x0002bffc

0800055c <LCD_OpenWindow>:



void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 800055c:	b590      	push	{r4, r7, lr}
 800055e:	b083      	sub	sp, #12
 8000560:	af00      	add	r7, sp, #0
 8000562:	4604      	mov	r4, r0
 8000564:	4608      	mov	r0, r1
 8000566:	4611      	mov	r1, r2
 8000568:	461a      	mov	r2, r3
 800056a:	4623      	mov	r3, r4
 800056c:	80fb      	strh	r3, [r7, #6]
 800056e:	4603      	mov	r3, r0
 8000570:	80bb      	strh	r3, [r7, #4]
 8000572:	460b      	mov	r3, r1
 8000574:	807b      	strh	r3, [r7, #2]
 8000576:	4613      	mov	r3, r2
 8000578:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 800057a:	202a      	movs	r0, #42	; 0x2a
 800057c:	f7ff feb6 	bl	80002ec <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 8000580:	88fb      	ldrh	r3, [r7, #6]
 8000582:	0a1b      	lsrs	r3, r3, #8
 8000584:	b29b      	uxth	r3, r3
 8000586:	4618      	mov	r0, r3
 8000588:	f7ff febe 	bl	8000308 <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 800058c:	88fb      	ldrh	r3, [r7, #6]
 800058e:	b2db      	uxtb	r3, r3
 8000590:	b29b      	uxth	r3, r3
 8000592:	4618      	mov	r0, r3
 8000594:	f7ff feb8 	bl	8000308 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 8000598:	88fa      	ldrh	r2, [r7, #6]
 800059a:	887b      	ldrh	r3, [r7, #2]
 800059c:	4413      	add	r3, r2
 800059e:	3b01      	subs	r3, #1
 80005a0:	121b      	asrs	r3, r3, #8
 80005a2:	b29b      	uxth	r3, r3
 80005a4:	4618      	mov	r0, r3
 80005a6:	f7ff feaf 	bl	8000308 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 80005aa:	88fa      	ldrh	r2, [r7, #6]
 80005ac:	887b      	ldrh	r3, [r7, #2]
 80005ae:	4413      	add	r3, r2
 80005b0:	b29b      	uxth	r3, r3
 80005b2:	3b01      	subs	r3, #1
 80005b4:	b29b      	uxth	r3, r3
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	b29b      	uxth	r3, r3
 80005ba:	4618      	mov	r0, r3
 80005bc:	f7ff fea4 	bl	8000308 <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 80005c0:	202b      	movs	r0, #43	; 0x2b
 80005c2:	f7ff fe93 	bl	80002ec <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 80005c6:	88bb      	ldrh	r3, [r7, #4]
 80005c8:	0a1b      	lsrs	r3, r3, #8
 80005ca:	b29b      	uxth	r3, r3
 80005cc:	4618      	mov	r0, r3
 80005ce:	f7ff fe9b 	bl	8000308 <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 80005d2:	88bb      	ldrh	r3, [r7, #4]
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	b29b      	uxth	r3, r3
 80005d8:	4618      	mov	r0, r3
 80005da:	f7ff fe95 	bl	8000308 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 80005de:	88ba      	ldrh	r2, [r7, #4]
 80005e0:	883b      	ldrh	r3, [r7, #0]
 80005e2:	4413      	add	r3, r2
 80005e4:	3b01      	subs	r3, #1
 80005e6:	121b      	asrs	r3, r3, #8
 80005e8:	b29b      	uxth	r3, r3
 80005ea:	4618      	mov	r0, r3
 80005ec:	f7ff fe8c 	bl	8000308 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 80005f0:	88ba      	ldrh	r2, [r7, #4]
 80005f2:	883b      	ldrh	r3, [r7, #0]
 80005f4:	4413      	add	r3, r2
 80005f6:	b29b      	uxth	r3, r3
 80005f8:	3b01      	subs	r3, #1
 80005fa:	b29b      	uxth	r3, r3
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	b29b      	uxth	r3, r3
 8000600:	4618      	mov	r0, r3
 8000602:	f7ff fe81 	bl	8000308 <LCD_Write_Data>
	
}
 8000606:	bf00      	nop
 8000608:	370c      	adds	r7, #12
 800060a:	46bd      	mov	sp, r7
 800060c:	bd90      	pop	{r4, r7, pc}

0800060e <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 800060e:	b580      	push	{r7, lr}
 8000610:	b084      	sub	sp, #16
 8000612:	af00      	add	r7, sp, #0
 8000614:	6078      	str	r0, [r7, #4]
 8000616:	460b      	mov	r3, r1
 8000618:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 800061a:	2300      	movs	r3, #0
 800061c:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 800061e:	202c      	movs	r0, #44	; 0x2c
 8000620:	f7ff fe64 	bl	80002ec <LCD_Write_Cmd>
		
	for ( i = 0; i < usPoint; i ++ )
 8000624:	2300      	movs	r3, #0
 8000626:	60fb      	str	r3, [r7, #12]
 8000628:	e006      	b.n	8000638 <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 800062a:	887b      	ldrh	r3, [r7, #2]
 800062c:	4618      	mov	r0, r3
 800062e:	f7ff fe6b 	bl	8000308 <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	3301      	adds	r3, #1
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	68fa      	ldr	r2, [r7, #12]
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	429a      	cmp	r2, r3
 800063e:	d3f4      	bcc.n	800062a <LCD_FillColor+0x1c>
		
}
 8000640:	bf00      	nop
 8000642:	bf00      	nop
 8000644:	3710      	adds	r7, #16
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}

0800064a <LCD_Clear>:




void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 800064a:	b590      	push	{r4, r7, lr}
 800064c:	b083      	sub	sp, #12
 800064e:	af00      	add	r7, sp, #0
 8000650:	4604      	mov	r4, r0
 8000652:	4608      	mov	r0, r1
 8000654:	4611      	mov	r1, r2
 8000656:	461a      	mov	r2, r3
 8000658:	4623      	mov	r3, r4
 800065a:	80fb      	strh	r3, [r7, #6]
 800065c:	4603      	mov	r3, r0
 800065e:	80bb      	strh	r3, [r7, #4]
 8000660:	460b      	mov	r3, r1
 8000662:	807b      	strh	r3, [r7, #2]
 8000664:	4613      	mov	r3, r2
 8000666:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 8000668:	883b      	ldrh	r3, [r7, #0]
 800066a:	887a      	ldrh	r2, [r7, #2]
 800066c:	88b9      	ldrh	r1, [r7, #4]
 800066e:	88f8      	ldrh	r0, [r7, #6]
 8000670:	f7ff ff74 	bl	800055c <LCD_OpenWindow>
	LCD_FillColor ( usWidth * usHeight, usColor );		
 8000674:	887b      	ldrh	r3, [r7, #2]
 8000676:	883a      	ldrh	r2, [r7, #0]
 8000678:	fb02 f303 	mul.w	r3, r2, r3
 800067c:	461a      	mov	r2, r3
 800067e:	8b3b      	ldrh	r3, [r7, #24]
 8000680:	4619      	mov	r1, r3
 8000682:	4610      	mov	r0, r2
 8000684:	f7ff ffc3 	bl	800060e <LCD_FillColor>
	
}
 8000688:	bf00      	nop
 800068a:	370c      	adds	r7, #12
 800068c:	46bd      	mov	sp, r7
 800068e:	bd90      	pop	{r4, r7, pc}

08000690 <LCD_DrawChar>:
	
}   


void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar )
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	80fb      	strh	r3, [r7, #6]
 800069a:	460b      	mov	r3, r1
 800069c:	80bb      	strh	r3, [r7, #4]
 800069e:	4613      	mov	r3, r2
 80006a0:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	
	ucRelativePositon = cChar - ' ';
 80006a2:	78fb      	ldrb	r3, [r7, #3]
 80006a4:	3b20      	subs	r3, #32
 80006a6:	733b      	strb	r3, [r7, #12]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 80006a8:	88b9      	ldrh	r1, [r7, #4]
 80006aa:	88f8      	ldrh	r0, [r7, #6]
 80006ac:	2310      	movs	r3, #16
 80006ae:	2208      	movs	r2, #8
 80006b0:	f7ff ff54 	bl	800055c <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 80006b4:	202c      	movs	r0, #44	; 0x2c
 80006b6:	f7ff fe19 	bl	80002ec <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 80006ba:	2300      	movs	r3, #0
 80006bc:	73bb      	strb	r3, [r7, #14]
 80006be:	e023      	b.n	8000708 <LCD_DrawChar+0x78>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 80006c0:	7b3a      	ldrb	r2, [r7, #12]
 80006c2:	7bbb      	ldrb	r3, [r7, #14]
 80006c4:	4914      	ldr	r1, [pc, #80]	; (8000718 <LCD_DrawChar+0x88>)
 80006c6:	0112      	lsls	r2, r2, #4
 80006c8:	440a      	add	r2, r1
 80006ca:	4413      	add	r3, r2
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	73fb      	strb	r3, [r7, #15]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 80006d0:	2300      	movs	r3, #0
 80006d2:	737b      	strb	r3, [r7, #13]
 80006d4:	e012      	b.n	80006fc <LCD_DrawChar+0x6c>
		{
			if ( ucTemp & 0x01 )
 80006d6:	7bfb      	ldrb	r3, [r7, #15]
 80006d8:	f003 0301 	and.w	r3, r3, #1
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d003      	beq.n	80006e8 <LCD_DrawChar+0x58>
				LCD_Write_Data ( 0x001F );
 80006e0:	201f      	movs	r0, #31
 80006e2:	f7ff fe11 	bl	8000308 <LCD_Write_Data>
 80006e6:	e003      	b.n	80006f0 <LCD_DrawChar+0x60>
			
			else
				LCD_Write_Data (  0xFFFF );								
 80006e8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80006ec:	f7ff fe0c 	bl	8000308 <LCD_Write_Data>
			
			ucTemp >>= 1;		
 80006f0:	7bfb      	ldrb	r3, [r7, #15]
 80006f2:	085b      	lsrs	r3, r3, #1
 80006f4:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 80006f6:	7b7b      	ldrb	r3, [r7, #13]
 80006f8:	3301      	adds	r3, #1
 80006fa:	737b      	strb	r3, [r7, #13]
 80006fc:	7b7b      	ldrb	r3, [r7, #13]
 80006fe:	2b07      	cmp	r3, #7
 8000700:	d9e9      	bls.n	80006d6 <LCD_DrawChar+0x46>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8000702:	7bbb      	ldrb	r3, [r7, #14]
 8000704:	3301      	adds	r3, #1
 8000706:	73bb      	strb	r3, [r7, #14]
 8000708:	7bbb      	ldrb	r3, [r7, #14]
 800070a:	2b0f      	cmp	r3, #15
 800070c:	d9d8      	bls.n	80006c0 <LCD_DrawChar+0x30>
			
		}
		
	}
	
}
 800070e:	bf00      	nop
 8000710:	bf00      	nop
 8000712:	3710      	adds	r7, #16
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	080045e8 	.word	0x080045e8

0800071c <LCD_DrawString>:




void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr )
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	603a      	str	r2, [r7, #0]
 8000726:	80fb      	strh	r3, [r7, #6]
 8000728:	460b      	mov	r3, r1
 800072a:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 800072c:	e01c      	b.n	8000768 <LCD_DrawString+0x4c>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 800072e:	88fb      	ldrh	r3, [r7, #6]
 8000730:	2be8      	cmp	r3, #232	; 0xe8
 8000732:	d904      	bls.n	800073e <LCD_DrawString+0x22>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8000734:	2300      	movs	r3, #0
 8000736:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 8000738:	88bb      	ldrh	r3, [r7, #4]
 800073a:	3310      	adds	r3, #16
 800073c:	80bb      	strh	r3, [r7, #4]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 800073e:	88bb      	ldrh	r3, [r7, #4]
 8000740:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8000744:	d903      	bls.n	800074e <LCD_DrawString+0x32>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8000746:	2300      	movs	r3, #0
 8000748:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 800074a:	2300      	movs	r3, #0
 800074c:	80bb      	strh	r3, [r7, #4]
		}
		
		LCD_DrawChar ( usC, usP, * pStr );
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	781a      	ldrb	r2, [r3, #0]
 8000752:	88b9      	ldrh	r1, [r7, #4]
 8000754:	88fb      	ldrh	r3, [r7, #6]
 8000756:	4618      	mov	r0, r3
 8000758:	f7ff ff9a 	bl	8000690 <LCD_DrawChar>
		
		pStr ++;
 800075c:	683b      	ldr	r3, [r7, #0]
 800075e:	3301      	adds	r3, #1
 8000760:	603b      	str	r3, [r7, #0]
		
		usC += WIDTH_EN_CHAR;
 8000762:	88fb      	ldrh	r3, [r7, #6]
 8000764:	3308      	adds	r3, #8
 8000766:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 8000768:	683b      	ldr	r3, [r7, #0]
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d1de      	bne.n	800072e <LCD_DrawString+0x12>
		
	}
	
}
 8000770:	bf00      	nop
 8000772:	bf00      	nop
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
	...

0800077c <sendJoystickSignalToSlave>:
static void MX_FSMC_Init(void);
static void MX_ADC1_Init(void);
static void MX_ADC2_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */
void sendJoystickSignalToSlave(){
 800077c:	b580      	push	{r7, lr}
 800077e:	b092      	sub	sp, #72	; 0x48
 8000780:	af00      	add	r7, sp, #0
	//get x axis
	HAL_ADC_Start(&hadc1);
 8000782:	4832      	ldr	r0, [pc, #200]	; (800084c <sendJoystickSignalToSlave+0xd0>)
 8000784:	f000 fe24 	bl	80013d0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1,1000);
 8000788:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800078c:	482f      	ldr	r0, [pc, #188]	; (800084c <sendJoystickSignalToSlave+0xd0>)
 800078e:	f000 fecd 	bl	800152c <HAL_ADC_PollForConversion>
	uint16_t adc1 = HAL_ADC_GetValue(&hadc1);
 8000792:	482e      	ldr	r0, [pc, #184]	; (800084c <sendJoystickSignalToSlave+0xd0>)
 8000794:	f000 ffd0 	bl	8001738 <HAL_ADC_GetValue>
 8000798:	4603      	mov	r3, r0
 800079a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	sprintf(adc1_dec, "%4d", adc1);
 800079e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80007a2:	461a      	mov	r2, r3
 80007a4:	492a      	ldr	r1, [pc, #168]	; (8000850 <sendJoystickSignalToSlave+0xd4>)
 80007a6:	482b      	ldr	r0, [pc, #172]	; (8000854 <sendJoystickSignalToSlave+0xd8>)
 80007a8:	f003 fa4e 	bl	8003c48 <siprintf>
	LCD_DrawString(120, 40, adc1_dec);
 80007ac:	4a29      	ldr	r2, [pc, #164]	; (8000854 <sendJoystickSignalToSlave+0xd8>)
 80007ae:	2128      	movs	r1, #40	; 0x28
 80007b0:	2078      	movs	r0, #120	; 0x78
 80007b2:	f7ff ffb3 	bl	800071c <LCD_DrawString>

	//get y-axis
	HAL_ADC_Start(&hadc2);
 80007b6:	4828      	ldr	r0, [pc, #160]	; (8000858 <sendJoystickSignalToSlave+0xdc>)
 80007b8:	f000 fe0a 	bl	80013d0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2,1000);
 80007bc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80007c0:	4825      	ldr	r0, [pc, #148]	; (8000858 <sendJoystickSignalToSlave+0xdc>)
 80007c2:	f000 feb3 	bl	800152c <HAL_ADC_PollForConversion>
	uint16_t adc2 = HAL_ADC_GetValue(&hadc2);
 80007c6:	4824      	ldr	r0, [pc, #144]	; (8000858 <sendJoystickSignalToSlave+0xdc>)
 80007c8:	f000 ffb6 	bl	8001738 <HAL_ADC_GetValue>
 80007cc:	4603      	mov	r3, r0
 80007ce:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	sprintf(adc2_dec, "%4d", adc2);
 80007d2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80007d6:	461a      	mov	r2, r3
 80007d8:	491d      	ldr	r1, [pc, #116]	; (8000850 <sendJoystickSignalToSlave+0xd4>)
 80007da:	4820      	ldr	r0, [pc, #128]	; (800085c <sendJoystickSignalToSlave+0xe0>)
 80007dc:	f003 fa34 	bl	8003c48 <siprintf>
	LCD_DrawString(120, 60, adc2_dec);
 80007e0:	4a1e      	ldr	r2, [pc, #120]	; (800085c <sendJoystickSignalToSlave+0xe0>)
 80007e2:	213c      	movs	r1, #60	; 0x3c
 80007e4:	2078      	movs	r0, #120	; 0x78
 80007e6:	f7ff ff99 	bl	800071c <LCD_DrawString>

	//combine x&y and send to slave
	char tx_dec[BUFFER_LEN] = {0};
 80007ea:	2300      	movs	r3, #0
 80007ec:	607b      	str	r3, [r7, #4]
 80007ee:	f107 0308 	add.w	r3, r7, #8
 80007f2:	223c      	movs	r2, #60	; 0x3c
 80007f4:	2100      	movs	r1, #0
 80007f6:	4618      	mov	r0, r3
 80007f8:	f003 fa1e 	bl	8003c38 <memset>
	strcpy(tx_dec,adc1_dec);
 80007fc:	1d3b      	adds	r3, r7, #4
 80007fe:	4915      	ldr	r1, [pc, #84]	; (8000854 <sendJoystickSignalToSlave+0xd8>)
 8000800:	4618      	mov	r0, r3
 8000802:	f003 fa50 	bl	8003ca6 <strcpy>
	strcat(tx_dec,",");
 8000806:	1d3b      	adds	r3, r7, #4
 8000808:	4618      	mov	r0, r3
 800080a:	f7ff fd0b 	bl	8000224 <strlen>
 800080e:	4603      	mov	r3, r0
 8000810:	461a      	mov	r2, r3
 8000812:	1d3b      	adds	r3, r7, #4
 8000814:	4413      	add	r3, r2
 8000816:	4912      	ldr	r1, [pc, #72]	; (8000860 <sendJoystickSignalToSlave+0xe4>)
 8000818:	461a      	mov	r2, r3
 800081a:	460b      	mov	r3, r1
 800081c:	881b      	ldrh	r3, [r3, #0]
 800081e:	8013      	strh	r3, [r2, #0]
	strcat(tx_dec,adc2_dec);
 8000820:	1d3b      	adds	r3, r7, #4
 8000822:	490e      	ldr	r1, [pc, #56]	; (800085c <sendJoystickSignalToSlave+0xe0>)
 8000824:	4618      	mov	r0, r3
 8000826:	f003 fa2f 	bl	8003c88 <strcat>
	LCD_DrawString(120, 80, tx_dec);
 800082a:	1d3b      	adds	r3, r7, #4
 800082c:	461a      	mov	r2, r3
 800082e:	2150      	movs	r1, #80	; 0x50
 8000830:	2078      	movs	r0, #120	; 0x78
 8000832:	f7ff ff73 	bl	800071c <LCD_DrawString>
	HAL_UART_Transmit(&huart1, tx_dec, BUFFER_LEN, 100);
 8000836:	1d39      	adds	r1, r7, #4
 8000838:	2364      	movs	r3, #100	; 0x64
 800083a:	2240      	movs	r2, #64	; 0x40
 800083c:	4809      	ldr	r0, [pc, #36]	; (8000864 <sendJoystickSignalToSlave+0xe8>)
 800083e:	f002 fc11 	bl	8003064 <HAL_UART_Transmit>
}
 8000842:	bf00      	nop
 8000844:	3748      	adds	r7, #72	; 0x48
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	2000008c 	.word	0x2000008c
 8000850:	08004580 	.word	0x08004580
 8000854:	20000178 	.word	0x20000178
 8000858:	200000bc 	.word	0x200000bc
 800085c:	20000180 	.word	0x20000180
 8000860:	08004584 	.word	0x08004584
 8000864:	200000ec 	.word	0x200000ec

08000868 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
    if(huart->Instance == huart1.Instance)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681a      	ldr	r2, [r3, #0]
 8000874:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <HAL_UART_RxCpltCallback+0x4c>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	429a      	cmp	r2, r3
 800087a:	d117      	bne.n	80008ac <HAL_UART_RxCpltCallback+0x44>
    {
    if(RX_BUFFER[0] == '1')
 800087c:	4b0e      	ldr	r3, [pc, #56]	; (80008b8 <HAL_UART_RxCpltCallback+0x50>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	2b31      	cmp	r3, #49	; 0x31
 8000882:	d105      	bne.n	8000890 <HAL_UART_RxCpltCallback+0x28>
    {
    	LCD_DrawString(120, 100, "1");
 8000884:	4a0d      	ldr	r2, [pc, #52]	; (80008bc <HAL_UART_RxCpltCallback+0x54>)
 8000886:	2164      	movs	r1, #100	; 0x64
 8000888:	2078      	movs	r0, #120	; 0x78
 800088a:	f7ff ff47 	bl	800071c <LCD_DrawString>
 800088e:	e008      	b.n	80008a2 <HAL_UART_RxCpltCallback+0x3a>
    }
    else if(RX_BUFFER[0] == '0')
 8000890:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <HAL_UART_RxCpltCallback+0x50>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	2b30      	cmp	r3, #48	; 0x30
 8000896:	d104      	bne.n	80008a2 <HAL_UART_RxCpltCallback+0x3a>
    {
    	LCD_DrawString(120, 100, "0");
 8000898:	4a09      	ldr	r2, [pc, #36]	; (80008c0 <HAL_UART_RxCpltCallback+0x58>)
 800089a:	2164      	movs	r1, #100	; 0x64
 800089c:	2078      	movs	r0, #120	; 0x78
 800089e:	f7ff ff3d 	bl	800071c <LCD_DrawString>
    }
    HAL_UART_Receive_IT(&huart1, RX_BUFFER, 1);
 80008a2:	2201      	movs	r2, #1
 80008a4:	4904      	ldr	r1, [pc, #16]	; (80008b8 <HAL_UART_RxCpltCallback+0x50>)
 80008a6:	4803      	ldr	r0, [pc, #12]	; (80008b4 <HAL_UART_RxCpltCallback+0x4c>)
 80008a8:	f002 fc6e 	bl	8003188 <HAL_UART_Receive_IT>
    }
}
 80008ac:	bf00      	nop
 80008ae:	3708      	adds	r7, #8
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	200000ec 	.word	0x200000ec
 80008b8:	20000188 	.word	0x20000188
 80008bc:	08004588 	.word	0x08004588
 80008c0:	0800458c 	.word	0x0800458c

080008c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008c8:	f000 fc12 	bl	80010f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008cc:	f000 f842 	bl	8000954 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008d0:	f000 f944 	bl	8000b5c <MX_GPIO_Init>
  MX_FSMC_Init();
 80008d4:	f000 f9d4 	bl	8000c80 <MX_FSMC_Init>
  MX_ADC1_Init();
 80008d8:	f000 f89a 	bl	8000a10 <MX_ADC1_Init>
  MX_ADC2_Init();
 80008dc:	f000 f8d6 	bl	8000a8c <MX_ADC2_Init>
  MX_USART1_UART_Init();
 80008e0:	f000 f912 	bl	8000b08 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  LCD_INIT();
 80008e4:	f7ff fcb7 	bl	8000256 <LCD_INIT>
  //receive signal from slave
  HAL_UART_Receive_IT(&huart1, RX_BUFFER, BUFFER_LEN);
 80008e8:	2240      	movs	r2, #64	; 0x40
 80008ea:	4912      	ldr	r1, [pc, #72]	; (8000934 <main+0x70>)
 80008ec:	4812      	ldr	r0, [pc, #72]	; (8000938 <main+0x74>)
 80008ee:	f002 fc4b 	bl	8003188 <HAL_UART_Receive_IT>

  // start ADC1, ADC2 for the joystick
  HAL_ADCEx_Calibration_Start(&hadc1);
 80008f2:	4812      	ldr	r0, [pc, #72]	; (800093c <main+0x78>)
 80008f4:	f001 f8c0 	bl	8001a78 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc2);
 80008f8:	4811      	ldr	r0, [pc, #68]	; (8000940 <main+0x7c>)
 80008fa:	f001 f8bd 	bl	8001a78 <HAL_ADCEx_Calibration_Start>

  LCD_DrawString(10, 40, "ADC X Value:");
 80008fe:	4a11      	ldr	r2, [pc, #68]	; (8000944 <main+0x80>)
 8000900:	2128      	movs	r1, #40	; 0x28
 8000902:	200a      	movs	r0, #10
 8000904:	f7ff ff0a 	bl	800071c <LCD_DrawString>
  LCD_DrawString(10, 60, "ADC2 Y Value:");
 8000908:	4a0f      	ldr	r2, [pc, #60]	; (8000948 <main+0x84>)
 800090a:	213c      	movs	r1, #60	; 0x3c
 800090c:	200a      	movs	r0, #10
 800090e:	f7ff ff05 	bl	800071c <LCD_DrawString>
  LCD_DrawString(10, 80, "Send X&Y:");
 8000912:	4a0e      	ldr	r2, [pc, #56]	; (800094c <main+0x88>)
 8000914:	2150      	movs	r1, #80	; 0x50
 8000916:	200a      	movs	r0, #10
 8000918:	f7ff ff00 	bl	800071c <LCD_DrawString>
  LCD_DrawString(10, 100, "Distance:");
 800091c:	4a0c      	ldr	r2, [pc, #48]	; (8000950 <main+0x8c>)
 800091e:	2164      	movs	r1, #100	; 0x64
 8000920:	200a      	movs	r0, #10
 8000922:	f7ff fefb 	bl	800071c <LCD_DrawString>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	sendJoystickSignalToSlave();
 8000926:	f7ff ff29 	bl	800077c <sendJoystickSignalToSlave>
    HAL_Delay(200);
 800092a:	20c8      	movs	r0, #200	; 0xc8
 800092c:	f000 fc42 	bl	80011b4 <HAL_Delay>
	sendJoystickSignalToSlave();
 8000930:	e7f9      	b.n	8000926 <main+0x62>
 8000932:	bf00      	nop
 8000934:	20000188 	.word	0x20000188
 8000938:	200000ec 	.word	0x200000ec
 800093c:	2000008c 	.word	0x2000008c
 8000940:	200000bc 	.word	0x200000bc
 8000944:	08004590 	.word	0x08004590
 8000948:	080045a0 	.word	0x080045a0
 800094c:	080045b0 	.word	0x080045b0
 8000950:	080045bc 	.word	0x080045bc

08000954 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b096      	sub	sp, #88	; 0x58
 8000958:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800095a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800095e:	2228      	movs	r2, #40	; 0x28
 8000960:	2100      	movs	r1, #0
 8000962:	4618      	mov	r0, r3
 8000964:	f003 f968 	bl	8003c38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000968:	f107 031c 	add.w	r3, r7, #28
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	605a      	str	r2, [r3, #4]
 8000972:	609a      	str	r2, [r3, #8]
 8000974:	60da      	str	r2, [r3, #12]
 8000976:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000978:	1d3b      	adds	r3, r7, #4
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	605a      	str	r2, [r3, #4]
 8000980:	609a      	str	r2, [r3, #8]
 8000982:	60da      	str	r2, [r3, #12]
 8000984:	611a      	str	r2, [r3, #16]
 8000986:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000988:	2301      	movs	r3, #1
 800098a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800098c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000990:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000992:	2300      	movs	r3, #0
 8000994:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000996:	2301      	movs	r3, #1
 8000998:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800099a:	2302      	movs	r3, #2
 800099c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800099e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009a2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80009a4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80009a8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009ae:	4618      	mov	r0, r3
 80009b0:	f001 fd0a 	bl	80023c8 <HAL_RCC_OscConfig>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80009ba:	f000 f9c5 	bl	8000d48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009be:	230f      	movs	r3, #15
 80009c0:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009c2:	2302      	movs	r3, #2
 80009c4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009c6:	2300      	movs	r3, #0
 80009c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009ce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009d0:	2300      	movs	r3, #0
 80009d2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009d4:	f107 031c 	add.w	r3, r7, #28
 80009d8:	2102      	movs	r1, #2
 80009da:	4618      	mov	r0, r3
 80009dc:	f001 ff76 	bl	80028cc <HAL_RCC_ClockConfig>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <SystemClock_Config+0x96>
  {
    Error_Handler();
 80009e6:	f000 f9af 	bl	8000d48 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80009ea:	2302      	movs	r3, #2
 80009ec:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80009ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009f2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009f4:	1d3b      	adds	r3, r7, #4
 80009f6:	4618      	mov	r0, r3
 80009f8:	f002 f900 	bl	8002bfc <HAL_RCCEx_PeriphCLKConfig>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000a02:	f000 f9a1 	bl	8000d48 <Error_Handler>
  }
}
 8000a06:	bf00      	nop
 8000a08:	3758      	adds	r7, #88	; 0x58
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
	...

08000a10 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b084      	sub	sp, #16
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a16:	1d3b      	adds	r3, r7, #4
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a20:	4b18      	ldr	r3, [pc, #96]	; (8000a84 <MX_ADC1_Init+0x74>)
 8000a22:	4a19      	ldr	r2, [pc, #100]	; (8000a88 <MX_ADC1_Init+0x78>)
 8000a24:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a26:	4b17      	ldr	r3, [pc, #92]	; (8000a84 <MX_ADC1_Init+0x74>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a2c:	4b15      	ldr	r3, [pc, #84]	; (8000a84 <MX_ADC1_Init+0x74>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a32:	4b14      	ldr	r3, [pc, #80]	; (8000a84 <MX_ADC1_Init+0x74>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a38:	4b12      	ldr	r3, [pc, #72]	; (8000a84 <MX_ADC1_Init+0x74>)
 8000a3a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000a3e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a40:	4b10      	ldr	r3, [pc, #64]	; (8000a84 <MX_ADC1_Init+0x74>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000a46:	4b0f      	ldr	r3, [pc, #60]	; (8000a84 <MX_ADC1_Init+0x74>)
 8000a48:	2201      	movs	r2, #1
 8000a4a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a4c:	480d      	ldr	r0, [pc, #52]	; (8000a84 <MX_ADC1_Init+0x74>)
 8000a4e:	f000 fbd5 	bl	80011fc <HAL_ADC_Init>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000a58:	f000 f976 	bl	8000d48 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000a5c:	2306      	movs	r3, #6
 8000a5e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a60:	2301      	movs	r3, #1
 8000a62:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000a64:	2300      	movs	r3, #0
 8000a66:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a68:	1d3b      	adds	r3, r7, #4
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4805      	ldr	r0, [pc, #20]	; (8000a84 <MX_ADC1_Init+0x74>)
 8000a6e:	f000 fe6f 	bl	8001750 <HAL_ADC_ConfigChannel>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000a78:	f000 f966 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a7c:	bf00      	nop
 8000a7e:	3710      	adds	r7, #16
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	2000008c 	.word	0x2000008c
 8000a88:	40012400 	.word	0x40012400

08000a8c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a92:	1d3b      	adds	r3, r7, #4
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	605a      	str	r2, [r3, #4]
 8000a9a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000a9c:	4b18      	ldr	r3, [pc, #96]	; (8000b00 <MX_ADC2_Init+0x74>)
 8000a9e:	4a19      	ldr	r2, [pc, #100]	; (8000b04 <MX_ADC2_Init+0x78>)
 8000aa0:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000aa2:	4b17      	ldr	r3, [pc, #92]	; (8000b00 <MX_ADC2_Init+0x74>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000aa8:	4b15      	ldr	r3, [pc, #84]	; (8000b00 <MX_ADC2_Init+0x74>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000aae:	4b14      	ldr	r3, [pc, #80]	; (8000b00 <MX_ADC2_Init+0x74>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ab4:	4b12      	ldr	r3, [pc, #72]	; (8000b00 <MX_ADC2_Init+0x74>)
 8000ab6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000aba:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000abc:	4b10      	ldr	r3, [pc, #64]	; (8000b00 <MX_ADC2_Init+0x74>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8000ac2:	4b0f      	ldr	r3, [pc, #60]	; (8000b00 <MX_ADC2_Init+0x74>)
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000ac8:	480d      	ldr	r0, [pc, #52]	; (8000b00 <MX_ADC2_Init+0x74>)
 8000aca:	f000 fb97 	bl	80011fc <HAL_ADC_Init>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000ad4:	f000 f938 	bl	8000d48 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000ad8:	2307      	movs	r3, #7
 8000ada:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000adc:	2301      	movs	r3, #1
 8000ade:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000ae4:	1d3b      	adds	r3, r7, #4
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4805      	ldr	r0, [pc, #20]	; (8000b00 <MX_ADC2_Init+0x74>)
 8000aea:	f000 fe31 	bl	8001750 <HAL_ADC_ConfigChannel>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8000af4:	f000 f928 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000af8:	bf00      	nop
 8000afa:	3710      	adds	r7, #16
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	200000bc 	.word	0x200000bc
 8000b04:	40012800 	.word	0x40012800

08000b08 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b0c:	4b11      	ldr	r3, [pc, #68]	; (8000b54 <MX_USART1_UART_Init+0x4c>)
 8000b0e:	4a12      	ldr	r2, [pc, #72]	; (8000b58 <MX_USART1_UART_Init+0x50>)
 8000b10:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000b12:	4b10      	ldr	r3, [pc, #64]	; (8000b54 <MX_USART1_UART_Init+0x4c>)
 8000b14:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b18:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b1a:	4b0e      	ldr	r3, [pc, #56]	; (8000b54 <MX_USART1_UART_Init+0x4c>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b20:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <MX_USART1_UART_Init+0x4c>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b26:	4b0b      	ldr	r3, [pc, #44]	; (8000b54 <MX_USART1_UART_Init+0x4c>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b2c:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <MX_USART1_UART_Init+0x4c>)
 8000b2e:	220c      	movs	r2, #12
 8000b30:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b32:	4b08      	ldr	r3, [pc, #32]	; (8000b54 <MX_USART1_UART_Init+0x4c>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b38:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <MX_USART1_UART_Init+0x4c>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b3e:	4805      	ldr	r0, [pc, #20]	; (8000b54 <MX_USART1_UART_Init+0x4c>)
 8000b40:	f002 fa43 	bl	8002fca <HAL_UART_Init>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000b4a:	f000 f8fd 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b4e:	bf00      	nop
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	200000ec 	.word	0x200000ec
 8000b58:	40013800 	.word	0x40013800

08000b5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08a      	sub	sp, #40	; 0x28
 8000b60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b62:	f107 0318 	add.w	r3, r7, #24
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
 8000b6a:	605a      	str	r2, [r3, #4]
 8000b6c:	609a      	str	r2, [r3, #8]
 8000b6e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b70:	4b3f      	ldr	r3, [pc, #252]	; (8000c70 <MX_GPIO_Init+0x114>)
 8000b72:	699b      	ldr	r3, [r3, #24]
 8000b74:	4a3e      	ldr	r2, [pc, #248]	; (8000c70 <MX_GPIO_Init+0x114>)
 8000b76:	f043 0310 	orr.w	r3, r3, #16
 8000b7a:	6193      	str	r3, [r2, #24]
 8000b7c:	4b3c      	ldr	r3, [pc, #240]	; (8000c70 <MX_GPIO_Init+0x114>)
 8000b7e:	699b      	ldr	r3, [r3, #24]
 8000b80:	f003 0310 	and.w	r3, r3, #16
 8000b84:	617b      	str	r3, [r7, #20]
 8000b86:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b88:	4b39      	ldr	r3, [pc, #228]	; (8000c70 <MX_GPIO_Init+0x114>)
 8000b8a:	699b      	ldr	r3, [r3, #24]
 8000b8c:	4a38      	ldr	r2, [pc, #224]	; (8000c70 <MX_GPIO_Init+0x114>)
 8000b8e:	f043 0304 	orr.w	r3, r3, #4
 8000b92:	6193      	str	r3, [r2, #24]
 8000b94:	4b36      	ldr	r3, [pc, #216]	; (8000c70 <MX_GPIO_Init+0x114>)
 8000b96:	699b      	ldr	r3, [r3, #24]
 8000b98:	f003 0304 	and.w	r3, r3, #4
 8000b9c:	613b      	str	r3, [r7, #16]
 8000b9e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ba0:	4b33      	ldr	r3, [pc, #204]	; (8000c70 <MX_GPIO_Init+0x114>)
 8000ba2:	699b      	ldr	r3, [r3, #24]
 8000ba4:	4a32      	ldr	r2, [pc, #200]	; (8000c70 <MX_GPIO_Init+0x114>)
 8000ba6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000baa:	6193      	str	r3, [r2, #24]
 8000bac:	4b30      	ldr	r3, [pc, #192]	; (8000c70 <MX_GPIO_Init+0x114>)
 8000bae:	699b      	ldr	r3, [r3, #24]
 8000bb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bb4:	60fb      	str	r3, [r7, #12]
 8000bb6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bb8:	4b2d      	ldr	r3, [pc, #180]	; (8000c70 <MX_GPIO_Init+0x114>)
 8000bba:	699b      	ldr	r3, [r3, #24]
 8000bbc:	4a2c      	ldr	r2, [pc, #176]	; (8000c70 <MX_GPIO_Init+0x114>)
 8000bbe:	f043 0320 	orr.w	r3, r3, #32
 8000bc2:	6193      	str	r3, [r2, #24]
 8000bc4:	4b2a      	ldr	r3, [pc, #168]	; (8000c70 <MX_GPIO_Init+0x114>)
 8000bc6:	699b      	ldr	r3, [r3, #24]
 8000bc8:	f003 0320 	and.w	r3, r3, #32
 8000bcc:	60bb      	str	r3, [r7, #8]
 8000bce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd0:	4b27      	ldr	r3, [pc, #156]	; (8000c70 <MX_GPIO_Init+0x114>)
 8000bd2:	699b      	ldr	r3, [r3, #24]
 8000bd4:	4a26      	ldr	r2, [pc, #152]	; (8000c70 <MX_GPIO_Init+0x114>)
 8000bd6:	f043 0308 	orr.w	r3, r3, #8
 8000bda:	6193      	str	r3, [r2, #24]
 8000bdc:	4b24      	ldr	r3, [pc, #144]	; (8000c70 <MX_GPIO_Init+0x114>)
 8000bde:	699b      	ldr	r3, [r3, #24]
 8000be0:	f003 0308 	and.w	r3, r3, #8
 8000be4:	607b      	str	r3, [r7, #4]
 8000be6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000be8:	2200      	movs	r2, #0
 8000bea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bee:	4821      	ldr	r0, [pc, #132]	; (8000c74 <MX_GPIO_Init+0x118>)
 8000bf0:	f001 fbd2 	bl	8002398 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	2120      	movs	r1, #32
 8000bf8:	481f      	ldr	r0, [pc, #124]	; (8000c78 <MX_GPIO_Init+0x11c>)
 8000bfa:	f001 fbcd 	bl	8002398 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	2140      	movs	r1, #64	; 0x40
 8000c02:	481d      	ldr	r0, [pc, #116]	; (8000c78 <MX_GPIO_Init+0x11c>)
 8000c04:	f001 fbc8 	bl	8002398 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	2102      	movs	r1, #2
 8000c0c:	481b      	ldr	r0, [pc, #108]	; (8000c7c <MX_GPIO_Init+0x120>)
 8000c0e:	f001 fbc3 	bl	8002398 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000c12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c20:	2303      	movs	r3, #3
 8000c22:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c24:	f107 0318 	add.w	r3, r7, #24
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4812      	ldr	r0, [pc, #72]	; (8000c74 <MX_GPIO_Init+0x118>)
 8000c2c:	f001 fa20 	bl	8002070 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000c30:	2360      	movs	r3, #96	; 0x60
 8000c32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c34:	2301      	movs	r3, #1
 8000c36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c40:	f107 0318 	add.w	r3, r7, #24
 8000c44:	4619      	mov	r1, r3
 8000c46:	480c      	ldr	r0, [pc, #48]	; (8000c78 <MX_GPIO_Init+0x11c>)
 8000c48:	f001 fa12 	bl	8002070 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c50:	2301      	movs	r3, #1
 8000c52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c58:	2303      	movs	r3, #3
 8000c5a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c5c:	f107 0318 	add.w	r3, r7, #24
 8000c60:	4619      	mov	r1, r3
 8000c62:	4806      	ldr	r0, [pc, #24]	; (8000c7c <MX_GPIO_Init+0x120>)
 8000c64:	f001 fa04 	bl	8002070 <HAL_GPIO_Init>

}
 8000c68:	bf00      	nop
 8000c6a:	3728      	adds	r7, #40	; 0x28
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	40021000 	.word	0x40021000
 8000c74:	40011400 	.word	0x40011400
 8000c78:	40010c00 	.word	0x40010c00
 8000c7c:	40011800 	.word	0x40011800

08000c80 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b088      	sub	sp, #32
 8000c84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000c86:	1d3b      	adds	r3, r7, #4
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	609a      	str	r2, [r3, #8]
 8000c90:	60da      	str	r2, [r3, #12]
 8000c92:	611a      	str	r2, [r3, #16]
 8000c94:	615a      	str	r2, [r3, #20]
 8000c96:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000c98:	4b28      	ldr	r3, [pc, #160]	; (8000d3c <MX_FSMC_Init+0xbc>)
 8000c9a:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000c9e:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000ca0:	4b26      	ldr	r3, [pc, #152]	; (8000d3c <MX_FSMC_Init+0xbc>)
 8000ca2:	4a27      	ldr	r2, [pc, #156]	; (8000d40 <MX_FSMC_Init+0xc0>)
 8000ca4:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000ca6:	4b25      	ldr	r3, [pc, #148]	; (8000d3c <MX_FSMC_Init+0xbc>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000cac:	4b23      	ldr	r3, [pc, #140]	; (8000d3c <MX_FSMC_Init+0xbc>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000cb2:	4b22      	ldr	r3, [pc, #136]	; (8000d3c <MX_FSMC_Init+0xbc>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000cb8:	4b20      	ldr	r3, [pc, #128]	; (8000d3c <MX_FSMC_Init+0xbc>)
 8000cba:	2210      	movs	r2, #16
 8000cbc:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000cbe:	4b1f      	ldr	r3, [pc, #124]	; (8000d3c <MX_FSMC_Init+0xbc>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000cc4:	4b1d      	ldr	r3, [pc, #116]	; (8000d3c <MX_FSMC_Init+0xbc>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000cca:	4b1c      	ldr	r3, [pc, #112]	; (8000d3c <MX_FSMC_Init+0xbc>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000cd0:	4b1a      	ldr	r3, [pc, #104]	; (8000d3c <MX_FSMC_Init+0xbc>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000cd6:	4b19      	ldr	r3, [pc, #100]	; (8000d3c <MX_FSMC_Init+0xbc>)
 8000cd8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000cdc:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000cde:	4b17      	ldr	r3, [pc, #92]	; (8000d3c <MX_FSMC_Init+0xbc>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8000ce4:	4b15      	ldr	r3, [pc, #84]	; (8000d3c <MX_FSMC_Init+0xbc>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000cea:	4b14      	ldr	r3, [pc, #80]	; (8000d3c <MX_FSMC_Init+0xbc>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000cf0:	4b12      	ldr	r3, [pc, #72]	; (8000d3c <MX_FSMC_Init+0xbc>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000cf6:	230f      	movs	r3, #15
 8000cf8:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8000cfa:	230f      	movs	r3, #15
 8000cfc:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8000cfe:	23ff      	movs	r3, #255	; 0xff
 8000d00:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8000d02:	230f      	movs	r3, #15
 8000d04:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000d06:	2310      	movs	r3, #16
 8000d08:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000d0a:	2311      	movs	r3, #17
 8000d0c:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000d12:	1d3b      	adds	r3, r7, #4
 8000d14:	2200      	movs	r2, #0
 8000d16:	4619      	mov	r1, r3
 8000d18:	4808      	ldr	r0, [pc, #32]	; (8000d3c <MX_FSMC_Init+0xbc>)
 8000d1a:	f002 f909 	bl	8002f30 <HAL_SRAM_Init>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 8000d24:	f000 f810 	bl	8000d48 <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8000d28:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <MX_FSMC_Init+0xc4>)
 8000d2a:	69db      	ldr	r3, [r3, #28]
 8000d2c:	4a05      	ldr	r2, [pc, #20]	; (8000d44 <MX_FSMC_Init+0xc4>)
 8000d2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d32:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000d34:	bf00      	nop
 8000d36:	3720      	adds	r7, #32
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	20000130 	.word	0x20000130
 8000d40:	a0000104 	.word	0xa0000104
 8000d44:	40010000 	.word	0x40010000

08000d48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d4c:	b672      	cpsid	i
}
 8000d4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d50:	e7fe      	b.n	8000d50 <Error_Handler+0x8>
	...

08000d54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b085      	sub	sp, #20
 8000d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d5a:	4b15      	ldr	r3, [pc, #84]	; (8000db0 <HAL_MspInit+0x5c>)
 8000d5c:	699b      	ldr	r3, [r3, #24]
 8000d5e:	4a14      	ldr	r2, [pc, #80]	; (8000db0 <HAL_MspInit+0x5c>)
 8000d60:	f043 0301 	orr.w	r3, r3, #1
 8000d64:	6193      	str	r3, [r2, #24]
 8000d66:	4b12      	ldr	r3, [pc, #72]	; (8000db0 <HAL_MspInit+0x5c>)
 8000d68:	699b      	ldr	r3, [r3, #24]
 8000d6a:	f003 0301 	and.w	r3, r3, #1
 8000d6e:	60bb      	str	r3, [r7, #8]
 8000d70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d72:	4b0f      	ldr	r3, [pc, #60]	; (8000db0 <HAL_MspInit+0x5c>)
 8000d74:	69db      	ldr	r3, [r3, #28]
 8000d76:	4a0e      	ldr	r2, [pc, #56]	; (8000db0 <HAL_MspInit+0x5c>)
 8000d78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d7c:	61d3      	str	r3, [r2, #28]
 8000d7e:	4b0c      	ldr	r3, [pc, #48]	; (8000db0 <HAL_MspInit+0x5c>)
 8000d80:	69db      	ldr	r3, [r3, #28]
 8000d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d86:	607b      	str	r3, [r7, #4]
 8000d88:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d8a:	4b0a      	ldr	r3, [pc, #40]	; (8000db4 <HAL_MspInit+0x60>)
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	4a04      	ldr	r2, [pc, #16]	; (8000db4 <HAL_MspInit+0x60>)
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000da6:	bf00      	nop
 8000da8:	3714      	adds	r7, #20
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bc80      	pop	{r7}
 8000dae:	4770      	bx	lr
 8000db0:	40021000 	.word	0x40021000
 8000db4:	40010000 	.word	0x40010000

08000db8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b08a      	sub	sp, #40	; 0x28
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc0:	f107 0318 	add.w	r3, r7, #24
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	605a      	str	r2, [r3, #4]
 8000dca:	609a      	str	r2, [r3, #8]
 8000dcc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a28      	ldr	r2, [pc, #160]	; (8000e74 <HAL_ADC_MspInit+0xbc>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d122      	bne.n	8000e1e <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000dd8:	4b27      	ldr	r3, [pc, #156]	; (8000e78 <HAL_ADC_MspInit+0xc0>)
 8000dda:	699b      	ldr	r3, [r3, #24]
 8000ddc:	4a26      	ldr	r2, [pc, #152]	; (8000e78 <HAL_ADC_MspInit+0xc0>)
 8000dde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000de2:	6193      	str	r3, [r2, #24]
 8000de4:	4b24      	ldr	r3, [pc, #144]	; (8000e78 <HAL_ADC_MspInit+0xc0>)
 8000de6:	699b      	ldr	r3, [r3, #24]
 8000de8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000dec:	617b      	str	r3, [r7, #20]
 8000dee:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df0:	4b21      	ldr	r3, [pc, #132]	; (8000e78 <HAL_ADC_MspInit+0xc0>)
 8000df2:	699b      	ldr	r3, [r3, #24]
 8000df4:	4a20      	ldr	r2, [pc, #128]	; (8000e78 <HAL_ADC_MspInit+0xc0>)
 8000df6:	f043 0304 	orr.w	r3, r3, #4
 8000dfa:	6193      	str	r3, [r2, #24]
 8000dfc:	4b1e      	ldr	r3, [pc, #120]	; (8000e78 <HAL_ADC_MspInit+0xc0>)
 8000dfe:	699b      	ldr	r3, [r3, #24]
 8000e00:	f003 0304 	and.w	r3, r3, #4
 8000e04:	613b      	str	r3, [r7, #16]
 8000e06:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e08:	2340      	movs	r3, #64	; 0x40
 8000e0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e0c:	2303      	movs	r3, #3
 8000e0e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e10:	f107 0318 	add.w	r3, r7, #24
 8000e14:	4619      	mov	r1, r3
 8000e16:	4819      	ldr	r0, [pc, #100]	; (8000e7c <HAL_ADC_MspInit+0xc4>)
 8000e18:	f001 f92a 	bl	8002070 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000e1c:	e026      	b.n	8000e6c <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a17      	ldr	r2, [pc, #92]	; (8000e80 <HAL_ADC_MspInit+0xc8>)
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d121      	bne.n	8000e6c <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000e28:	4b13      	ldr	r3, [pc, #76]	; (8000e78 <HAL_ADC_MspInit+0xc0>)
 8000e2a:	699b      	ldr	r3, [r3, #24]
 8000e2c:	4a12      	ldr	r2, [pc, #72]	; (8000e78 <HAL_ADC_MspInit+0xc0>)
 8000e2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e32:	6193      	str	r3, [r2, #24]
 8000e34:	4b10      	ldr	r3, [pc, #64]	; (8000e78 <HAL_ADC_MspInit+0xc0>)
 8000e36:	699b      	ldr	r3, [r3, #24]
 8000e38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e3c:	60fb      	str	r3, [r7, #12]
 8000e3e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e40:	4b0d      	ldr	r3, [pc, #52]	; (8000e78 <HAL_ADC_MspInit+0xc0>)
 8000e42:	699b      	ldr	r3, [r3, #24]
 8000e44:	4a0c      	ldr	r2, [pc, #48]	; (8000e78 <HAL_ADC_MspInit+0xc0>)
 8000e46:	f043 0304 	orr.w	r3, r3, #4
 8000e4a:	6193      	str	r3, [r2, #24]
 8000e4c:	4b0a      	ldr	r3, [pc, #40]	; (8000e78 <HAL_ADC_MspInit+0xc0>)
 8000e4e:	699b      	ldr	r3, [r3, #24]
 8000e50:	f003 0304 	and.w	r3, r3, #4
 8000e54:	60bb      	str	r3, [r7, #8]
 8000e56:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000e58:	2380      	movs	r3, #128	; 0x80
 8000e5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e5c:	2303      	movs	r3, #3
 8000e5e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e60:	f107 0318 	add.w	r3, r7, #24
 8000e64:	4619      	mov	r1, r3
 8000e66:	4805      	ldr	r0, [pc, #20]	; (8000e7c <HAL_ADC_MspInit+0xc4>)
 8000e68:	f001 f902 	bl	8002070 <HAL_GPIO_Init>
}
 8000e6c:	bf00      	nop
 8000e6e:	3728      	adds	r7, #40	; 0x28
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	40012400 	.word	0x40012400
 8000e78:	40021000 	.word	0x40021000
 8000e7c:	40010800 	.word	0x40010800
 8000e80:	40012800 	.word	0x40012800

08000e84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b088      	sub	sp, #32
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8c:	f107 0310 	add.w	r3, r7, #16
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	605a      	str	r2, [r3, #4]
 8000e96:	609a      	str	r2, [r3, #8]
 8000e98:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a20      	ldr	r2, [pc, #128]	; (8000f20 <HAL_UART_MspInit+0x9c>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d139      	bne.n	8000f18 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ea4:	4b1f      	ldr	r3, [pc, #124]	; (8000f24 <HAL_UART_MspInit+0xa0>)
 8000ea6:	699b      	ldr	r3, [r3, #24]
 8000ea8:	4a1e      	ldr	r2, [pc, #120]	; (8000f24 <HAL_UART_MspInit+0xa0>)
 8000eaa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eae:	6193      	str	r3, [r2, #24]
 8000eb0:	4b1c      	ldr	r3, [pc, #112]	; (8000f24 <HAL_UART_MspInit+0xa0>)
 8000eb2:	699b      	ldr	r3, [r3, #24]
 8000eb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eb8:	60fb      	str	r3, [r7, #12]
 8000eba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ebc:	4b19      	ldr	r3, [pc, #100]	; (8000f24 <HAL_UART_MspInit+0xa0>)
 8000ebe:	699b      	ldr	r3, [r3, #24]
 8000ec0:	4a18      	ldr	r2, [pc, #96]	; (8000f24 <HAL_UART_MspInit+0xa0>)
 8000ec2:	f043 0304 	orr.w	r3, r3, #4
 8000ec6:	6193      	str	r3, [r2, #24]
 8000ec8:	4b16      	ldr	r3, [pc, #88]	; (8000f24 <HAL_UART_MspInit+0xa0>)
 8000eca:	699b      	ldr	r3, [r3, #24]
 8000ecc:	f003 0304 	and.w	r3, r3, #4
 8000ed0:	60bb      	str	r3, [r7, #8]
 8000ed2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ed4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ed8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eda:	2302      	movs	r3, #2
 8000edc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ede:	2303      	movs	r3, #3
 8000ee0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee2:	f107 0310 	add.w	r3, r7, #16
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	480f      	ldr	r0, [pc, #60]	; (8000f28 <HAL_UART_MspInit+0xa4>)
 8000eea:	f001 f8c1 	bl	8002070 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000eee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ef2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000efc:	f107 0310 	add.w	r3, r7, #16
 8000f00:	4619      	mov	r1, r3
 8000f02:	4809      	ldr	r0, [pc, #36]	; (8000f28 <HAL_UART_MspInit+0xa4>)
 8000f04:	f001 f8b4 	bl	8002070 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000f08:	2200      	movs	r2, #0
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	2025      	movs	r0, #37	; 0x25
 8000f0e:	f000 ff36 	bl	8001d7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f12:	2025      	movs	r0, #37	; 0x25
 8000f14:	f000 ff4f 	bl	8001db6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000f18:	bf00      	nop
 8000f1a:	3720      	adds	r7, #32
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	40013800 	.word	0x40013800
 8000f24:	40021000 	.word	0x40021000
 8000f28:	40010800 	.word	0x40010800

08000f2c <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b086      	sub	sp, #24
 8000f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8000f32:	f107 0308 	add.w	r3, r7, #8
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
 8000f3a:	605a      	str	r2, [r3, #4]
 8000f3c:	609a      	str	r2, [r3, #8]
 8000f3e:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 8000f40:	4b18      	ldr	r3, [pc, #96]	; (8000fa4 <HAL_FSMC_MspInit+0x78>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d129      	bne.n	8000f9c <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 8000f48:	4b16      	ldr	r3, [pc, #88]	; (8000fa4 <HAL_FSMC_MspInit+0x78>)
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8000f4e:	4b16      	ldr	r3, [pc, #88]	; (8000fa8 <HAL_FSMC_MspInit+0x7c>)
 8000f50:	695b      	ldr	r3, [r3, #20]
 8000f52:	4a15      	ldr	r2, [pc, #84]	; (8000fa8 <HAL_FSMC_MspInit+0x7c>)
 8000f54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f58:	6153      	str	r3, [r2, #20]
 8000f5a:	4b13      	ldr	r3, [pc, #76]	; (8000fa8 <HAL_FSMC_MspInit+0x7c>)
 8000f5c:	695b      	ldr	r3, [r3, #20]
 8000f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f62:	607b      	str	r3, [r7, #4]
 8000f64:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000f66:	f64f 7380 	movw	r3, #65408	; 0xff80
 8000f6a:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f70:	2303      	movs	r3, #3
 8000f72:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f74:	f107 0308 	add.w	r3, r7, #8
 8000f78:	4619      	mov	r1, r3
 8000f7a:	480c      	ldr	r0, [pc, #48]	; (8000fac <HAL_FSMC_MspInit+0x80>)
 8000f7c:	f001 f878 	bl	8002070 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000f80:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 8000f84:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f86:	2302      	movs	r3, #2
 8000f88:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f8e:	f107 0308 	add.w	r3, r7, #8
 8000f92:	4619      	mov	r1, r3
 8000f94:	4806      	ldr	r0, [pc, #24]	; (8000fb0 <HAL_FSMC_MspInit+0x84>)
 8000f96:	f001 f86b 	bl	8002070 <HAL_GPIO_Init>
 8000f9a:	e000      	b.n	8000f9e <HAL_FSMC_MspInit+0x72>
    return;
 8000f9c:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8000f9e:	3718      	adds	r7, #24
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	200001c8 	.word	0x200001c8
 8000fa8:	40021000 	.word	0x40021000
 8000fac:	40011800 	.word	0x40011800
 8000fb0:	40011400 	.word	0x40011400

08000fb4 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000fbc:	f7ff ffb6 	bl	8000f2c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000fc0:	bf00      	nop
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fcc:	e7fe      	b.n	8000fcc <NMI_Handler+0x4>

08000fce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fd2:	e7fe      	b.n	8000fd2 <HardFault_Handler+0x4>

08000fd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fd8:	e7fe      	b.n	8000fd8 <MemManage_Handler+0x4>

08000fda <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fde:	e7fe      	b.n	8000fde <BusFault_Handler+0x4>

08000fe0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fe4:	e7fe      	b.n	8000fe4 <UsageFault_Handler+0x4>

08000fe6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fea:	bf00      	nop
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bc80      	pop	{r7}
 8000ff0:	4770      	bx	lr

08000ff2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bc80      	pop	{r7}
 8000ffc:	4770      	bx	lr

08000ffe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ffe:	b480      	push	{r7}
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	46bd      	mov	sp, r7
 8001006:	bc80      	pop	{r7}
 8001008:	4770      	bx	lr

0800100a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800100e:	f000 f8b5 	bl	800117c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
	...

08001018 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800101c:	4802      	ldr	r0, [pc, #8]	; (8001028 <USART1_IRQHandler+0x10>)
 800101e:	f002 f8e3 	bl	80031e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	200000ec 	.word	0x200000ec

0800102c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b086      	sub	sp, #24
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001034:	4a14      	ldr	r2, [pc, #80]	; (8001088 <_sbrk+0x5c>)
 8001036:	4b15      	ldr	r3, [pc, #84]	; (800108c <_sbrk+0x60>)
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001040:	4b13      	ldr	r3, [pc, #76]	; (8001090 <_sbrk+0x64>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d102      	bne.n	800104e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001048:	4b11      	ldr	r3, [pc, #68]	; (8001090 <_sbrk+0x64>)
 800104a:	4a12      	ldr	r2, [pc, #72]	; (8001094 <_sbrk+0x68>)
 800104c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800104e:	4b10      	ldr	r3, [pc, #64]	; (8001090 <_sbrk+0x64>)
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4413      	add	r3, r2
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	429a      	cmp	r2, r3
 800105a:	d207      	bcs.n	800106c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800105c:	f002 fdc2 	bl	8003be4 <__errno>
 8001060:	4603      	mov	r3, r0
 8001062:	220c      	movs	r2, #12
 8001064:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001066:	f04f 33ff 	mov.w	r3, #4294967295
 800106a:	e009      	b.n	8001080 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800106c:	4b08      	ldr	r3, [pc, #32]	; (8001090 <_sbrk+0x64>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001072:	4b07      	ldr	r3, [pc, #28]	; (8001090 <_sbrk+0x64>)
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4413      	add	r3, r2
 800107a:	4a05      	ldr	r2, [pc, #20]	; (8001090 <_sbrk+0x64>)
 800107c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800107e:	68fb      	ldr	r3, [r7, #12]
}
 8001080:	4618      	mov	r0, r3
 8001082:	3718      	adds	r7, #24
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	20010000 	.word	0x20010000
 800108c:	00000400 	.word	0x00000400
 8001090:	200001cc 	.word	0x200001cc
 8001094:	200001e8 	.word	0x200001e8

08001098 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800109c:	bf00      	nop
 800109e:	46bd      	mov	sp, r7
 80010a0:	bc80      	pop	{r7}
 80010a2:	4770      	bx	lr

080010a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010a4:	480c      	ldr	r0, [pc, #48]	; (80010d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010a6:	490d      	ldr	r1, [pc, #52]	; (80010dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010a8:	4a0d      	ldr	r2, [pc, #52]	; (80010e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010ac:	e002      	b.n	80010b4 <LoopCopyDataInit>

080010ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010b2:	3304      	adds	r3, #4

080010b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010b8:	d3f9      	bcc.n	80010ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ba:	4a0a      	ldr	r2, [pc, #40]	; (80010e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010bc:	4c0a      	ldr	r4, [pc, #40]	; (80010e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010c0:	e001      	b.n	80010c6 <LoopFillZerobss>

080010c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010c4:	3204      	adds	r2, #4

080010c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010c8:	d3fb      	bcc.n	80010c2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80010ca:	f7ff ffe5 	bl	8001098 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010ce:	f002 fd8f 	bl	8003bf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010d2:	f7ff fbf7 	bl	80008c4 <main>
  bx lr
 80010d6:	4770      	bx	lr
  ldr r0, =_sdata
 80010d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010dc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80010e0:	08004c2c 	.word	0x08004c2c
  ldr r2, =_sbss
 80010e4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80010e8:	200001e4 	.word	0x200001e4

080010ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010ec:	e7fe      	b.n	80010ec <ADC1_2_IRQHandler>
	...

080010f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010f4:	4b08      	ldr	r3, [pc, #32]	; (8001118 <HAL_Init+0x28>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a07      	ldr	r2, [pc, #28]	; (8001118 <HAL_Init+0x28>)
 80010fa:	f043 0310 	orr.w	r3, r3, #16
 80010fe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001100:	2003      	movs	r0, #3
 8001102:	f000 fe31 	bl	8001d68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001106:	200f      	movs	r0, #15
 8001108:	f000 f808 	bl	800111c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800110c:	f7ff fe22 	bl	8000d54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001110:	2300      	movs	r3, #0
}
 8001112:	4618      	mov	r0, r3
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40022000 	.word	0x40022000

0800111c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001124:	4b12      	ldr	r3, [pc, #72]	; (8001170 <HAL_InitTick+0x54>)
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	4b12      	ldr	r3, [pc, #72]	; (8001174 <HAL_InitTick+0x58>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	4619      	mov	r1, r3
 800112e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001132:	fbb3 f3f1 	udiv	r3, r3, r1
 8001136:	fbb2 f3f3 	udiv	r3, r2, r3
 800113a:	4618      	mov	r0, r3
 800113c:	f000 fe49 	bl	8001dd2 <HAL_SYSTICK_Config>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	e00e      	b.n	8001168 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2b0f      	cmp	r3, #15
 800114e:	d80a      	bhi.n	8001166 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001150:	2200      	movs	r2, #0
 8001152:	6879      	ldr	r1, [r7, #4]
 8001154:	f04f 30ff 	mov.w	r0, #4294967295
 8001158:	f000 fe11 	bl	8001d7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800115c:	4a06      	ldr	r2, [pc, #24]	; (8001178 <HAL_InitTick+0x5c>)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001162:	2300      	movs	r3, #0
 8001164:	e000      	b.n	8001168 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
}
 8001168:	4618      	mov	r0, r3
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	20000000 	.word	0x20000000
 8001174:	20000008 	.word	0x20000008
 8001178:	20000004 	.word	0x20000004

0800117c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001180:	4b05      	ldr	r3, [pc, #20]	; (8001198 <HAL_IncTick+0x1c>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	461a      	mov	r2, r3
 8001186:	4b05      	ldr	r3, [pc, #20]	; (800119c <HAL_IncTick+0x20>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4413      	add	r3, r2
 800118c:	4a03      	ldr	r2, [pc, #12]	; (800119c <HAL_IncTick+0x20>)
 800118e:	6013      	str	r3, [r2, #0]
}
 8001190:	bf00      	nop
 8001192:	46bd      	mov	sp, r7
 8001194:	bc80      	pop	{r7}
 8001196:	4770      	bx	lr
 8001198:	20000008 	.word	0x20000008
 800119c:	200001d0 	.word	0x200001d0

080011a0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  return uwTick;
 80011a4:	4b02      	ldr	r3, [pc, #8]	; (80011b0 <HAL_GetTick+0x10>)
 80011a6:	681b      	ldr	r3, [r3, #0]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bc80      	pop	{r7}
 80011ae:	4770      	bx	lr
 80011b0:	200001d0 	.word	0x200001d0

080011b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011bc:	f7ff fff0 	bl	80011a0 <HAL_GetTick>
 80011c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011cc:	d005      	beq.n	80011da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011ce:	4b0a      	ldr	r3, [pc, #40]	; (80011f8 <HAL_Delay+0x44>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	461a      	mov	r2, r3
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	4413      	add	r3, r2
 80011d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011da:	bf00      	nop
 80011dc:	f7ff ffe0 	bl	80011a0 <HAL_GetTick>
 80011e0:	4602      	mov	r2, r0
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	68fa      	ldr	r2, [r7, #12]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d8f7      	bhi.n	80011dc <HAL_Delay+0x28>
  {
  }
}
 80011ec:	bf00      	nop
 80011ee:	bf00      	nop
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	20000008 	.word	0x20000008

080011fc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b086      	sub	sp, #24
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001204:	2300      	movs	r3, #0
 8001206:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001208:	2300      	movs	r3, #0
 800120a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800120c:	2300      	movs	r3, #0
 800120e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001210:	2300      	movs	r3, #0
 8001212:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d101      	bne.n	800121e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	e0ce      	b.n	80013bc <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001228:	2b00      	cmp	r3, #0
 800122a:	d109      	bne.n	8001240 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2200      	movs	r2, #0
 8001230:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2200      	movs	r2, #0
 8001236:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f7ff fdbc 	bl	8000db8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f000 fbd7 	bl	80019f4 <ADC_ConversionStop_Disable>
 8001246:	4603      	mov	r3, r0
 8001248:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800124e:	f003 0310 	and.w	r3, r3, #16
 8001252:	2b00      	cmp	r3, #0
 8001254:	f040 80a9 	bne.w	80013aa <HAL_ADC_Init+0x1ae>
 8001258:	7dfb      	ldrb	r3, [r7, #23]
 800125a:	2b00      	cmp	r3, #0
 800125c:	f040 80a5 	bne.w	80013aa <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001264:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001268:	f023 0302 	bic.w	r3, r3, #2
 800126c:	f043 0202 	orr.w	r2, r3, #2
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4951      	ldr	r1, [pc, #324]	; (80013c4 <HAL_ADC_Init+0x1c8>)
 800127e:	428b      	cmp	r3, r1
 8001280:	d10a      	bne.n	8001298 <HAL_ADC_Init+0x9c>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	69db      	ldr	r3, [r3, #28]
 8001286:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800128a:	d002      	beq.n	8001292 <HAL_ADC_Init+0x96>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	69db      	ldr	r3, [r3, #28]
 8001290:	e004      	b.n	800129c <HAL_ADC_Init+0xa0>
 8001292:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001296:	e001      	b.n	800129c <HAL_ADC_Init+0xa0>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800129c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	7b1b      	ldrb	r3, [r3, #12]
 80012a2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80012a4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80012a6:	68ba      	ldr	r2, [r7, #8]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012b4:	d003      	beq.n	80012be <HAL_ADC_Init+0xc2>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d102      	bne.n	80012c4 <HAL_ADC_Init+0xc8>
 80012be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012c2:	e000      	b.n	80012c6 <HAL_ADC_Init+0xca>
 80012c4:	2300      	movs	r3, #0
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	7d1b      	ldrb	r3, [r3, #20]
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d119      	bne.n	8001308 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	7b1b      	ldrb	r3, [r3, #12]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d109      	bne.n	80012f0 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	699b      	ldr	r3, [r3, #24]
 80012e0:	3b01      	subs	r3, #1
 80012e2:	035a      	lsls	r2, r3, #13
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80012ec:	613b      	str	r3, [r7, #16]
 80012ee:	e00b      	b.n	8001308 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012f4:	f043 0220 	orr.w	r2, r3, #32
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001300:	f043 0201 	orr.w	r2, r3, #1
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	430a      	orrs	r2, r1
 800131a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	689a      	ldr	r2, [r3, #8]
 8001322:	4b29      	ldr	r3, [pc, #164]	; (80013c8 <HAL_ADC_Init+0x1cc>)
 8001324:	4013      	ands	r3, r2
 8001326:	687a      	ldr	r2, [r7, #4]
 8001328:	6812      	ldr	r2, [r2, #0]
 800132a:	68b9      	ldr	r1, [r7, #8]
 800132c:	430b      	orrs	r3, r1
 800132e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001338:	d003      	beq.n	8001342 <HAL_ADC_Init+0x146>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	2b01      	cmp	r3, #1
 8001340:	d104      	bne.n	800134c <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	691b      	ldr	r3, [r3, #16]
 8001346:	3b01      	subs	r3, #1
 8001348:	051b      	lsls	r3, r3, #20
 800134a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001352:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	68fa      	ldr	r2, [r7, #12]
 800135c:	430a      	orrs	r2, r1
 800135e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	689a      	ldr	r2, [r3, #8]
 8001366:	4b19      	ldr	r3, [pc, #100]	; (80013cc <HAL_ADC_Init+0x1d0>)
 8001368:	4013      	ands	r3, r2
 800136a:	68ba      	ldr	r2, [r7, #8]
 800136c:	429a      	cmp	r2, r3
 800136e:	d10b      	bne.n	8001388 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2200      	movs	r2, #0
 8001374:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800137a:	f023 0303 	bic.w	r3, r3, #3
 800137e:	f043 0201 	orr.w	r2, r3, #1
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001386:	e018      	b.n	80013ba <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800138c:	f023 0312 	bic.w	r3, r3, #18
 8001390:	f043 0210 	orr.w	r2, r3, #16
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800139c:	f043 0201 	orr.w	r2, r3, #1
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80013a4:	2301      	movs	r3, #1
 80013a6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80013a8:	e007      	b.n	80013ba <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ae:	f043 0210 	orr.w	r2, r3, #16
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80013ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3718      	adds	r7, #24
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	40013c00 	.word	0x40013c00
 80013c8:	ffe1f7fd 	.word	0xffe1f7fd
 80013cc:	ff1f0efe 	.word	0xff1f0efe

080013d0 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013d8:	2300      	movs	r3, #0
 80013da:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d101      	bne.n	80013ea <HAL_ADC_Start+0x1a>
 80013e6:	2302      	movs	r3, #2
 80013e8:	e098      	b.n	800151c <HAL_ADC_Start+0x14c>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2201      	movs	r2, #1
 80013ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f000 faa4 	bl	8001940 <ADC_Enable>
 80013f8:	4603      	mov	r3, r0
 80013fa:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80013fc:	7bfb      	ldrb	r3, [r7, #15]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	f040 8087 	bne.w	8001512 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001408:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800140c:	f023 0301 	bic.w	r3, r3, #1
 8001410:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a41      	ldr	r2, [pc, #260]	; (8001524 <HAL_ADC_Start+0x154>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d105      	bne.n	800142e <HAL_ADC_Start+0x5e>
 8001422:	4b41      	ldr	r3, [pc, #260]	; (8001528 <HAL_ADC_Start+0x158>)
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d115      	bne.n	800145a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001432:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001444:	2b00      	cmp	r3, #0
 8001446:	d026      	beq.n	8001496 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800144c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001450:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001458:	e01d      	b.n	8001496 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800145e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a2f      	ldr	r2, [pc, #188]	; (8001528 <HAL_ADC_Start+0x158>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d004      	beq.n	800147a <HAL_ADC_Start+0xaa>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a2b      	ldr	r2, [pc, #172]	; (8001524 <HAL_ADC_Start+0x154>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d10d      	bne.n	8001496 <HAL_ADC_Start+0xc6>
 800147a:	4b2b      	ldr	r3, [pc, #172]	; (8001528 <HAL_ADC_Start+0x158>)
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001482:	2b00      	cmp	r3, #0
 8001484:	d007      	beq.n	8001496 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800148a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800148e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800149a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d006      	beq.n	80014b0 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014a6:	f023 0206 	bic.w	r2, r3, #6
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	62da      	str	r2, [r3, #44]	; 0x2c
 80014ae:	e002      	b.n	80014b6 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2200      	movs	r2, #0
 80014b4:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2200      	movs	r2, #0
 80014ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f06f 0202 	mvn.w	r2, #2
 80014c6:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80014d2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80014d6:	d113      	bne.n	8001500 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80014dc:	4a11      	ldr	r2, [pc, #68]	; (8001524 <HAL_ADC_Start+0x154>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d105      	bne.n	80014ee <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80014e2:	4b11      	ldr	r3, [pc, #68]	; (8001528 <HAL_ADC_Start+0x158>)
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d108      	bne.n	8001500 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	689a      	ldr	r2, [r3, #8]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80014fc:	609a      	str	r2, [r3, #8]
 80014fe:	e00c      	b.n	800151a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	689a      	ldr	r2, [r3, #8]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	e003      	b.n	800151a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2200      	movs	r2, #0
 8001516:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800151a:	7bfb      	ldrb	r3, [r7, #15]
}
 800151c:	4618      	mov	r0, r3
 800151e:	3710      	adds	r7, #16
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	40012800 	.word	0x40012800
 8001528:	40012400 	.word	0x40012400

0800152c <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800152c:	b590      	push	{r4, r7, lr}
 800152e:	b087      	sub	sp, #28
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001536:	2300      	movs	r3, #0
 8001538:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800153a:	2300      	movs	r3, #0
 800153c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800153e:	2300      	movs	r3, #0
 8001540:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001542:	f7ff fe2d 	bl	80011a0 <HAL_GetTick>
 8001546:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001552:	2b00      	cmp	r3, #0
 8001554:	d00b      	beq.n	800156e <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800155a:	f043 0220 	orr.w	r2, r3, #32
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2200      	movs	r2, #0
 8001566:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e0d3      	b.n	8001716 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001578:	2b00      	cmp	r3, #0
 800157a:	d131      	bne.n	80015e0 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001582:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001586:	2b00      	cmp	r3, #0
 8001588:	d12a      	bne.n	80015e0 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800158a:	e021      	b.n	80015d0 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001592:	d01d      	beq.n	80015d0 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d007      	beq.n	80015aa <HAL_ADC_PollForConversion+0x7e>
 800159a:	f7ff fe01 	bl	80011a0 <HAL_GetTick>
 800159e:	4602      	mov	r2, r0
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	683a      	ldr	r2, [r7, #0]
 80015a6:	429a      	cmp	r2, r3
 80015a8:	d212      	bcs.n	80015d0 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 0302 	and.w	r3, r3, #2
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d10b      	bne.n	80015d0 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015bc:	f043 0204 	orr.w	r2, r3, #4
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2200      	movs	r2, #0
 80015c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 80015cc:	2303      	movs	r3, #3
 80015ce:	e0a2      	b.n	8001716 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 0302 	and.w	r3, r3, #2
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d0d6      	beq.n	800158c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80015de:	e070      	b.n	80016c2 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80015e0:	4b4f      	ldr	r3, [pc, #316]	; (8001720 <HAL_ADC_PollForConversion+0x1f4>)
 80015e2:	681c      	ldr	r4, [r3, #0]
 80015e4:	2002      	movs	r0, #2
 80015e6:	f001 fbbf 	bl	8002d68 <HAL_RCCEx_GetPeriphCLKFreq>
 80015ea:	4603      	mov	r3, r0
 80015ec:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	6919      	ldr	r1, [r3, #16]
 80015f6:	4b4b      	ldr	r3, [pc, #300]	; (8001724 <HAL_ADC_PollForConversion+0x1f8>)
 80015f8:	400b      	ands	r3, r1
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d118      	bne.n	8001630 <HAL_ADC_PollForConversion+0x104>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	68d9      	ldr	r1, [r3, #12]
 8001604:	4b48      	ldr	r3, [pc, #288]	; (8001728 <HAL_ADC_PollForConversion+0x1fc>)
 8001606:	400b      	ands	r3, r1
 8001608:	2b00      	cmp	r3, #0
 800160a:	d111      	bne.n	8001630 <HAL_ADC_PollForConversion+0x104>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	6919      	ldr	r1, [r3, #16]
 8001612:	4b46      	ldr	r3, [pc, #280]	; (800172c <HAL_ADC_PollForConversion+0x200>)
 8001614:	400b      	ands	r3, r1
 8001616:	2b00      	cmp	r3, #0
 8001618:	d108      	bne.n	800162c <HAL_ADC_PollForConversion+0x100>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	68d9      	ldr	r1, [r3, #12]
 8001620:	4b43      	ldr	r3, [pc, #268]	; (8001730 <HAL_ADC_PollForConversion+0x204>)
 8001622:	400b      	ands	r3, r1
 8001624:	2b00      	cmp	r3, #0
 8001626:	d101      	bne.n	800162c <HAL_ADC_PollForConversion+0x100>
 8001628:	2314      	movs	r3, #20
 800162a:	e020      	b.n	800166e <HAL_ADC_PollForConversion+0x142>
 800162c:	2329      	movs	r3, #41	; 0x29
 800162e:	e01e      	b.n	800166e <HAL_ADC_PollForConversion+0x142>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	6919      	ldr	r1, [r3, #16]
 8001636:	4b3d      	ldr	r3, [pc, #244]	; (800172c <HAL_ADC_PollForConversion+0x200>)
 8001638:	400b      	ands	r3, r1
 800163a:	2b00      	cmp	r3, #0
 800163c:	d106      	bne.n	800164c <HAL_ADC_PollForConversion+0x120>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	68d9      	ldr	r1, [r3, #12]
 8001644:	4b3a      	ldr	r3, [pc, #232]	; (8001730 <HAL_ADC_PollForConversion+0x204>)
 8001646:	400b      	ands	r3, r1
 8001648:	2b00      	cmp	r3, #0
 800164a:	d00d      	beq.n	8001668 <HAL_ADC_PollForConversion+0x13c>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	6919      	ldr	r1, [r3, #16]
 8001652:	4b38      	ldr	r3, [pc, #224]	; (8001734 <HAL_ADC_PollForConversion+0x208>)
 8001654:	400b      	ands	r3, r1
 8001656:	2b00      	cmp	r3, #0
 8001658:	d108      	bne.n	800166c <HAL_ADC_PollForConversion+0x140>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	68d9      	ldr	r1, [r3, #12]
 8001660:	4b34      	ldr	r3, [pc, #208]	; (8001734 <HAL_ADC_PollForConversion+0x208>)
 8001662:	400b      	ands	r3, r1
 8001664:	2b00      	cmp	r3, #0
 8001666:	d101      	bne.n	800166c <HAL_ADC_PollForConversion+0x140>
 8001668:	2354      	movs	r3, #84	; 0x54
 800166a:	e000      	b.n	800166e <HAL_ADC_PollForConversion+0x142>
 800166c:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800166e:	fb02 f303 	mul.w	r3, r2, r3
 8001672:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001674:	e021      	b.n	80016ba <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800167c:	d01a      	beq.n	80016b4 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d007      	beq.n	8001694 <HAL_ADC_PollForConversion+0x168>
 8001684:	f7ff fd8c 	bl	80011a0 <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	683a      	ldr	r2, [r7, #0]
 8001690:	429a      	cmp	r2, r3
 8001692:	d20f      	bcs.n	80016b4 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	429a      	cmp	r2, r3
 800169a:	d90b      	bls.n	80016b4 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a0:	f043 0204 	orr.w	r2, r3, #4
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2200      	movs	r2, #0
 80016ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 80016b0:	2303      	movs	r3, #3
 80016b2:	e030      	b.n	8001716 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	3301      	adds	r3, #1
 80016b8:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	429a      	cmp	r2, r3
 80016c0:	d8d9      	bhi.n	8001676 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f06f 0212 	mvn.w	r2, #18
 80016ca:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80016e2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80016e6:	d115      	bne.n	8001714 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d111      	bne.n	8001714 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001700:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001704:	2b00      	cmp	r3, #0
 8001706:	d105      	bne.n	8001714 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800170c:	f043 0201 	orr.w	r2, r3, #1
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	371c      	adds	r7, #28
 800171a:	46bd      	mov	sp, r7
 800171c:	bd90      	pop	{r4, r7, pc}
 800171e:	bf00      	nop
 8001720:	20000000 	.word	0x20000000
 8001724:	24924924 	.word	0x24924924
 8001728:	00924924 	.word	0x00924924
 800172c:	12492492 	.word	0x12492492
 8001730:	00492492 	.word	0x00492492
 8001734:	00249249 	.word	0x00249249

08001738 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001746:	4618      	mov	r0, r3
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	bc80      	pop	{r7}
 800174e:	4770      	bx	lr

08001750 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001750:	b480      	push	{r7}
 8001752:	b085      	sub	sp, #20
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800175a:	2300      	movs	r3, #0
 800175c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800175e:	2300      	movs	r3, #0
 8001760:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001768:	2b01      	cmp	r3, #1
 800176a:	d101      	bne.n	8001770 <HAL_ADC_ConfigChannel+0x20>
 800176c:	2302      	movs	r3, #2
 800176e:	e0dc      	b.n	800192a <HAL_ADC_ConfigChannel+0x1da>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2201      	movs	r2, #1
 8001774:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	2b06      	cmp	r3, #6
 800177e:	d81c      	bhi.n	80017ba <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	685a      	ldr	r2, [r3, #4]
 800178a:	4613      	mov	r3, r2
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	4413      	add	r3, r2
 8001790:	3b05      	subs	r3, #5
 8001792:	221f      	movs	r2, #31
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	43db      	mvns	r3, r3
 800179a:	4019      	ands	r1, r3
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	6818      	ldr	r0, [r3, #0]
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685a      	ldr	r2, [r3, #4]
 80017a4:	4613      	mov	r3, r2
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	4413      	add	r3, r2
 80017aa:	3b05      	subs	r3, #5
 80017ac:	fa00 f203 	lsl.w	r2, r0, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	430a      	orrs	r2, r1
 80017b6:	635a      	str	r2, [r3, #52]	; 0x34
 80017b8:	e03c      	b.n	8001834 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	2b0c      	cmp	r3, #12
 80017c0:	d81c      	bhi.n	80017fc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685a      	ldr	r2, [r3, #4]
 80017cc:	4613      	mov	r3, r2
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	4413      	add	r3, r2
 80017d2:	3b23      	subs	r3, #35	; 0x23
 80017d4:	221f      	movs	r2, #31
 80017d6:	fa02 f303 	lsl.w	r3, r2, r3
 80017da:	43db      	mvns	r3, r3
 80017dc:	4019      	ands	r1, r3
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	6818      	ldr	r0, [r3, #0]
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	685a      	ldr	r2, [r3, #4]
 80017e6:	4613      	mov	r3, r2
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	4413      	add	r3, r2
 80017ec:	3b23      	subs	r3, #35	; 0x23
 80017ee:	fa00 f203 	lsl.w	r2, r0, r3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	430a      	orrs	r2, r1
 80017f8:	631a      	str	r2, [r3, #48]	; 0x30
 80017fa:	e01b      	b.n	8001834 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685a      	ldr	r2, [r3, #4]
 8001806:	4613      	mov	r3, r2
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	4413      	add	r3, r2
 800180c:	3b41      	subs	r3, #65	; 0x41
 800180e:	221f      	movs	r2, #31
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	43db      	mvns	r3, r3
 8001816:	4019      	ands	r1, r3
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	6818      	ldr	r0, [r3, #0]
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685a      	ldr	r2, [r3, #4]
 8001820:	4613      	mov	r3, r2
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	4413      	add	r3, r2
 8001826:	3b41      	subs	r3, #65	; 0x41
 8001828:	fa00 f203 	lsl.w	r2, r0, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	430a      	orrs	r2, r1
 8001832:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2b09      	cmp	r3, #9
 800183a:	d91c      	bls.n	8001876 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	68d9      	ldr	r1, [r3, #12]
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	4613      	mov	r3, r2
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	4413      	add	r3, r2
 800184c:	3b1e      	subs	r3, #30
 800184e:	2207      	movs	r2, #7
 8001850:	fa02 f303 	lsl.w	r3, r2, r3
 8001854:	43db      	mvns	r3, r3
 8001856:	4019      	ands	r1, r3
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	6898      	ldr	r0, [r3, #8]
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	4613      	mov	r3, r2
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	4413      	add	r3, r2
 8001866:	3b1e      	subs	r3, #30
 8001868:	fa00 f203 	lsl.w	r2, r0, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	430a      	orrs	r2, r1
 8001872:	60da      	str	r2, [r3, #12]
 8001874:	e019      	b.n	80018aa <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	6919      	ldr	r1, [r3, #16]
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	4613      	mov	r3, r2
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	4413      	add	r3, r2
 8001886:	2207      	movs	r2, #7
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	43db      	mvns	r3, r3
 800188e:	4019      	ands	r1, r3
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	6898      	ldr	r0, [r3, #8]
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	4613      	mov	r3, r2
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	4413      	add	r3, r2
 800189e:	fa00 f203 	lsl.w	r2, r0, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	430a      	orrs	r2, r1
 80018a8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	2b10      	cmp	r3, #16
 80018b0:	d003      	beq.n	80018ba <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80018b6:	2b11      	cmp	r3, #17
 80018b8:	d132      	bne.n	8001920 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a1d      	ldr	r2, [pc, #116]	; (8001934 <HAL_ADC_ConfigChannel+0x1e4>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d125      	bne.n	8001910 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d126      	bne.n	8001920 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	689a      	ldr	r2, [r3, #8]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80018e0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	2b10      	cmp	r3, #16
 80018e8:	d11a      	bne.n	8001920 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80018ea:	4b13      	ldr	r3, [pc, #76]	; (8001938 <HAL_ADC_ConfigChannel+0x1e8>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a13      	ldr	r2, [pc, #76]	; (800193c <HAL_ADC_ConfigChannel+0x1ec>)
 80018f0:	fba2 2303 	umull	r2, r3, r2, r3
 80018f4:	0c9a      	lsrs	r2, r3, #18
 80018f6:	4613      	mov	r3, r2
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	4413      	add	r3, r2
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001900:	e002      	b.n	8001908 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	3b01      	subs	r3, #1
 8001906:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d1f9      	bne.n	8001902 <HAL_ADC_ConfigChannel+0x1b2>
 800190e:	e007      	b.n	8001920 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001914:	f043 0220 	orr.w	r2, r3, #32
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2200      	movs	r2, #0
 8001924:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001928:	7bfb      	ldrb	r3, [r7, #15]
}
 800192a:	4618      	mov	r0, r3
 800192c:	3714      	adds	r7, #20
 800192e:	46bd      	mov	sp, r7
 8001930:	bc80      	pop	{r7}
 8001932:	4770      	bx	lr
 8001934:	40012400 	.word	0x40012400
 8001938:	20000000 	.word	0x20000000
 800193c:	431bde83 	.word	0x431bde83

08001940 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001948:	2300      	movs	r3, #0
 800194a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800194c:	2300      	movs	r3, #0
 800194e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	f003 0301 	and.w	r3, r3, #1
 800195a:	2b01      	cmp	r3, #1
 800195c:	d040      	beq.n	80019e0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	689a      	ldr	r2, [r3, #8]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f042 0201 	orr.w	r2, r2, #1
 800196c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800196e:	4b1f      	ldr	r3, [pc, #124]	; (80019ec <ADC_Enable+0xac>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a1f      	ldr	r2, [pc, #124]	; (80019f0 <ADC_Enable+0xb0>)
 8001974:	fba2 2303 	umull	r2, r3, r2, r3
 8001978:	0c9b      	lsrs	r3, r3, #18
 800197a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800197c:	e002      	b.n	8001984 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	3b01      	subs	r3, #1
 8001982:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d1f9      	bne.n	800197e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800198a:	f7ff fc09 	bl	80011a0 <HAL_GetTick>
 800198e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001990:	e01f      	b.n	80019d2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001992:	f7ff fc05 	bl	80011a0 <HAL_GetTick>
 8001996:	4602      	mov	r2, r0
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	2b02      	cmp	r3, #2
 800199e:	d918      	bls.n	80019d2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d011      	beq.n	80019d2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b2:	f043 0210 	orr.w	r2, r3, #16
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019be:	f043 0201 	orr.w	r2, r3, #1
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2200      	movs	r2, #0
 80019ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e007      	b.n	80019e2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	f003 0301 	and.w	r3, r3, #1
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d1d8      	bne.n	8001992 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3710      	adds	r7, #16
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	20000000 	.word	0x20000000
 80019f0:	431bde83 	.word	0x431bde83

080019f4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019fc:	2300      	movs	r3, #0
 80019fe:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d12e      	bne.n	8001a6c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	689a      	ldr	r2, [r3, #8]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f022 0201 	bic.w	r2, r2, #1
 8001a1c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001a1e:	f7ff fbbf 	bl	80011a0 <HAL_GetTick>
 8001a22:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001a24:	e01b      	b.n	8001a5e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001a26:	f7ff fbbb 	bl	80011a0 <HAL_GetTick>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d914      	bls.n	8001a5e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d10d      	bne.n	8001a5e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a46:	f043 0210 	orr.w	r2, r3, #16
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a52:	f043 0201 	orr.w	r2, r3, #1
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e007      	b.n	8001a6e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	f003 0301 	and.w	r3, r3, #1
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d0dc      	beq.n	8001a26 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3710      	adds	r7, #16
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
	...

08001a78 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001a78:	b590      	push	{r4, r7, lr}
 8001a7a:	b087      	sub	sp, #28
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a80:	2300      	movs	r3, #0
 8001a82:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001a84:	2300      	movs	r3, #0
 8001a86:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d101      	bne.n	8001a96 <HAL_ADCEx_Calibration_Start+0x1e>
 8001a92:	2302      	movs	r3, #2
 8001a94:	e095      	b.n	8001bc2 <HAL_ADCEx_Calibration_Start+0x14a>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2201      	movs	r2, #1
 8001a9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f7ff ffa8 	bl	80019f4 <ADC_ConversionStop_Disable>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001aa8:	7dfb      	ldrb	r3, [r7, #23]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	f040 8084 	bne.w	8001bb8 <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ab8:	f023 0302 	bic.w	r3, r3, #2
 8001abc:	f043 0202 	orr.w	r2, r3, #2
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001ac4:	4b41      	ldr	r3, [pc, #260]	; (8001bcc <HAL_ADCEx_Calibration_Start+0x154>)
 8001ac6:	681c      	ldr	r4, [r3, #0]
 8001ac8:	2002      	movs	r0, #2
 8001aca:	f001 f94d 	bl	8002d68 <HAL_RCCEx_GetPeriphCLKFreq>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001ad4:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001ad6:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8001ad8:	e002      	b.n	8001ae0 <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	3b01      	subs	r3, #1
 8001ade:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d1f9      	bne.n	8001ada <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f7ff ff2a 	bl	8001940 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	689a      	ldr	r2, [r3, #8]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f042 0208 	orr.w	r2, r2, #8
 8001afa:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001afc:	f7ff fb50 	bl	80011a0 <HAL_GetTick>
 8001b00:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001b02:	e01b      	b.n	8001b3c <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001b04:	f7ff fb4c 	bl	80011a0 <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	2b0a      	cmp	r3, #10
 8001b10:	d914      	bls.n	8001b3c <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	f003 0308 	and.w	r3, r3, #8
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d00d      	beq.n	8001b3c <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b24:	f023 0312 	bic.w	r3, r3, #18
 8001b28:	f043 0210 	orr.w	r2, r3, #16
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2200      	movs	r2, #0
 8001b34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e042      	b.n	8001bc2 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	f003 0308 	and.w	r3, r3, #8
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1dc      	bne.n	8001b04 <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	689a      	ldr	r2, [r3, #8]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f042 0204 	orr.w	r2, r2, #4
 8001b58:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001b5a:	f7ff fb21 	bl	80011a0 <HAL_GetTick>
 8001b5e:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001b60:	e01b      	b.n	8001b9a <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001b62:	f7ff fb1d 	bl	80011a0 <HAL_GetTick>
 8001b66:	4602      	mov	r2, r0
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	2b0a      	cmp	r3, #10
 8001b6e:	d914      	bls.n	8001b9a <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	f003 0304 	and.w	r3, r3, #4
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d00d      	beq.n	8001b9a <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b82:	f023 0312 	bic.w	r3, r3, #18
 8001b86:	f043 0210 	orr.w	r2, r3, #16
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2200      	movs	r2, #0
 8001b92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e013      	b.n	8001bc2 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	f003 0304 	and.w	r3, r3, #4
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d1dc      	bne.n	8001b62 <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bac:	f023 0303 	bic.w	r3, r3, #3
 8001bb0:	f043 0201 	orr.w	r2, r3, #1
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001bc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	371c      	adds	r7, #28
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd90      	pop	{r4, r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	20000000 	.word	0x20000000

08001bd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f003 0307 	and.w	r3, r3, #7
 8001bde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001be0:	4b0c      	ldr	r3, [pc, #48]	; (8001c14 <__NVIC_SetPriorityGrouping+0x44>)
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001be6:	68ba      	ldr	r2, [r7, #8]
 8001be8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bec:	4013      	ands	r3, r2
 8001bee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bf8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c02:	4a04      	ldr	r2, [pc, #16]	; (8001c14 <__NVIC_SetPriorityGrouping+0x44>)
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	60d3      	str	r3, [r2, #12]
}
 8001c08:	bf00      	nop
 8001c0a:	3714      	adds	r7, #20
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bc80      	pop	{r7}
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	e000ed00 	.word	0xe000ed00

08001c18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c1c:	4b04      	ldr	r3, [pc, #16]	; (8001c30 <__NVIC_GetPriorityGrouping+0x18>)
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	0a1b      	lsrs	r3, r3, #8
 8001c22:	f003 0307 	and.w	r3, r3, #7
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bc80      	pop	{r7}
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	e000ed00 	.word	0xe000ed00

08001c34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	db0b      	blt.n	8001c5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c46:	79fb      	ldrb	r3, [r7, #7]
 8001c48:	f003 021f 	and.w	r2, r3, #31
 8001c4c:	4906      	ldr	r1, [pc, #24]	; (8001c68 <__NVIC_EnableIRQ+0x34>)
 8001c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c52:	095b      	lsrs	r3, r3, #5
 8001c54:	2001      	movs	r0, #1
 8001c56:	fa00 f202 	lsl.w	r2, r0, r2
 8001c5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c5e:	bf00      	nop
 8001c60:	370c      	adds	r7, #12
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bc80      	pop	{r7}
 8001c66:	4770      	bx	lr
 8001c68:	e000e100 	.word	0xe000e100

08001c6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	4603      	mov	r3, r0
 8001c74:	6039      	str	r1, [r7, #0]
 8001c76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	db0a      	blt.n	8001c96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	b2da      	uxtb	r2, r3
 8001c84:	490c      	ldr	r1, [pc, #48]	; (8001cb8 <__NVIC_SetPriority+0x4c>)
 8001c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8a:	0112      	lsls	r2, r2, #4
 8001c8c:	b2d2      	uxtb	r2, r2
 8001c8e:	440b      	add	r3, r1
 8001c90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c94:	e00a      	b.n	8001cac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	b2da      	uxtb	r2, r3
 8001c9a:	4908      	ldr	r1, [pc, #32]	; (8001cbc <__NVIC_SetPriority+0x50>)
 8001c9c:	79fb      	ldrb	r3, [r7, #7]
 8001c9e:	f003 030f 	and.w	r3, r3, #15
 8001ca2:	3b04      	subs	r3, #4
 8001ca4:	0112      	lsls	r2, r2, #4
 8001ca6:	b2d2      	uxtb	r2, r2
 8001ca8:	440b      	add	r3, r1
 8001caa:	761a      	strb	r2, [r3, #24]
}
 8001cac:	bf00      	nop
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bc80      	pop	{r7}
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	e000e100 	.word	0xe000e100
 8001cbc:	e000ed00 	.word	0xe000ed00

08001cc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b089      	sub	sp, #36	; 0x24
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	60f8      	str	r0, [r7, #12]
 8001cc8:	60b9      	str	r1, [r7, #8]
 8001cca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f003 0307 	and.w	r3, r3, #7
 8001cd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	f1c3 0307 	rsb	r3, r3, #7
 8001cda:	2b04      	cmp	r3, #4
 8001cdc:	bf28      	it	cs
 8001cde:	2304      	movcs	r3, #4
 8001ce0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	3304      	adds	r3, #4
 8001ce6:	2b06      	cmp	r3, #6
 8001ce8:	d902      	bls.n	8001cf0 <NVIC_EncodePriority+0x30>
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	3b03      	subs	r3, #3
 8001cee:	e000      	b.n	8001cf2 <NVIC_EncodePriority+0x32>
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfe:	43da      	mvns	r2, r3
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	401a      	ands	r2, r3
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d08:	f04f 31ff 	mov.w	r1, #4294967295
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d12:	43d9      	mvns	r1, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d18:	4313      	orrs	r3, r2
         );
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3724      	adds	r7, #36	; 0x24
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bc80      	pop	{r7}
 8001d22:	4770      	bx	lr

08001d24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	3b01      	subs	r3, #1
 8001d30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d34:	d301      	bcc.n	8001d3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d36:	2301      	movs	r3, #1
 8001d38:	e00f      	b.n	8001d5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d3a:	4a0a      	ldr	r2, [pc, #40]	; (8001d64 <SysTick_Config+0x40>)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	3b01      	subs	r3, #1
 8001d40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d42:	210f      	movs	r1, #15
 8001d44:	f04f 30ff 	mov.w	r0, #4294967295
 8001d48:	f7ff ff90 	bl	8001c6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d4c:	4b05      	ldr	r3, [pc, #20]	; (8001d64 <SysTick_Config+0x40>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d52:	4b04      	ldr	r3, [pc, #16]	; (8001d64 <SysTick_Config+0x40>)
 8001d54:	2207      	movs	r2, #7
 8001d56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	e000e010 	.word	0xe000e010

08001d68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f7ff ff2d 	bl	8001bd0 <__NVIC_SetPriorityGrouping>
}
 8001d76:	bf00      	nop
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b086      	sub	sp, #24
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	4603      	mov	r3, r0
 8001d86:	60b9      	str	r1, [r7, #8]
 8001d88:	607a      	str	r2, [r7, #4]
 8001d8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d90:	f7ff ff42 	bl	8001c18 <__NVIC_GetPriorityGrouping>
 8001d94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	68b9      	ldr	r1, [r7, #8]
 8001d9a:	6978      	ldr	r0, [r7, #20]
 8001d9c:	f7ff ff90 	bl	8001cc0 <NVIC_EncodePriority>
 8001da0:	4602      	mov	r2, r0
 8001da2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001da6:	4611      	mov	r1, r2
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7ff ff5f 	bl	8001c6c <__NVIC_SetPriority>
}
 8001dae:	bf00      	nop
 8001db0:	3718      	adds	r7, #24
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b082      	sub	sp, #8
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7ff ff35 	bl	8001c34 <__NVIC_EnableIRQ>
}
 8001dca:	bf00      	nop
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b082      	sub	sp, #8
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f7ff ffa2 	bl	8001d24 <SysTick_Config>
 8001de0:	4603      	mov	r3, r0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001dea:	b480      	push	{r7}
 8001dec:	b085      	sub	sp, #20
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001df2:	2300      	movs	r3, #0
 8001df4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d008      	beq.n	8001e12 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2204      	movs	r2, #4
 8001e04:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e020      	b.n	8001e54 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f022 020e 	bic.w	r2, r2, #14
 8001e20:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f022 0201 	bic.w	r2, r2, #1
 8001e30:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e3a:	2101      	movs	r1, #1
 8001e3c:	fa01 f202 	lsl.w	r2, r1, r2
 8001e40:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2201      	movs	r2, #1
 8001e46:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3714      	adds	r7, #20
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bc80      	pop	{r7}
 8001e5c:	4770      	bx	lr
	...

08001e60 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d005      	beq.n	8001e82 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2204      	movs	r2, #4
 8001e7a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	73fb      	strb	r3, [r7, #15]
 8001e80:	e0d6      	b.n	8002030 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f022 020e 	bic.w	r2, r2, #14
 8001e90:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f022 0201 	bic.w	r2, r2, #1
 8001ea0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	4b64      	ldr	r3, [pc, #400]	; (800203c <HAL_DMA_Abort_IT+0x1dc>)
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d958      	bls.n	8001f60 <HAL_DMA_Abort_IT+0x100>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a63      	ldr	r2, [pc, #396]	; (8002040 <HAL_DMA_Abort_IT+0x1e0>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d04f      	beq.n	8001f58 <HAL_DMA_Abort_IT+0xf8>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a61      	ldr	r2, [pc, #388]	; (8002044 <HAL_DMA_Abort_IT+0x1e4>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d048      	beq.n	8001f54 <HAL_DMA_Abort_IT+0xf4>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a60      	ldr	r2, [pc, #384]	; (8002048 <HAL_DMA_Abort_IT+0x1e8>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d040      	beq.n	8001f4e <HAL_DMA_Abort_IT+0xee>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a5e      	ldr	r2, [pc, #376]	; (800204c <HAL_DMA_Abort_IT+0x1ec>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d038      	beq.n	8001f48 <HAL_DMA_Abort_IT+0xe8>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a5d      	ldr	r2, [pc, #372]	; (8002050 <HAL_DMA_Abort_IT+0x1f0>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d030      	beq.n	8001f42 <HAL_DMA_Abort_IT+0xe2>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a5b      	ldr	r2, [pc, #364]	; (8002054 <HAL_DMA_Abort_IT+0x1f4>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d028      	beq.n	8001f3c <HAL_DMA_Abort_IT+0xdc>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a53      	ldr	r2, [pc, #332]	; (800203c <HAL_DMA_Abort_IT+0x1dc>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d020      	beq.n	8001f36 <HAL_DMA_Abort_IT+0xd6>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a57      	ldr	r2, [pc, #348]	; (8002058 <HAL_DMA_Abort_IT+0x1f8>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d019      	beq.n	8001f32 <HAL_DMA_Abort_IT+0xd2>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a56      	ldr	r2, [pc, #344]	; (800205c <HAL_DMA_Abort_IT+0x1fc>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d012      	beq.n	8001f2e <HAL_DMA_Abort_IT+0xce>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a54      	ldr	r2, [pc, #336]	; (8002060 <HAL_DMA_Abort_IT+0x200>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d00a      	beq.n	8001f28 <HAL_DMA_Abort_IT+0xc8>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a53      	ldr	r2, [pc, #332]	; (8002064 <HAL_DMA_Abort_IT+0x204>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d102      	bne.n	8001f22 <HAL_DMA_Abort_IT+0xc2>
 8001f1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f20:	e01b      	b.n	8001f5a <HAL_DMA_Abort_IT+0xfa>
 8001f22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f26:	e018      	b.n	8001f5a <HAL_DMA_Abort_IT+0xfa>
 8001f28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f2c:	e015      	b.n	8001f5a <HAL_DMA_Abort_IT+0xfa>
 8001f2e:	2310      	movs	r3, #16
 8001f30:	e013      	b.n	8001f5a <HAL_DMA_Abort_IT+0xfa>
 8001f32:	2301      	movs	r3, #1
 8001f34:	e011      	b.n	8001f5a <HAL_DMA_Abort_IT+0xfa>
 8001f36:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f3a:	e00e      	b.n	8001f5a <HAL_DMA_Abort_IT+0xfa>
 8001f3c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001f40:	e00b      	b.n	8001f5a <HAL_DMA_Abort_IT+0xfa>
 8001f42:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f46:	e008      	b.n	8001f5a <HAL_DMA_Abort_IT+0xfa>
 8001f48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f4c:	e005      	b.n	8001f5a <HAL_DMA_Abort_IT+0xfa>
 8001f4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f52:	e002      	b.n	8001f5a <HAL_DMA_Abort_IT+0xfa>
 8001f54:	2310      	movs	r3, #16
 8001f56:	e000      	b.n	8001f5a <HAL_DMA_Abort_IT+0xfa>
 8001f58:	2301      	movs	r3, #1
 8001f5a:	4a43      	ldr	r2, [pc, #268]	; (8002068 <HAL_DMA_Abort_IT+0x208>)
 8001f5c:	6053      	str	r3, [r2, #4]
 8001f5e:	e057      	b.n	8002010 <HAL_DMA_Abort_IT+0x1b0>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a36      	ldr	r2, [pc, #216]	; (8002040 <HAL_DMA_Abort_IT+0x1e0>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d04f      	beq.n	800200a <HAL_DMA_Abort_IT+0x1aa>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a35      	ldr	r2, [pc, #212]	; (8002044 <HAL_DMA_Abort_IT+0x1e4>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d048      	beq.n	8002006 <HAL_DMA_Abort_IT+0x1a6>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a33      	ldr	r2, [pc, #204]	; (8002048 <HAL_DMA_Abort_IT+0x1e8>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d040      	beq.n	8002000 <HAL_DMA_Abort_IT+0x1a0>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a32      	ldr	r2, [pc, #200]	; (800204c <HAL_DMA_Abort_IT+0x1ec>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d038      	beq.n	8001ffa <HAL_DMA_Abort_IT+0x19a>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a30      	ldr	r2, [pc, #192]	; (8002050 <HAL_DMA_Abort_IT+0x1f0>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d030      	beq.n	8001ff4 <HAL_DMA_Abort_IT+0x194>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a2f      	ldr	r2, [pc, #188]	; (8002054 <HAL_DMA_Abort_IT+0x1f4>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d028      	beq.n	8001fee <HAL_DMA_Abort_IT+0x18e>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a26      	ldr	r2, [pc, #152]	; (800203c <HAL_DMA_Abort_IT+0x1dc>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d020      	beq.n	8001fe8 <HAL_DMA_Abort_IT+0x188>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a2b      	ldr	r2, [pc, #172]	; (8002058 <HAL_DMA_Abort_IT+0x1f8>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d019      	beq.n	8001fe4 <HAL_DMA_Abort_IT+0x184>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a29      	ldr	r2, [pc, #164]	; (800205c <HAL_DMA_Abort_IT+0x1fc>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d012      	beq.n	8001fe0 <HAL_DMA_Abort_IT+0x180>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a28      	ldr	r2, [pc, #160]	; (8002060 <HAL_DMA_Abort_IT+0x200>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d00a      	beq.n	8001fda <HAL_DMA_Abort_IT+0x17a>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a26      	ldr	r2, [pc, #152]	; (8002064 <HAL_DMA_Abort_IT+0x204>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d102      	bne.n	8001fd4 <HAL_DMA_Abort_IT+0x174>
 8001fce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fd2:	e01b      	b.n	800200c <HAL_DMA_Abort_IT+0x1ac>
 8001fd4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fd8:	e018      	b.n	800200c <HAL_DMA_Abort_IT+0x1ac>
 8001fda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fde:	e015      	b.n	800200c <HAL_DMA_Abort_IT+0x1ac>
 8001fe0:	2310      	movs	r3, #16
 8001fe2:	e013      	b.n	800200c <HAL_DMA_Abort_IT+0x1ac>
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e011      	b.n	800200c <HAL_DMA_Abort_IT+0x1ac>
 8001fe8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001fec:	e00e      	b.n	800200c <HAL_DMA_Abort_IT+0x1ac>
 8001fee:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001ff2:	e00b      	b.n	800200c <HAL_DMA_Abort_IT+0x1ac>
 8001ff4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ff8:	e008      	b.n	800200c <HAL_DMA_Abort_IT+0x1ac>
 8001ffa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ffe:	e005      	b.n	800200c <HAL_DMA_Abort_IT+0x1ac>
 8002000:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002004:	e002      	b.n	800200c <HAL_DMA_Abort_IT+0x1ac>
 8002006:	2310      	movs	r3, #16
 8002008:	e000      	b.n	800200c <HAL_DMA_Abort_IT+0x1ac>
 800200a:	2301      	movs	r3, #1
 800200c:	4a17      	ldr	r2, [pc, #92]	; (800206c <HAL_DMA_Abort_IT+0x20c>)
 800200e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2201      	movs	r2, #1
 8002014:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2200      	movs	r2, #0
 800201c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002024:	2b00      	cmp	r3, #0
 8002026:	d003      	beq.n	8002030 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	4798      	blx	r3
    } 
  }
  return status;
 8002030:	7bfb      	ldrb	r3, [r7, #15]
}
 8002032:	4618      	mov	r0, r3
 8002034:	3710      	adds	r7, #16
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	40020080 	.word	0x40020080
 8002040:	40020008 	.word	0x40020008
 8002044:	4002001c 	.word	0x4002001c
 8002048:	40020030 	.word	0x40020030
 800204c:	40020044 	.word	0x40020044
 8002050:	40020058 	.word	0x40020058
 8002054:	4002006c 	.word	0x4002006c
 8002058:	40020408 	.word	0x40020408
 800205c:	4002041c 	.word	0x4002041c
 8002060:	40020430 	.word	0x40020430
 8002064:	40020444 	.word	0x40020444
 8002068:	40020400 	.word	0x40020400
 800206c:	40020000 	.word	0x40020000

08002070 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002070:	b480      	push	{r7}
 8002072:	b08b      	sub	sp, #44	; 0x2c
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800207a:	2300      	movs	r3, #0
 800207c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800207e:	2300      	movs	r3, #0
 8002080:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002082:	e179      	b.n	8002378 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002084:	2201      	movs	r2, #1
 8002086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002088:	fa02 f303 	lsl.w	r3, r2, r3
 800208c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	69fa      	ldr	r2, [r7, #28]
 8002094:	4013      	ands	r3, r2
 8002096:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	429a      	cmp	r2, r3
 800209e:	f040 8168 	bne.w	8002372 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	4a96      	ldr	r2, [pc, #600]	; (8002300 <HAL_GPIO_Init+0x290>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d05e      	beq.n	800216a <HAL_GPIO_Init+0xfa>
 80020ac:	4a94      	ldr	r2, [pc, #592]	; (8002300 <HAL_GPIO_Init+0x290>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d875      	bhi.n	800219e <HAL_GPIO_Init+0x12e>
 80020b2:	4a94      	ldr	r2, [pc, #592]	; (8002304 <HAL_GPIO_Init+0x294>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d058      	beq.n	800216a <HAL_GPIO_Init+0xfa>
 80020b8:	4a92      	ldr	r2, [pc, #584]	; (8002304 <HAL_GPIO_Init+0x294>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d86f      	bhi.n	800219e <HAL_GPIO_Init+0x12e>
 80020be:	4a92      	ldr	r2, [pc, #584]	; (8002308 <HAL_GPIO_Init+0x298>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d052      	beq.n	800216a <HAL_GPIO_Init+0xfa>
 80020c4:	4a90      	ldr	r2, [pc, #576]	; (8002308 <HAL_GPIO_Init+0x298>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d869      	bhi.n	800219e <HAL_GPIO_Init+0x12e>
 80020ca:	4a90      	ldr	r2, [pc, #576]	; (800230c <HAL_GPIO_Init+0x29c>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d04c      	beq.n	800216a <HAL_GPIO_Init+0xfa>
 80020d0:	4a8e      	ldr	r2, [pc, #568]	; (800230c <HAL_GPIO_Init+0x29c>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d863      	bhi.n	800219e <HAL_GPIO_Init+0x12e>
 80020d6:	4a8e      	ldr	r2, [pc, #568]	; (8002310 <HAL_GPIO_Init+0x2a0>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d046      	beq.n	800216a <HAL_GPIO_Init+0xfa>
 80020dc:	4a8c      	ldr	r2, [pc, #560]	; (8002310 <HAL_GPIO_Init+0x2a0>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d85d      	bhi.n	800219e <HAL_GPIO_Init+0x12e>
 80020e2:	2b12      	cmp	r3, #18
 80020e4:	d82a      	bhi.n	800213c <HAL_GPIO_Init+0xcc>
 80020e6:	2b12      	cmp	r3, #18
 80020e8:	d859      	bhi.n	800219e <HAL_GPIO_Init+0x12e>
 80020ea:	a201      	add	r2, pc, #4	; (adr r2, 80020f0 <HAL_GPIO_Init+0x80>)
 80020ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020f0:	0800216b 	.word	0x0800216b
 80020f4:	08002145 	.word	0x08002145
 80020f8:	08002157 	.word	0x08002157
 80020fc:	08002199 	.word	0x08002199
 8002100:	0800219f 	.word	0x0800219f
 8002104:	0800219f 	.word	0x0800219f
 8002108:	0800219f 	.word	0x0800219f
 800210c:	0800219f 	.word	0x0800219f
 8002110:	0800219f 	.word	0x0800219f
 8002114:	0800219f 	.word	0x0800219f
 8002118:	0800219f 	.word	0x0800219f
 800211c:	0800219f 	.word	0x0800219f
 8002120:	0800219f 	.word	0x0800219f
 8002124:	0800219f 	.word	0x0800219f
 8002128:	0800219f 	.word	0x0800219f
 800212c:	0800219f 	.word	0x0800219f
 8002130:	0800219f 	.word	0x0800219f
 8002134:	0800214d 	.word	0x0800214d
 8002138:	08002161 	.word	0x08002161
 800213c:	4a75      	ldr	r2, [pc, #468]	; (8002314 <HAL_GPIO_Init+0x2a4>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d013      	beq.n	800216a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002142:	e02c      	b.n	800219e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	623b      	str	r3, [r7, #32]
          break;
 800214a:	e029      	b.n	80021a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	3304      	adds	r3, #4
 8002152:	623b      	str	r3, [r7, #32]
          break;
 8002154:	e024      	b.n	80021a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	3308      	adds	r3, #8
 800215c:	623b      	str	r3, [r7, #32]
          break;
 800215e:	e01f      	b.n	80021a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	330c      	adds	r3, #12
 8002166:	623b      	str	r3, [r7, #32]
          break;
 8002168:	e01a      	b.n	80021a0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d102      	bne.n	8002178 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002172:	2304      	movs	r3, #4
 8002174:	623b      	str	r3, [r7, #32]
          break;
 8002176:	e013      	b.n	80021a0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	2b01      	cmp	r3, #1
 800217e:	d105      	bne.n	800218c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002180:	2308      	movs	r3, #8
 8002182:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	69fa      	ldr	r2, [r7, #28]
 8002188:	611a      	str	r2, [r3, #16]
          break;
 800218a:	e009      	b.n	80021a0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800218c:	2308      	movs	r3, #8
 800218e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	69fa      	ldr	r2, [r7, #28]
 8002194:	615a      	str	r2, [r3, #20]
          break;
 8002196:	e003      	b.n	80021a0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002198:	2300      	movs	r3, #0
 800219a:	623b      	str	r3, [r7, #32]
          break;
 800219c:	e000      	b.n	80021a0 <HAL_GPIO_Init+0x130>
          break;
 800219e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80021a0:	69bb      	ldr	r3, [r7, #24]
 80021a2:	2bff      	cmp	r3, #255	; 0xff
 80021a4:	d801      	bhi.n	80021aa <HAL_GPIO_Init+0x13a>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	e001      	b.n	80021ae <HAL_GPIO_Init+0x13e>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	3304      	adds	r3, #4
 80021ae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80021b0:	69bb      	ldr	r3, [r7, #24]
 80021b2:	2bff      	cmp	r3, #255	; 0xff
 80021b4:	d802      	bhi.n	80021bc <HAL_GPIO_Init+0x14c>
 80021b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	e002      	b.n	80021c2 <HAL_GPIO_Init+0x152>
 80021bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021be:	3b08      	subs	r3, #8
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	210f      	movs	r1, #15
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	fa01 f303 	lsl.w	r3, r1, r3
 80021d0:	43db      	mvns	r3, r3
 80021d2:	401a      	ands	r2, r3
 80021d4:	6a39      	ldr	r1, [r7, #32]
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	fa01 f303 	lsl.w	r3, r1, r3
 80021dc:	431a      	orrs	r2, r3
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	f000 80c1 	beq.w	8002372 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80021f0:	4b49      	ldr	r3, [pc, #292]	; (8002318 <HAL_GPIO_Init+0x2a8>)
 80021f2:	699b      	ldr	r3, [r3, #24]
 80021f4:	4a48      	ldr	r2, [pc, #288]	; (8002318 <HAL_GPIO_Init+0x2a8>)
 80021f6:	f043 0301 	orr.w	r3, r3, #1
 80021fa:	6193      	str	r3, [r2, #24]
 80021fc:	4b46      	ldr	r3, [pc, #280]	; (8002318 <HAL_GPIO_Init+0x2a8>)
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	f003 0301 	and.w	r3, r3, #1
 8002204:	60bb      	str	r3, [r7, #8]
 8002206:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002208:	4a44      	ldr	r2, [pc, #272]	; (800231c <HAL_GPIO_Init+0x2ac>)
 800220a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220c:	089b      	lsrs	r3, r3, #2
 800220e:	3302      	adds	r3, #2
 8002210:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002214:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002218:	f003 0303 	and.w	r3, r3, #3
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	220f      	movs	r2, #15
 8002220:	fa02 f303 	lsl.w	r3, r2, r3
 8002224:	43db      	mvns	r3, r3
 8002226:	68fa      	ldr	r2, [r7, #12]
 8002228:	4013      	ands	r3, r2
 800222a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	4a3c      	ldr	r2, [pc, #240]	; (8002320 <HAL_GPIO_Init+0x2b0>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d01f      	beq.n	8002274 <HAL_GPIO_Init+0x204>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	4a3b      	ldr	r2, [pc, #236]	; (8002324 <HAL_GPIO_Init+0x2b4>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d019      	beq.n	8002270 <HAL_GPIO_Init+0x200>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	4a3a      	ldr	r2, [pc, #232]	; (8002328 <HAL_GPIO_Init+0x2b8>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d013      	beq.n	800226c <HAL_GPIO_Init+0x1fc>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	4a39      	ldr	r2, [pc, #228]	; (800232c <HAL_GPIO_Init+0x2bc>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d00d      	beq.n	8002268 <HAL_GPIO_Init+0x1f8>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	4a38      	ldr	r2, [pc, #224]	; (8002330 <HAL_GPIO_Init+0x2c0>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d007      	beq.n	8002264 <HAL_GPIO_Init+0x1f4>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	4a37      	ldr	r2, [pc, #220]	; (8002334 <HAL_GPIO_Init+0x2c4>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d101      	bne.n	8002260 <HAL_GPIO_Init+0x1f0>
 800225c:	2305      	movs	r3, #5
 800225e:	e00a      	b.n	8002276 <HAL_GPIO_Init+0x206>
 8002260:	2306      	movs	r3, #6
 8002262:	e008      	b.n	8002276 <HAL_GPIO_Init+0x206>
 8002264:	2304      	movs	r3, #4
 8002266:	e006      	b.n	8002276 <HAL_GPIO_Init+0x206>
 8002268:	2303      	movs	r3, #3
 800226a:	e004      	b.n	8002276 <HAL_GPIO_Init+0x206>
 800226c:	2302      	movs	r3, #2
 800226e:	e002      	b.n	8002276 <HAL_GPIO_Init+0x206>
 8002270:	2301      	movs	r3, #1
 8002272:	e000      	b.n	8002276 <HAL_GPIO_Init+0x206>
 8002274:	2300      	movs	r3, #0
 8002276:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002278:	f002 0203 	and.w	r2, r2, #3
 800227c:	0092      	lsls	r2, r2, #2
 800227e:	4093      	lsls	r3, r2
 8002280:	68fa      	ldr	r2, [r7, #12]
 8002282:	4313      	orrs	r3, r2
 8002284:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002286:	4925      	ldr	r1, [pc, #148]	; (800231c <HAL_GPIO_Init+0x2ac>)
 8002288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228a:	089b      	lsrs	r3, r3, #2
 800228c:	3302      	adds	r3, #2
 800228e:	68fa      	ldr	r2, [r7, #12]
 8002290:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d006      	beq.n	80022ae <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80022a0:	4b25      	ldr	r3, [pc, #148]	; (8002338 <HAL_GPIO_Init+0x2c8>)
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	4924      	ldr	r1, [pc, #144]	; (8002338 <HAL_GPIO_Init+0x2c8>)
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	600b      	str	r3, [r1, #0]
 80022ac:	e006      	b.n	80022bc <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80022ae:	4b22      	ldr	r3, [pc, #136]	; (8002338 <HAL_GPIO_Init+0x2c8>)
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	43db      	mvns	r3, r3
 80022b6:	4920      	ldr	r1, [pc, #128]	; (8002338 <HAL_GPIO_Init+0x2c8>)
 80022b8:	4013      	ands	r3, r2
 80022ba:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d006      	beq.n	80022d6 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80022c8:	4b1b      	ldr	r3, [pc, #108]	; (8002338 <HAL_GPIO_Init+0x2c8>)
 80022ca:	685a      	ldr	r2, [r3, #4]
 80022cc:	491a      	ldr	r1, [pc, #104]	; (8002338 <HAL_GPIO_Init+0x2c8>)
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	604b      	str	r3, [r1, #4]
 80022d4:	e006      	b.n	80022e4 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80022d6:	4b18      	ldr	r3, [pc, #96]	; (8002338 <HAL_GPIO_Init+0x2c8>)
 80022d8:	685a      	ldr	r2, [r3, #4]
 80022da:	69bb      	ldr	r3, [r7, #24]
 80022dc:	43db      	mvns	r3, r3
 80022de:	4916      	ldr	r1, [pc, #88]	; (8002338 <HAL_GPIO_Init+0x2c8>)
 80022e0:	4013      	ands	r3, r2
 80022e2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d025      	beq.n	800233c <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80022f0:	4b11      	ldr	r3, [pc, #68]	; (8002338 <HAL_GPIO_Init+0x2c8>)
 80022f2:	689a      	ldr	r2, [r3, #8]
 80022f4:	4910      	ldr	r1, [pc, #64]	; (8002338 <HAL_GPIO_Init+0x2c8>)
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	608b      	str	r3, [r1, #8]
 80022fc:	e025      	b.n	800234a <HAL_GPIO_Init+0x2da>
 80022fe:	bf00      	nop
 8002300:	10320000 	.word	0x10320000
 8002304:	10310000 	.word	0x10310000
 8002308:	10220000 	.word	0x10220000
 800230c:	10210000 	.word	0x10210000
 8002310:	10120000 	.word	0x10120000
 8002314:	10110000 	.word	0x10110000
 8002318:	40021000 	.word	0x40021000
 800231c:	40010000 	.word	0x40010000
 8002320:	40010800 	.word	0x40010800
 8002324:	40010c00 	.word	0x40010c00
 8002328:	40011000 	.word	0x40011000
 800232c:	40011400 	.word	0x40011400
 8002330:	40011800 	.word	0x40011800
 8002334:	40011c00 	.word	0x40011c00
 8002338:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800233c:	4b15      	ldr	r3, [pc, #84]	; (8002394 <HAL_GPIO_Init+0x324>)
 800233e:	689a      	ldr	r2, [r3, #8]
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	43db      	mvns	r3, r3
 8002344:	4913      	ldr	r1, [pc, #76]	; (8002394 <HAL_GPIO_Init+0x324>)
 8002346:	4013      	ands	r3, r2
 8002348:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d006      	beq.n	8002364 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002356:	4b0f      	ldr	r3, [pc, #60]	; (8002394 <HAL_GPIO_Init+0x324>)
 8002358:	68da      	ldr	r2, [r3, #12]
 800235a:	490e      	ldr	r1, [pc, #56]	; (8002394 <HAL_GPIO_Init+0x324>)
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	4313      	orrs	r3, r2
 8002360:	60cb      	str	r3, [r1, #12]
 8002362:	e006      	b.n	8002372 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002364:	4b0b      	ldr	r3, [pc, #44]	; (8002394 <HAL_GPIO_Init+0x324>)
 8002366:	68da      	ldr	r2, [r3, #12]
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	43db      	mvns	r3, r3
 800236c:	4909      	ldr	r1, [pc, #36]	; (8002394 <HAL_GPIO_Init+0x324>)
 800236e:	4013      	ands	r3, r2
 8002370:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002374:	3301      	adds	r3, #1
 8002376:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237e:	fa22 f303 	lsr.w	r3, r2, r3
 8002382:	2b00      	cmp	r3, #0
 8002384:	f47f ae7e 	bne.w	8002084 <HAL_GPIO_Init+0x14>
  }
}
 8002388:	bf00      	nop
 800238a:	bf00      	nop
 800238c:	372c      	adds	r7, #44	; 0x2c
 800238e:	46bd      	mov	sp, r7
 8002390:	bc80      	pop	{r7}
 8002392:	4770      	bx	lr
 8002394:	40010400 	.word	0x40010400

08002398 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	460b      	mov	r3, r1
 80023a2:	807b      	strh	r3, [r7, #2]
 80023a4:	4613      	mov	r3, r2
 80023a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023a8:	787b      	ldrb	r3, [r7, #1]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d003      	beq.n	80023b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023ae:	887a      	ldrh	r2, [r7, #2]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80023b4:	e003      	b.n	80023be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80023b6:	887b      	ldrh	r3, [r7, #2]
 80023b8:	041a      	lsls	r2, r3, #16
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	611a      	str	r2, [r3, #16]
}
 80023be:	bf00      	nop
 80023c0:	370c      	adds	r7, #12
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bc80      	pop	{r7}
 80023c6:	4770      	bx	lr

080023c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b086      	sub	sp, #24
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d101      	bne.n	80023da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e272      	b.n	80028c0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	f000 8087 	beq.w	80024f6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023e8:	4b92      	ldr	r3, [pc, #584]	; (8002634 <HAL_RCC_OscConfig+0x26c>)
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f003 030c 	and.w	r3, r3, #12
 80023f0:	2b04      	cmp	r3, #4
 80023f2:	d00c      	beq.n	800240e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023f4:	4b8f      	ldr	r3, [pc, #572]	; (8002634 <HAL_RCC_OscConfig+0x26c>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f003 030c 	and.w	r3, r3, #12
 80023fc:	2b08      	cmp	r3, #8
 80023fe:	d112      	bne.n	8002426 <HAL_RCC_OscConfig+0x5e>
 8002400:	4b8c      	ldr	r3, [pc, #560]	; (8002634 <HAL_RCC_OscConfig+0x26c>)
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002408:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800240c:	d10b      	bne.n	8002426 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800240e:	4b89      	ldr	r3, [pc, #548]	; (8002634 <HAL_RCC_OscConfig+0x26c>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d06c      	beq.n	80024f4 <HAL_RCC_OscConfig+0x12c>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d168      	bne.n	80024f4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e24c      	b.n	80028c0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800242e:	d106      	bne.n	800243e <HAL_RCC_OscConfig+0x76>
 8002430:	4b80      	ldr	r3, [pc, #512]	; (8002634 <HAL_RCC_OscConfig+0x26c>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a7f      	ldr	r2, [pc, #508]	; (8002634 <HAL_RCC_OscConfig+0x26c>)
 8002436:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800243a:	6013      	str	r3, [r2, #0]
 800243c:	e02e      	b.n	800249c <HAL_RCC_OscConfig+0xd4>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d10c      	bne.n	8002460 <HAL_RCC_OscConfig+0x98>
 8002446:	4b7b      	ldr	r3, [pc, #492]	; (8002634 <HAL_RCC_OscConfig+0x26c>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a7a      	ldr	r2, [pc, #488]	; (8002634 <HAL_RCC_OscConfig+0x26c>)
 800244c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002450:	6013      	str	r3, [r2, #0]
 8002452:	4b78      	ldr	r3, [pc, #480]	; (8002634 <HAL_RCC_OscConfig+0x26c>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a77      	ldr	r2, [pc, #476]	; (8002634 <HAL_RCC_OscConfig+0x26c>)
 8002458:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800245c:	6013      	str	r3, [r2, #0]
 800245e:	e01d      	b.n	800249c <HAL_RCC_OscConfig+0xd4>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002468:	d10c      	bne.n	8002484 <HAL_RCC_OscConfig+0xbc>
 800246a:	4b72      	ldr	r3, [pc, #456]	; (8002634 <HAL_RCC_OscConfig+0x26c>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a71      	ldr	r2, [pc, #452]	; (8002634 <HAL_RCC_OscConfig+0x26c>)
 8002470:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002474:	6013      	str	r3, [r2, #0]
 8002476:	4b6f      	ldr	r3, [pc, #444]	; (8002634 <HAL_RCC_OscConfig+0x26c>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a6e      	ldr	r2, [pc, #440]	; (8002634 <HAL_RCC_OscConfig+0x26c>)
 800247c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002480:	6013      	str	r3, [r2, #0]
 8002482:	e00b      	b.n	800249c <HAL_RCC_OscConfig+0xd4>
 8002484:	4b6b      	ldr	r3, [pc, #428]	; (8002634 <HAL_RCC_OscConfig+0x26c>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a6a      	ldr	r2, [pc, #424]	; (8002634 <HAL_RCC_OscConfig+0x26c>)
 800248a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800248e:	6013      	str	r3, [r2, #0]
 8002490:	4b68      	ldr	r3, [pc, #416]	; (8002634 <HAL_RCC_OscConfig+0x26c>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a67      	ldr	r2, [pc, #412]	; (8002634 <HAL_RCC_OscConfig+0x26c>)
 8002496:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800249a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d013      	beq.n	80024cc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a4:	f7fe fe7c 	bl	80011a0 <HAL_GetTick>
 80024a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024aa:	e008      	b.n	80024be <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024ac:	f7fe fe78 	bl	80011a0 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b64      	cmp	r3, #100	; 0x64
 80024b8:	d901      	bls.n	80024be <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e200      	b.n	80028c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024be:	4b5d      	ldr	r3, [pc, #372]	; (8002634 <HAL_RCC_OscConfig+0x26c>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d0f0      	beq.n	80024ac <HAL_RCC_OscConfig+0xe4>
 80024ca:	e014      	b.n	80024f6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024cc:	f7fe fe68 	bl	80011a0 <HAL_GetTick>
 80024d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024d2:	e008      	b.n	80024e6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024d4:	f7fe fe64 	bl	80011a0 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b64      	cmp	r3, #100	; 0x64
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e1ec      	b.n	80028c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024e6:	4b53      	ldr	r3, [pc, #332]	; (8002634 <HAL_RCC_OscConfig+0x26c>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d1f0      	bne.n	80024d4 <HAL_RCC_OscConfig+0x10c>
 80024f2:	e000      	b.n	80024f6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0302 	and.w	r3, r3, #2
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d063      	beq.n	80025ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002502:	4b4c      	ldr	r3, [pc, #304]	; (8002634 <HAL_RCC_OscConfig+0x26c>)
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f003 030c 	and.w	r3, r3, #12
 800250a:	2b00      	cmp	r3, #0
 800250c:	d00b      	beq.n	8002526 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800250e:	4b49      	ldr	r3, [pc, #292]	; (8002634 <HAL_RCC_OscConfig+0x26c>)
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f003 030c 	and.w	r3, r3, #12
 8002516:	2b08      	cmp	r3, #8
 8002518:	d11c      	bne.n	8002554 <HAL_RCC_OscConfig+0x18c>
 800251a:	4b46      	ldr	r3, [pc, #280]	; (8002634 <HAL_RCC_OscConfig+0x26c>)
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d116      	bne.n	8002554 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002526:	4b43      	ldr	r3, [pc, #268]	; (8002634 <HAL_RCC_OscConfig+0x26c>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0302 	and.w	r3, r3, #2
 800252e:	2b00      	cmp	r3, #0
 8002530:	d005      	beq.n	800253e <HAL_RCC_OscConfig+0x176>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	691b      	ldr	r3, [r3, #16]
 8002536:	2b01      	cmp	r3, #1
 8002538:	d001      	beq.n	800253e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e1c0      	b.n	80028c0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800253e:	4b3d      	ldr	r3, [pc, #244]	; (8002634 <HAL_RCC_OscConfig+0x26c>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	695b      	ldr	r3, [r3, #20]
 800254a:	00db      	lsls	r3, r3, #3
 800254c:	4939      	ldr	r1, [pc, #228]	; (8002634 <HAL_RCC_OscConfig+0x26c>)
 800254e:	4313      	orrs	r3, r2
 8002550:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002552:	e03a      	b.n	80025ca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	691b      	ldr	r3, [r3, #16]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d020      	beq.n	800259e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800255c:	4b36      	ldr	r3, [pc, #216]	; (8002638 <HAL_RCC_OscConfig+0x270>)
 800255e:	2201      	movs	r2, #1
 8002560:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002562:	f7fe fe1d 	bl	80011a0 <HAL_GetTick>
 8002566:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002568:	e008      	b.n	800257c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800256a:	f7fe fe19 	bl	80011a0 <HAL_GetTick>
 800256e:	4602      	mov	r2, r0
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	2b02      	cmp	r3, #2
 8002576:	d901      	bls.n	800257c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e1a1      	b.n	80028c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800257c:	4b2d      	ldr	r3, [pc, #180]	; (8002634 <HAL_RCC_OscConfig+0x26c>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0302 	and.w	r3, r3, #2
 8002584:	2b00      	cmp	r3, #0
 8002586:	d0f0      	beq.n	800256a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002588:	4b2a      	ldr	r3, [pc, #168]	; (8002634 <HAL_RCC_OscConfig+0x26c>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	695b      	ldr	r3, [r3, #20]
 8002594:	00db      	lsls	r3, r3, #3
 8002596:	4927      	ldr	r1, [pc, #156]	; (8002634 <HAL_RCC_OscConfig+0x26c>)
 8002598:	4313      	orrs	r3, r2
 800259a:	600b      	str	r3, [r1, #0]
 800259c:	e015      	b.n	80025ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800259e:	4b26      	ldr	r3, [pc, #152]	; (8002638 <HAL_RCC_OscConfig+0x270>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a4:	f7fe fdfc 	bl	80011a0 <HAL_GetTick>
 80025a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025aa:	e008      	b.n	80025be <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025ac:	f7fe fdf8 	bl	80011a0 <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d901      	bls.n	80025be <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e180      	b.n	80028c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025be:	4b1d      	ldr	r3, [pc, #116]	; (8002634 <HAL_RCC_OscConfig+0x26c>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0302 	and.w	r3, r3, #2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d1f0      	bne.n	80025ac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0308 	and.w	r3, r3, #8
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d03a      	beq.n	800264c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	699b      	ldr	r3, [r3, #24]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d019      	beq.n	8002612 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025de:	4b17      	ldr	r3, [pc, #92]	; (800263c <HAL_RCC_OscConfig+0x274>)
 80025e0:	2201      	movs	r2, #1
 80025e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025e4:	f7fe fddc 	bl	80011a0 <HAL_GetTick>
 80025e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025ea:	e008      	b.n	80025fe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025ec:	f7fe fdd8 	bl	80011a0 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e160      	b.n	80028c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025fe:	4b0d      	ldr	r3, [pc, #52]	; (8002634 <HAL_RCC_OscConfig+0x26c>)
 8002600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002602:	f003 0302 	and.w	r3, r3, #2
 8002606:	2b00      	cmp	r3, #0
 8002608:	d0f0      	beq.n	80025ec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800260a:	2001      	movs	r0, #1
 800260c:	f000 fad8 	bl	8002bc0 <RCC_Delay>
 8002610:	e01c      	b.n	800264c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002612:	4b0a      	ldr	r3, [pc, #40]	; (800263c <HAL_RCC_OscConfig+0x274>)
 8002614:	2200      	movs	r2, #0
 8002616:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002618:	f7fe fdc2 	bl	80011a0 <HAL_GetTick>
 800261c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800261e:	e00f      	b.n	8002640 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002620:	f7fe fdbe 	bl	80011a0 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b02      	cmp	r3, #2
 800262c:	d908      	bls.n	8002640 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e146      	b.n	80028c0 <HAL_RCC_OscConfig+0x4f8>
 8002632:	bf00      	nop
 8002634:	40021000 	.word	0x40021000
 8002638:	42420000 	.word	0x42420000
 800263c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002640:	4b92      	ldr	r3, [pc, #584]	; (800288c <HAL_RCC_OscConfig+0x4c4>)
 8002642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002644:	f003 0302 	and.w	r3, r3, #2
 8002648:	2b00      	cmp	r3, #0
 800264a:	d1e9      	bne.n	8002620 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0304 	and.w	r3, r3, #4
 8002654:	2b00      	cmp	r3, #0
 8002656:	f000 80a6 	beq.w	80027a6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800265a:	2300      	movs	r3, #0
 800265c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800265e:	4b8b      	ldr	r3, [pc, #556]	; (800288c <HAL_RCC_OscConfig+0x4c4>)
 8002660:	69db      	ldr	r3, [r3, #28]
 8002662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d10d      	bne.n	8002686 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800266a:	4b88      	ldr	r3, [pc, #544]	; (800288c <HAL_RCC_OscConfig+0x4c4>)
 800266c:	69db      	ldr	r3, [r3, #28]
 800266e:	4a87      	ldr	r2, [pc, #540]	; (800288c <HAL_RCC_OscConfig+0x4c4>)
 8002670:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002674:	61d3      	str	r3, [r2, #28]
 8002676:	4b85      	ldr	r3, [pc, #532]	; (800288c <HAL_RCC_OscConfig+0x4c4>)
 8002678:	69db      	ldr	r3, [r3, #28]
 800267a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800267e:	60bb      	str	r3, [r7, #8]
 8002680:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002682:	2301      	movs	r3, #1
 8002684:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002686:	4b82      	ldr	r3, [pc, #520]	; (8002890 <HAL_RCC_OscConfig+0x4c8>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800268e:	2b00      	cmp	r3, #0
 8002690:	d118      	bne.n	80026c4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002692:	4b7f      	ldr	r3, [pc, #508]	; (8002890 <HAL_RCC_OscConfig+0x4c8>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a7e      	ldr	r2, [pc, #504]	; (8002890 <HAL_RCC_OscConfig+0x4c8>)
 8002698:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800269c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800269e:	f7fe fd7f 	bl	80011a0 <HAL_GetTick>
 80026a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026a4:	e008      	b.n	80026b8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026a6:	f7fe fd7b 	bl	80011a0 <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	2b64      	cmp	r3, #100	; 0x64
 80026b2:	d901      	bls.n	80026b8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80026b4:	2303      	movs	r3, #3
 80026b6:	e103      	b.n	80028c0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b8:	4b75      	ldr	r3, [pc, #468]	; (8002890 <HAL_RCC_OscConfig+0x4c8>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d0f0      	beq.n	80026a6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d106      	bne.n	80026da <HAL_RCC_OscConfig+0x312>
 80026cc:	4b6f      	ldr	r3, [pc, #444]	; (800288c <HAL_RCC_OscConfig+0x4c4>)
 80026ce:	6a1b      	ldr	r3, [r3, #32]
 80026d0:	4a6e      	ldr	r2, [pc, #440]	; (800288c <HAL_RCC_OscConfig+0x4c4>)
 80026d2:	f043 0301 	orr.w	r3, r3, #1
 80026d6:	6213      	str	r3, [r2, #32]
 80026d8:	e02d      	b.n	8002736 <HAL_RCC_OscConfig+0x36e>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d10c      	bne.n	80026fc <HAL_RCC_OscConfig+0x334>
 80026e2:	4b6a      	ldr	r3, [pc, #424]	; (800288c <HAL_RCC_OscConfig+0x4c4>)
 80026e4:	6a1b      	ldr	r3, [r3, #32]
 80026e6:	4a69      	ldr	r2, [pc, #420]	; (800288c <HAL_RCC_OscConfig+0x4c4>)
 80026e8:	f023 0301 	bic.w	r3, r3, #1
 80026ec:	6213      	str	r3, [r2, #32]
 80026ee:	4b67      	ldr	r3, [pc, #412]	; (800288c <HAL_RCC_OscConfig+0x4c4>)
 80026f0:	6a1b      	ldr	r3, [r3, #32]
 80026f2:	4a66      	ldr	r2, [pc, #408]	; (800288c <HAL_RCC_OscConfig+0x4c4>)
 80026f4:	f023 0304 	bic.w	r3, r3, #4
 80026f8:	6213      	str	r3, [r2, #32]
 80026fa:	e01c      	b.n	8002736 <HAL_RCC_OscConfig+0x36e>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	2b05      	cmp	r3, #5
 8002702:	d10c      	bne.n	800271e <HAL_RCC_OscConfig+0x356>
 8002704:	4b61      	ldr	r3, [pc, #388]	; (800288c <HAL_RCC_OscConfig+0x4c4>)
 8002706:	6a1b      	ldr	r3, [r3, #32]
 8002708:	4a60      	ldr	r2, [pc, #384]	; (800288c <HAL_RCC_OscConfig+0x4c4>)
 800270a:	f043 0304 	orr.w	r3, r3, #4
 800270e:	6213      	str	r3, [r2, #32]
 8002710:	4b5e      	ldr	r3, [pc, #376]	; (800288c <HAL_RCC_OscConfig+0x4c4>)
 8002712:	6a1b      	ldr	r3, [r3, #32]
 8002714:	4a5d      	ldr	r2, [pc, #372]	; (800288c <HAL_RCC_OscConfig+0x4c4>)
 8002716:	f043 0301 	orr.w	r3, r3, #1
 800271a:	6213      	str	r3, [r2, #32]
 800271c:	e00b      	b.n	8002736 <HAL_RCC_OscConfig+0x36e>
 800271e:	4b5b      	ldr	r3, [pc, #364]	; (800288c <HAL_RCC_OscConfig+0x4c4>)
 8002720:	6a1b      	ldr	r3, [r3, #32]
 8002722:	4a5a      	ldr	r2, [pc, #360]	; (800288c <HAL_RCC_OscConfig+0x4c4>)
 8002724:	f023 0301 	bic.w	r3, r3, #1
 8002728:	6213      	str	r3, [r2, #32]
 800272a:	4b58      	ldr	r3, [pc, #352]	; (800288c <HAL_RCC_OscConfig+0x4c4>)
 800272c:	6a1b      	ldr	r3, [r3, #32]
 800272e:	4a57      	ldr	r2, [pc, #348]	; (800288c <HAL_RCC_OscConfig+0x4c4>)
 8002730:	f023 0304 	bic.w	r3, r3, #4
 8002734:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d015      	beq.n	800276a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800273e:	f7fe fd2f 	bl	80011a0 <HAL_GetTick>
 8002742:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002744:	e00a      	b.n	800275c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002746:	f7fe fd2b 	bl	80011a0 <HAL_GetTick>
 800274a:	4602      	mov	r2, r0
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	f241 3288 	movw	r2, #5000	; 0x1388
 8002754:	4293      	cmp	r3, r2
 8002756:	d901      	bls.n	800275c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e0b1      	b.n	80028c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800275c:	4b4b      	ldr	r3, [pc, #300]	; (800288c <HAL_RCC_OscConfig+0x4c4>)
 800275e:	6a1b      	ldr	r3, [r3, #32]
 8002760:	f003 0302 	and.w	r3, r3, #2
 8002764:	2b00      	cmp	r3, #0
 8002766:	d0ee      	beq.n	8002746 <HAL_RCC_OscConfig+0x37e>
 8002768:	e014      	b.n	8002794 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800276a:	f7fe fd19 	bl	80011a0 <HAL_GetTick>
 800276e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002770:	e00a      	b.n	8002788 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002772:	f7fe fd15 	bl	80011a0 <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002780:	4293      	cmp	r3, r2
 8002782:	d901      	bls.n	8002788 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e09b      	b.n	80028c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002788:	4b40      	ldr	r3, [pc, #256]	; (800288c <HAL_RCC_OscConfig+0x4c4>)
 800278a:	6a1b      	ldr	r3, [r3, #32]
 800278c:	f003 0302 	and.w	r3, r3, #2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d1ee      	bne.n	8002772 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002794:	7dfb      	ldrb	r3, [r7, #23]
 8002796:	2b01      	cmp	r3, #1
 8002798:	d105      	bne.n	80027a6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800279a:	4b3c      	ldr	r3, [pc, #240]	; (800288c <HAL_RCC_OscConfig+0x4c4>)
 800279c:	69db      	ldr	r3, [r3, #28]
 800279e:	4a3b      	ldr	r2, [pc, #236]	; (800288c <HAL_RCC_OscConfig+0x4c4>)
 80027a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027a4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	69db      	ldr	r3, [r3, #28]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	f000 8087 	beq.w	80028be <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027b0:	4b36      	ldr	r3, [pc, #216]	; (800288c <HAL_RCC_OscConfig+0x4c4>)
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f003 030c 	and.w	r3, r3, #12
 80027b8:	2b08      	cmp	r3, #8
 80027ba:	d061      	beq.n	8002880 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	69db      	ldr	r3, [r3, #28]
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d146      	bne.n	8002852 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027c4:	4b33      	ldr	r3, [pc, #204]	; (8002894 <HAL_RCC_OscConfig+0x4cc>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ca:	f7fe fce9 	bl	80011a0 <HAL_GetTick>
 80027ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027d0:	e008      	b.n	80027e4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027d2:	f7fe fce5 	bl	80011a0 <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d901      	bls.n	80027e4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	e06d      	b.n	80028c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027e4:	4b29      	ldr	r3, [pc, #164]	; (800288c <HAL_RCC_OscConfig+0x4c4>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d1f0      	bne.n	80027d2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6a1b      	ldr	r3, [r3, #32]
 80027f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027f8:	d108      	bne.n	800280c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80027fa:	4b24      	ldr	r3, [pc, #144]	; (800288c <HAL_RCC_OscConfig+0x4c4>)
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	4921      	ldr	r1, [pc, #132]	; (800288c <HAL_RCC_OscConfig+0x4c4>)
 8002808:	4313      	orrs	r3, r2
 800280a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800280c:	4b1f      	ldr	r3, [pc, #124]	; (800288c <HAL_RCC_OscConfig+0x4c4>)
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6a19      	ldr	r1, [r3, #32]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281c:	430b      	orrs	r3, r1
 800281e:	491b      	ldr	r1, [pc, #108]	; (800288c <HAL_RCC_OscConfig+0x4c4>)
 8002820:	4313      	orrs	r3, r2
 8002822:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002824:	4b1b      	ldr	r3, [pc, #108]	; (8002894 <HAL_RCC_OscConfig+0x4cc>)
 8002826:	2201      	movs	r2, #1
 8002828:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800282a:	f7fe fcb9 	bl	80011a0 <HAL_GetTick>
 800282e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002830:	e008      	b.n	8002844 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002832:	f7fe fcb5 	bl	80011a0 <HAL_GetTick>
 8002836:	4602      	mov	r2, r0
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	2b02      	cmp	r3, #2
 800283e:	d901      	bls.n	8002844 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002840:	2303      	movs	r3, #3
 8002842:	e03d      	b.n	80028c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002844:	4b11      	ldr	r3, [pc, #68]	; (800288c <HAL_RCC_OscConfig+0x4c4>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d0f0      	beq.n	8002832 <HAL_RCC_OscConfig+0x46a>
 8002850:	e035      	b.n	80028be <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002852:	4b10      	ldr	r3, [pc, #64]	; (8002894 <HAL_RCC_OscConfig+0x4cc>)
 8002854:	2200      	movs	r2, #0
 8002856:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002858:	f7fe fca2 	bl	80011a0 <HAL_GetTick>
 800285c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800285e:	e008      	b.n	8002872 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002860:	f7fe fc9e 	bl	80011a0 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b02      	cmp	r3, #2
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e026      	b.n	80028c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002872:	4b06      	ldr	r3, [pc, #24]	; (800288c <HAL_RCC_OscConfig+0x4c4>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d1f0      	bne.n	8002860 <HAL_RCC_OscConfig+0x498>
 800287e:	e01e      	b.n	80028be <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	69db      	ldr	r3, [r3, #28]
 8002884:	2b01      	cmp	r3, #1
 8002886:	d107      	bne.n	8002898 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e019      	b.n	80028c0 <HAL_RCC_OscConfig+0x4f8>
 800288c:	40021000 	.word	0x40021000
 8002890:	40007000 	.word	0x40007000
 8002894:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002898:	4b0b      	ldr	r3, [pc, #44]	; (80028c8 <HAL_RCC_OscConfig+0x500>)
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6a1b      	ldr	r3, [r3, #32]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d106      	bne.n	80028ba <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d001      	beq.n	80028be <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e000      	b.n	80028c0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80028be:	2300      	movs	r3, #0
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3718      	adds	r7, #24
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	40021000 	.word	0x40021000

080028cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d101      	bne.n	80028e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e0d0      	b.n	8002a82 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028e0:	4b6a      	ldr	r3, [pc, #424]	; (8002a8c <HAL_RCC_ClockConfig+0x1c0>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0307 	and.w	r3, r3, #7
 80028e8:	683a      	ldr	r2, [r7, #0]
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d910      	bls.n	8002910 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ee:	4b67      	ldr	r3, [pc, #412]	; (8002a8c <HAL_RCC_ClockConfig+0x1c0>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f023 0207 	bic.w	r2, r3, #7
 80028f6:	4965      	ldr	r1, [pc, #404]	; (8002a8c <HAL_RCC_ClockConfig+0x1c0>)
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028fe:	4b63      	ldr	r3, [pc, #396]	; (8002a8c <HAL_RCC_ClockConfig+0x1c0>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0307 	and.w	r3, r3, #7
 8002906:	683a      	ldr	r2, [r7, #0]
 8002908:	429a      	cmp	r2, r3
 800290a:	d001      	beq.n	8002910 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e0b8      	b.n	8002a82 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0302 	and.w	r3, r3, #2
 8002918:	2b00      	cmp	r3, #0
 800291a:	d020      	beq.n	800295e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0304 	and.w	r3, r3, #4
 8002924:	2b00      	cmp	r3, #0
 8002926:	d005      	beq.n	8002934 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002928:	4b59      	ldr	r3, [pc, #356]	; (8002a90 <HAL_RCC_ClockConfig+0x1c4>)
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	4a58      	ldr	r2, [pc, #352]	; (8002a90 <HAL_RCC_ClockConfig+0x1c4>)
 800292e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002932:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0308 	and.w	r3, r3, #8
 800293c:	2b00      	cmp	r3, #0
 800293e:	d005      	beq.n	800294c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002940:	4b53      	ldr	r3, [pc, #332]	; (8002a90 <HAL_RCC_ClockConfig+0x1c4>)
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	4a52      	ldr	r2, [pc, #328]	; (8002a90 <HAL_RCC_ClockConfig+0x1c4>)
 8002946:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800294a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800294c:	4b50      	ldr	r3, [pc, #320]	; (8002a90 <HAL_RCC_ClockConfig+0x1c4>)
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	494d      	ldr	r1, [pc, #308]	; (8002a90 <HAL_RCC_ClockConfig+0x1c4>)
 800295a:	4313      	orrs	r3, r2
 800295c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0301 	and.w	r3, r3, #1
 8002966:	2b00      	cmp	r3, #0
 8002968:	d040      	beq.n	80029ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	2b01      	cmp	r3, #1
 8002970:	d107      	bne.n	8002982 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002972:	4b47      	ldr	r3, [pc, #284]	; (8002a90 <HAL_RCC_ClockConfig+0x1c4>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d115      	bne.n	80029aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e07f      	b.n	8002a82 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	2b02      	cmp	r3, #2
 8002988:	d107      	bne.n	800299a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800298a:	4b41      	ldr	r3, [pc, #260]	; (8002a90 <HAL_RCC_ClockConfig+0x1c4>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d109      	bne.n	80029aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e073      	b.n	8002a82 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800299a:	4b3d      	ldr	r3, [pc, #244]	; (8002a90 <HAL_RCC_ClockConfig+0x1c4>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0302 	and.w	r3, r3, #2
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d101      	bne.n	80029aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e06b      	b.n	8002a82 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029aa:	4b39      	ldr	r3, [pc, #228]	; (8002a90 <HAL_RCC_ClockConfig+0x1c4>)
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f023 0203 	bic.w	r2, r3, #3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	4936      	ldr	r1, [pc, #216]	; (8002a90 <HAL_RCC_ClockConfig+0x1c4>)
 80029b8:	4313      	orrs	r3, r2
 80029ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029bc:	f7fe fbf0 	bl	80011a0 <HAL_GetTick>
 80029c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029c2:	e00a      	b.n	80029da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029c4:	f7fe fbec 	bl	80011a0 <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d901      	bls.n	80029da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e053      	b.n	8002a82 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029da:	4b2d      	ldr	r3, [pc, #180]	; (8002a90 <HAL_RCC_ClockConfig+0x1c4>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f003 020c 	and.w	r2, r3, #12
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d1eb      	bne.n	80029c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029ec:	4b27      	ldr	r3, [pc, #156]	; (8002a8c <HAL_RCC_ClockConfig+0x1c0>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0307 	and.w	r3, r3, #7
 80029f4:	683a      	ldr	r2, [r7, #0]
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d210      	bcs.n	8002a1c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029fa:	4b24      	ldr	r3, [pc, #144]	; (8002a8c <HAL_RCC_ClockConfig+0x1c0>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f023 0207 	bic.w	r2, r3, #7
 8002a02:	4922      	ldr	r1, [pc, #136]	; (8002a8c <HAL_RCC_ClockConfig+0x1c0>)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a0a:	4b20      	ldr	r3, [pc, #128]	; (8002a8c <HAL_RCC_ClockConfig+0x1c0>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0307 	and.w	r3, r3, #7
 8002a12:	683a      	ldr	r2, [r7, #0]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d001      	beq.n	8002a1c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e032      	b.n	8002a82 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0304 	and.w	r3, r3, #4
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d008      	beq.n	8002a3a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a28:	4b19      	ldr	r3, [pc, #100]	; (8002a90 <HAL_RCC_ClockConfig+0x1c4>)
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	4916      	ldr	r1, [pc, #88]	; (8002a90 <HAL_RCC_ClockConfig+0x1c4>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0308 	and.w	r3, r3, #8
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d009      	beq.n	8002a5a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a46:	4b12      	ldr	r3, [pc, #72]	; (8002a90 <HAL_RCC_ClockConfig+0x1c4>)
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	00db      	lsls	r3, r3, #3
 8002a54:	490e      	ldr	r1, [pc, #56]	; (8002a90 <HAL_RCC_ClockConfig+0x1c4>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a5a:	f000 f821 	bl	8002aa0 <HAL_RCC_GetSysClockFreq>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	4b0b      	ldr	r3, [pc, #44]	; (8002a90 <HAL_RCC_ClockConfig+0x1c4>)
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	091b      	lsrs	r3, r3, #4
 8002a66:	f003 030f 	and.w	r3, r3, #15
 8002a6a:	490a      	ldr	r1, [pc, #40]	; (8002a94 <HAL_RCC_ClockConfig+0x1c8>)
 8002a6c:	5ccb      	ldrb	r3, [r1, r3]
 8002a6e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a72:	4a09      	ldr	r2, [pc, #36]	; (8002a98 <HAL_RCC_ClockConfig+0x1cc>)
 8002a74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a76:	4b09      	ldr	r3, [pc, #36]	; (8002a9c <HAL_RCC_ClockConfig+0x1d0>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7fe fb4e 	bl	800111c <HAL_InitTick>

  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3710      	adds	r7, #16
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	40022000 	.word	0x40022000
 8002a90:	40021000 	.word	0x40021000
 8002a94:	08004bd8 	.word	0x08004bd8
 8002a98:	20000000 	.word	0x20000000
 8002a9c:	20000004 	.word	0x20000004

08002aa0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002aa0:	b490      	push	{r4, r7}
 8002aa2:	b08a      	sub	sp, #40	; 0x28
 8002aa4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002aa6:	4b29      	ldr	r3, [pc, #164]	; (8002b4c <HAL_RCC_GetSysClockFreq+0xac>)
 8002aa8:	1d3c      	adds	r4, r7, #4
 8002aaa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002aac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002ab0:	f240 2301 	movw	r3, #513	; 0x201
 8002ab4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	61fb      	str	r3, [r7, #28]
 8002aba:	2300      	movs	r3, #0
 8002abc:	61bb      	str	r3, [r7, #24]
 8002abe:	2300      	movs	r3, #0
 8002ac0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002aca:	4b21      	ldr	r3, [pc, #132]	; (8002b50 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	f003 030c 	and.w	r3, r3, #12
 8002ad6:	2b04      	cmp	r3, #4
 8002ad8:	d002      	beq.n	8002ae0 <HAL_RCC_GetSysClockFreq+0x40>
 8002ada:	2b08      	cmp	r3, #8
 8002adc:	d003      	beq.n	8002ae6 <HAL_RCC_GetSysClockFreq+0x46>
 8002ade:	e02b      	b.n	8002b38 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ae0:	4b1c      	ldr	r3, [pc, #112]	; (8002b54 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002ae2:	623b      	str	r3, [r7, #32]
      break;
 8002ae4:	e02b      	b.n	8002b3e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	0c9b      	lsrs	r3, r3, #18
 8002aea:	f003 030f 	and.w	r3, r3, #15
 8002aee:	3328      	adds	r3, #40	; 0x28
 8002af0:	443b      	add	r3, r7
 8002af2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002af6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d012      	beq.n	8002b28 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b02:	4b13      	ldr	r3, [pc, #76]	; (8002b50 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	0c5b      	lsrs	r3, r3, #17
 8002b08:	f003 0301 	and.w	r3, r3, #1
 8002b0c:	3328      	adds	r3, #40	; 0x28
 8002b0e:	443b      	add	r3, r7
 8002b10:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002b14:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	4a0e      	ldr	r2, [pc, #56]	; (8002b54 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b1a:	fb03 f202 	mul.w	r2, r3, r2
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b24:	627b      	str	r3, [r7, #36]	; 0x24
 8002b26:	e004      	b.n	8002b32 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	4a0b      	ldr	r2, [pc, #44]	; (8002b58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b2c:	fb02 f303 	mul.w	r3, r2, r3
 8002b30:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b34:	623b      	str	r3, [r7, #32]
      break;
 8002b36:	e002      	b.n	8002b3e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b38:	4b06      	ldr	r3, [pc, #24]	; (8002b54 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b3a:	623b      	str	r3, [r7, #32]
      break;
 8002b3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b3e:	6a3b      	ldr	r3, [r7, #32]
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3728      	adds	r7, #40	; 0x28
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bc90      	pop	{r4, r7}
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop
 8002b4c:	080045c8 	.word	0x080045c8
 8002b50:	40021000 	.word	0x40021000
 8002b54:	007a1200 	.word	0x007a1200
 8002b58:	003d0900 	.word	0x003d0900

08002b5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b60:	4b02      	ldr	r3, [pc, #8]	; (8002b6c <HAL_RCC_GetHCLKFreq+0x10>)
 8002b62:	681b      	ldr	r3, [r3, #0]
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bc80      	pop	{r7}
 8002b6a:	4770      	bx	lr
 8002b6c:	20000000 	.word	0x20000000

08002b70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b74:	f7ff fff2 	bl	8002b5c <HAL_RCC_GetHCLKFreq>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	4b05      	ldr	r3, [pc, #20]	; (8002b90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	0a1b      	lsrs	r3, r3, #8
 8002b80:	f003 0307 	and.w	r3, r3, #7
 8002b84:	4903      	ldr	r1, [pc, #12]	; (8002b94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b86:	5ccb      	ldrb	r3, [r1, r3]
 8002b88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	40021000 	.word	0x40021000
 8002b94:	08004be8 	.word	0x08004be8

08002b98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b9c:	f7ff ffde 	bl	8002b5c <HAL_RCC_GetHCLKFreq>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	4b05      	ldr	r3, [pc, #20]	; (8002bb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	0adb      	lsrs	r3, r3, #11
 8002ba8:	f003 0307 	and.w	r3, r3, #7
 8002bac:	4903      	ldr	r1, [pc, #12]	; (8002bbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bae:	5ccb      	ldrb	r3, [r1, r3]
 8002bb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	40021000 	.word	0x40021000
 8002bbc:	08004be8 	.word	0x08004be8

08002bc0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b085      	sub	sp, #20
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002bc8:	4b0a      	ldr	r3, [pc, #40]	; (8002bf4 <RCC_Delay+0x34>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a0a      	ldr	r2, [pc, #40]	; (8002bf8 <RCC_Delay+0x38>)
 8002bce:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd2:	0a5b      	lsrs	r3, r3, #9
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	fb02 f303 	mul.w	r3, r2, r3
 8002bda:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002bdc:	bf00      	nop
  }
  while (Delay --);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	1e5a      	subs	r2, r3, #1
 8002be2:	60fa      	str	r2, [r7, #12]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d1f9      	bne.n	8002bdc <RCC_Delay+0x1c>
}
 8002be8:	bf00      	nop
 8002bea:	bf00      	nop
 8002bec:	3714      	adds	r7, #20
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bc80      	pop	{r7}
 8002bf2:	4770      	bx	lr
 8002bf4:	20000000 	.word	0x20000000
 8002bf8:	10624dd3 	.word	0x10624dd3

08002bfc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b086      	sub	sp, #24
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002c04:	2300      	movs	r3, #0
 8002c06:	613b      	str	r3, [r7, #16]
 8002c08:	2300      	movs	r3, #0
 8002c0a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0301 	and.w	r3, r3, #1
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d07d      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c1c:	4b4f      	ldr	r3, [pc, #316]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c1e:	69db      	ldr	r3, [r3, #28]
 8002c20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d10d      	bne.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c28:	4b4c      	ldr	r3, [pc, #304]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c2a:	69db      	ldr	r3, [r3, #28]
 8002c2c:	4a4b      	ldr	r2, [pc, #300]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c32:	61d3      	str	r3, [r2, #28]
 8002c34:	4b49      	ldr	r3, [pc, #292]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c36:	69db      	ldr	r3, [r3, #28]
 8002c38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c3c:	60bb      	str	r3, [r7, #8]
 8002c3e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c40:	2301      	movs	r3, #1
 8002c42:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c44:	4b46      	ldr	r3, [pc, #280]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d118      	bne.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c50:	4b43      	ldr	r3, [pc, #268]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a42      	ldr	r2, [pc, #264]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c5a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c5c:	f7fe faa0 	bl	80011a0 <HAL_GetTick>
 8002c60:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c62:	e008      	b.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c64:	f7fe fa9c 	bl	80011a0 <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	2b64      	cmp	r3, #100	; 0x64
 8002c70:	d901      	bls.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e06d      	b.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c76:	4b3a      	ldr	r3, [pc, #232]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d0f0      	beq.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c82:	4b36      	ldr	r3, [pc, #216]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c84:	6a1b      	ldr	r3, [r3, #32]
 8002c86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c8a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d02e      	beq.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c9a:	68fa      	ldr	r2, [r7, #12]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d027      	beq.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ca0:	4b2e      	ldr	r3, [pc, #184]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ca2:	6a1b      	ldr	r3, [r3, #32]
 8002ca4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ca8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002caa:	4b2e      	ldr	r3, [pc, #184]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002cac:	2201      	movs	r2, #1
 8002cae:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002cb0:	4b2c      	ldr	r3, [pc, #176]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002cb6:	4a29      	ldr	r2, [pc, #164]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d014      	beq.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc6:	f7fe fa6b 	bl	80011a0 <HAL_GetTick>
 8002cca:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ccc:	e00a      	b.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cce:	f7fe fa67 	bl	80011a0 <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d901      	bls.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e036      	b.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ce4:	4b1d      	ldr	r3, [pc, #116]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ce6:	6a1b      	ldr	r3, [r3, #32]
 8002ce8:	f003 0302 	and.w	r3, r3, #2
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d0ee      	beq.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cf0:	4b1a      	ldr	r3, [pc, #104]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cf2:	6a1b      	ldr	r3, [r3, #32]
 8002cf4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	4917      	ldr	r1, [pc, #92]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d02:	7dfb      	ldrb	r3, [r7, #23]
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d105      	bne.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d08:	4b14      	ldr	r3, [pc, #80]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d0a:	69db      	ldr	r3, [r3, #28]
 8002d0c:	4a13      	ldr	r2, [pc, #76]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d12:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0302 	and.w	r3, r3, #2
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d008      	beq.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d20:	4b0e      	ldr	r3, [pc, #56]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	490b      	ldr	r1, [pc, #44]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0310 	and.w	r3, r3, #16
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d008      	beq.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d3e:	4b07      	ldr	r3, [pc, #28]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	4904      	ldr	r1, [pc, #16]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3718      	adds	r7, #24
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	40021000 	.word	0x40021000
 8002d60:	40007000 	.word	0x40007000
 8002d64:	42420440 	.word	0x42420440

08002d68 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002d68:	b590      	push	{r4, r7, lr}
 8002d6a:	b08d      	sub	sp, #52	; 0x34
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002d70:	4b6a      	ldr	r3, [pc, #424]	; (8002f1c <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 8002d72:	f107 040c 	add.w	r4, r7, #12
 8002d76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002d7c:	f240 2301 	movw	r3, #513	; 0x201
 8002d80:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002d82:	2300      	movs	r3, #0
 8002d84:	627b      	str	r3, [r7, #36]	; 0x24
 8002d86:	2300      	movs	r3, #0
 8002d88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	61fb      	str	r3, [r7, #28]
 8002d92:	2300      	movs	r3, #0
 8002d94:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	3b01      	subs	r3, #1
 8002d9a:	2b0f      	cmp	r3, #15
 8002d9c:	f200 80b4 	bhi.w	8002f08 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>
 8002da0:	a201      	add	r2, pc, #4	; (adr r2, 8002da8 <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
 8002da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002da6:	bf00      	nop
 8002da8:	08002e87 	.word	0x08002e87
 8002dac:	08002eed 	.word	0x08002eed
 8002db0:	08002f09 	.word	0x08002f09
 8002db4:	08002e77 	.word	0x08002e77
 8002db8:	08002f09 	.word	0x08002f09
 8002dbc:	08002f09 	.word	0x08002f09
 8002dc0:	08002f09 	.word	0x08002f09
 8002dc4:	08002e7f 	.word	0x08002e7f
 8002dc8:	08002f09 	.word	0x08002f09
 8002dcc:	08002f09 	.word	0x08002f09
 8002dd0:	08002f09 	.word	0x08002f09
 8002dd4:	08002f09 	.word	0x08002f09
 8002dd8:	08002f09 	.word	0x08002f09
 8002ddc:	08002f09 	.word	0x08002f09
 8002de0:	08002f09 	.word	0x08002f09
 8002de4:	08002de9 	.word	0x08002de9
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8002de8:	4b4d      	ldr	r3, [pc, #308]	; (8002f20 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	61fb      	str	r3, [r7, #28]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002dee:	4b4c      	ldr	r3, [pc, #304]	; (8002f20 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	f000 8088 	beq.w	8002f0c <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	0c9b      	lsrs	r3, r3, #18
 8002e00:	f003 030f 	and.w	r3, r3, #15
 8002e04:	3330      	adds	r3, #48	; 0x30
 8002e06:	443b      	add	r3, r7
 8002e08:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002e0c:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d017      	beq.n	8002e48 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e18:	4b41      	ldr	r3, [pc, #260]	; (8002f20 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	0c5b      	lsrs	r3, r3, #17
 8002e1e:	f003 0301 	and.w	r3, r3, #1
 8002e22:	3330      	adds	r3, #48	; 0x30
 8002e24:	443b      	add	r3, r7
 8002e26:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002e2a:	627b      	str	r3, [r7, #36]	; 0x24
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d00d      	beq.n	8002e52 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002e36:	4a3b      	ldr	r2, [pc, #236]	; (8002f24 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8002e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3a:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e3e:	6a3b      	ldr	r3, [r7, #32]
 8002e40:	fb02 f303 	mul.w	r3, r2, r3
 8002e44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e46:	e004      	b.n	8002e52 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e48:	6a3b      	ldr	r3, [r7, #32]
 8002e4a:	4a37      	ldr	r2, [pc, #220]	; (8002f28 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8002e4c:	fb02 f303 	mul.w	r3, r2, r3
 8002e50:	62fb      	str	r3, [r7, #44]	; 0x2c
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002e52:	4b33      	ldr	r3, [pc, #204]	; (8002f20 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e5e:	d102      	bne.n	8002e66 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8002e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e62:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8002e64:	e052      	b.n	8002f0c <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          frequency = (pllclk * 2) / 3;
 8002e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e68:	005b      	lsls	r3, r3, #1
 8002e6a:	4a30      	ldr	r2, [pc, #192]	; (8002f2c <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 8002e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e70:	085b      	lsrs	r3, r3, #1
 8002e72:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002e74:	e04a      	b.n	8002f0c <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 8002e76:	f7ff fe13 	bl	8002aa0 <HAL_RCC_GetSysClockFreq>
 8002e7a:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8002e7c:	e049      	b.n	8002f12 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 8002e7e:	f7ff fe0f 	bl	8002aa0 <HAL_RCC_GetSysClockFreq>
 8002e82:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8002e84:	e045      	b.n	8002f12 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8002e86:	4b26      	ldr	r3, [pc, #152]	; (8002f20 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8002e88:	6a1b      	ldr	r3, [r3, #32]
 8002e8a:	61fb      	str	r3, [r7, #28]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e96:	d108      	bne.n	8002eaa <HAL_RCCEx_GetPeriphCLKFreq+0x142>
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	f003 0302 	and.w	r3, r3, #2
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d003      	beq.n	8002eaa <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      {
        frequency = LSE_VALUE;
 8002ea2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ea6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ea8:	e01f      	b.n	8002eea <HAL_RCCEx_GetPeriphCLKFreq+0x182>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002eb4:	d109      	bne.n	8002eca <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 8002eb6:	4b1a      	ldr	r3, [pc, #104]	; (8002f20 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8002eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d003      	beq.n	8002eca <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      {
        frequency = LSI_VALUE;
 8002ec2:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002ec6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ec8:	e00f      	b.n	8002eea <HAL_RCCEx_GetPeriphCLKFreq+0x182>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ed0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ed4:	d11c      	bne.n	8002f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 8002ed6:	4b12      	ldr	r3, [pc, #72]	; (8002f20 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d016      	beq.n	8002f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
      {
        frequency = HSE_VALUE / 128U;
 8002ee2:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002ee6:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8002ee8:	e012      	b.n	8002f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 8002eea:	e011      	b.n	8002f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002eec:	f7ff fe54 	bl	8002b98 <HAL_RCC_GetPCLK2Freq>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	4b0b      	ldr	r3, [pc, #44]	; (8002f20 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	0b9b      	lsrs	r3, r3, #14
 8002ef8:	f003 0303 	and.w	r3, r3, #3
 8002efc:	3301      	adds	r3, #1
 8002efe:	005b      	lsls	r3, r3, #1
 8002f00:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f04:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002f06:	e004      	b.n	8002f12 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
    }
    default:
    {
      break;
 8002f08:	bf00      	nop
 8002f0a:	e002      	b.n	8002f12 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
      break;
 8002f0c:	bf00      	nop
 8002f0e:	e000      	b.n	8002f12 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
      break;
 8002f10:	bf00      	nop
    }
  }
  return (frequency);
 8002f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3734      	adds	r7, #52	; 0x34
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd90      	pop	{r4, r7, pc}
 8002f1c:	080045d8 	.word	0x080045d8
 8002f20:	40021000 	.word	0x40021000
 8002f24:	007a1200 	.word	0x007a1200
 8002f28:	003d0900 	.word	0x003d0900
 8002f2c:	aaaaaaab 	.word	0xaaaaaaab

08002f30 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	60b9      	str	r1, [r7, #8]
 8002f3a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d004      	beq.n	8002f4c <HAL_SRAM_Init+0x1c>
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	699b      	ldr	r3, [r3, #24]
 8002f46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f4a:	d101      	bne.n	8002f50 <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e038      	b.n	8002fc2 <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d106      	bne.n	8002f6a <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8002f64:	68f8      	ldr	r0, [r7, #12]
 8002f66:	f7fe f825 	bl	8000fb4 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	3308      	adds	r3, #8
 8002f72:	4619      	mov	r1, r3
 8002f74:	4610      	mov	r0, r2
 8002f76:	f000 fd5f 	bl	8003a38 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6818      	ldr	r0, [r3, #0]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	461a      	mov	r2, r3
 8002f84:	68b9      	ldr	r1, [r7, #8]
 8002f86:	f000 fdc1 	bl	8003b0c <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6858      	ldr	r0, [r3, #4]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	689a      	ldr	r2, [r3, #8]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f96:	6879      	ldr	r1, [r7, #4]
 8002f98:	f000 fdec 	bl	8003b74 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	68fa      	ldr	r2, [r7, #12]
 8002fa2:	6892      	ldr	r2, [r2, #8]
 8002fa4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	68fa      	ldr	r2, [r7, #12]
 8002fae:	6892      	ldr	r2, [r2, #8]
 8002fb0:	f041 0101 	orr.w	r1, r1, #1
 8002fb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3710      	adds	r7, #16
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	b082      	sub	sp, #8
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d101      	bne.n	8002fdc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e03f      	b.n	800305c <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d106      	bne.n	8002ff6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f7fd ff47 	bl	8000e84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2224      	movs	r2, #36	; 0x24
 8002ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	68da      	ldr	r2, [r3, #12]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800300c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f000 fc84 	bl	800391c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	691a      	ldr	r2, [r3, #16]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003022:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	695a      	ldr	r2, [r3, #20]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003032:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	68da      	ldr	r2, [r3, #12]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003042:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2220      	movs	r2, #32
 800304e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2220      	movs	r2, #32
 8003056:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800305a:	2300      	movs	r3, #0
}
 800305c:	4618      	mov	r0, r3
 800305e:	3708      	adds	r7, #8
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}

08003064 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b08a      	sub	sp, #40	; 0x28
 8003068:	af02      	add	r7, sp, #8
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	603b      	str	r3, [r7, #0]
 8003070:	4613      	mov	r3, r2
 8003072:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003074:	2300      	movs	r3, #0
 8003076:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800307e:	b2db      	uxtb	r3, r3
 8003080:	2b20      	cmp	r3, #32
 8003082:	d17c      	bne.n	800317e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d002      	beq.n	8003090 <HAL_UART_Transmit+0x2c>
 800308a:	88fb      	ldrh	r3, [r7, #6]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d101      	bne.n	8003094 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e075      	b.n	8003180 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800309a:	2b01      	cmp	r3, #1
 800309c:	d101      	bne.n	80030a2 <HAL_UART_Transmit+0x3e>
 800309e:	2302      	movs	r3, #2
 80030a0:	e06e      	b.n	8003180 <HAL_UART_Transmit+0x11c>
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2201      	movs	r2, #1
 80030a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2200      	movs	r2, #0
 80030ae:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2221      	movs	r2, #33	; 0x21
 80030b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030b8:	f7fe f872 	bl	80011a0 <HAL_GetTick>
 80030bc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	88fa      	ldrh	r2, [r7, #6]
 80030c2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	88fa      	ldrh	r2, [r7, #6]
 80030c8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030d2:	d108      	bne.n	80030e6 <HAL_UART_Transmit+0x82>
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	691b      	ldr	r3, [r3, #16]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d104      	bne.n	80030e6 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80030dc:	2300      	movs	r3, #0
 80030de:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	61bb      	str	r3, [r7, #24]
 80030e4:	e003      	b.n	80030ee <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030ea:	2300      	movs	r3, #0
 80030ec:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80030f6:	e02a      	b.n	800314e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	9300      	str	r3, [sp, #0]
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	2200      	movs	r2, #0
 8003100:	2180      	movs	r1, #128	; 0x80
 8003102:	68f8      	ldr	r0, [r7, #12]
 8003104:	f000 fa37 	bl	8003576 <UART_WaitOnFlagUntilTimeout>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d001      	beq.n	8003112 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e036      	b.n	8003180 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d10b      	bne.n	8003130 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	881b      	ldrh	r3, [r3, #0]
 800311c:	461a      	mov	r2, r3
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003126:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	3302      	adds	r3, #2
 800312c:	61bb      	str	r3, [r7, #24]
 800312e:	e007      	b.n	8003140 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	781a      	ldrb	r2, [r3, #0]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	3301      	adds	r3, #1
 800313e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003144:	b29b      	uxth	r3, r3
 8003146:	3b01      	subs	r3, #1
 8003148:	b29a      	uxth	r2, r3
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003152:	b29b      	uxth	r3, r3
 8003154:	2b00      	cmp	r3, #0
 8003156:	d1cf      	bne.n	80030f8 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	9300      	str	r3, [sp, #0]
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	2200      	movs	r2, #0
 8003160:	2140      	movs	r1, #64	; 0x40
 8003162:	68f8      	ldr	r0, [r7, #12]
 8003164:	f000 fa07 	bl	8003576 <UART_WaitOnFlagUntilTimeout>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d001      	beq.n	8003172 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e006      	b.n	8003180 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2220      	movs	r2, #32
 8003176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800317a:	2300      	movs	r3, #0
 800317c:	e000      	b.n	8003180 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800317e:	2302      	movs	r3, #2
  }
}
 8003180:	4618      	mov	r0, r3
 8003182:	3720      	adds	r7, #32
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}

08003188 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	60b9      	str	r1, [r7, #8]
 8003192:	4613      	mov	r3, r2
 8003194:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800319c:	b2db      	uxtb	r3, r3
 800319e:	2b20      	cmp	r3, #32
 80031a0:	d11d      	bne.n	80031de <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d002      	beq.n	80031ae <HAL_UART_Receive_IT+0x26>
 80031a8:	88fb      	ldrh	r3, [r7, #6]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d101      	bne.n	80031b2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e016      	b.n	80031e0 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d101      	bne.n	80031c0 <HAL_UART_Receive_IT+0x38>
 80031bc:	2302      	movs	r3, #2
 80031be:	e00f      	b.n	80031e0 <HAL_UART_Receive_IT+0x58>
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2200      	movs	r2, #0
 80031cc:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80031ce:	88fb      	ldrh	r3, [r7, #6]
 80031d0:	461a      	mov	r2, r3
 80031d2:	68b9      	ldr	r1, [r7, #8]
 80031d4:	68f8      	ldr	r0, [r7, #12]
 80031d6:	f000 fa18 	bl	800360a <UART_Start_Receive_IT>
 80031da:	4603      	mov	r3, r0
 80031dc:	e000      	b.n	80031e0 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80031de:	2302      	movs	r3, #2
  }
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3710      	adds	r7, #16
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b08a      	sub	sp, #40	; 0x28
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	695b      	ldr	r3, [r3, #20]
 8003206:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003208:	2300      	movs	r3, #0
 800320a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800320c:	2300      	movs	r3, #0
 800320e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003212:	f003 030f 	and.w	r3, r3, #15
 8003216:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d10d      	bne.n	800323a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800321e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003220:	f003 0320 	and.w	r3, r3, #32
 8003224:	2b00      	cmp	r3, #0
 8003226:	d008      	beq.n	800323a <HAL_UART_IRQHandler+0x52>
 8003228:	6a3b      	ldr	r3, [r7, #32]
 800322a:	f003 0320 	and.w	r3, r3, #32
 800322e:	2b00      	cmp	r3, #0
 8003230:	d003      	beq.n	800323a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 fac9 	bl	80037ca <UART_Receive_IT>
      return;
 8003238:	e17b      	b.n	8003532 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	2b00      	cmp	r3, #0
 800323e:	f000 80b1 	beq.w	80033a4 <HAL_UART_IRQHandler+0x1bc>
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	f003 0301 	and.w	r3, r3, #1
 8003248:	2b00      	cmp	r3, #0
 800324a:	d105      	bne.n	8003258 <HAL_UART_IRQHandler+0x70>
 800324c:	6a3b      	ldr	r3, [r7, #32]
 800324e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003252:	2b00      	cmp	r3, #0
 8003254:	f000 80a6 	beq.w	80033a4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325a:	f003 0301 	and.w	r3, r3, #1
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00a      	beq.n	8003278 <HAL_UART_IRQHandler+0x90>
 8003262:	6a3b      	ldr	r3, [r7, #32]
 8003264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003268:	2b00      	cmp	r3, #0
 800326a:	d005      	beq.n	8003278 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003270:	f043 0201 	orr.w	r2, r3, #1
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327a:	f003 0304 	and.w	r3, r3, #4
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00a      	beq.n	8003298 <HAL_UART_IRQHandler+0xb0>
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	f003 0301 	and.w	r3, r3, #1
 8003288:	2b00      	cmp	r3, #0
 800328a:	d005      	beq.n	8003298 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003290:	f043 0202 	orr.w	r2, r3, #2
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329a:	f003 0302 	and.w	r3, r3, #2
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d00a      	beq.n	80032b8 <HAL_UART_IRQHandler+0xd0>
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	f003 0301 	and.w	r3, r3, #1
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d005      	beq.n	80032b8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b0:	f043 0204 	orr.w	r2, r3, #4
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80032b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ba:	f003 0308 	and.w	r3, r3, #8
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d00f      	beq.n	80032e2 <HAL_UART_IRQHandler+0xfa>
 80032c2:	6a3b      	ldr	r3, [r7, #32]
 80032c4:	f003 0320 	and.w	r3, r3, #32
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d104      	bne.n	80032d6 <HAL_UART_IRQHandler+0xee>
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d005      	beq.n	80032e2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032da:	f043 0208 	orr.w	r2, r3, #8
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	f000 811e 	beq.w	8003528 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80032ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ee:	f003 0320 	and.w	r3, r3, #32
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d007      	beq.n	8003306 <HAL_UART_IRQHandler+0x11e>
 80032f6:	6a3b      	ldr	r3, [r7, #32]
 80032f8:	f003 0320 	and.w	r3, r3, #32
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d002      	beq.n	8003306 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f000 fa62 	bl	80037ca <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	695b      	ldr	r3, [r3, #20]
 800330c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003310:	2b00      	cmp	r3, #0
 8003312:	bf14      	ite	ne
 8003314:	2301      	movne	r3, #1
 8003316:	2300      	moveq	r3, #0
 8003318:	b2db      	uxtb	r3, r3
 800331a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003320:	f003 0308 	and.w	r3, r3, #8
 8003324:	2b00      	cmp	r3, #0
 8003326:	d102      	bne.n	800332e <HAL_UART_IRQHandler+0x146>
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d031      	beq.n	8003392 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 f9a4 	bl	800367c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	695b      	ldr	r3, [r3, #20]
 800333a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800333e:	2b00      	cmp	r3, #0
 8003340:	d023      	beq.n	800338a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	695a      	ldr	r2, [r3, #20]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003350:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003356:	2b00      	cmp	r3, #0
 8003358:	d013      	beq.n	8003382 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800335e:	4a76      	ldr	r2, [pc, #472]	; (8003538 <HAL_UART_IRQHandler+0x350>)
 8003360:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003366:	4618      	mov	r0, r3
 8003368:	f7fe fd7a 	bl	8001e60 <HAL_DMA_Abort_IT>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d016      	beq.n	80033a0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800337c:	4610      	mov	r0, r2
 800337e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003380:	e00e      	b.n	80033a0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f000 f8e3 	bl	800354e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003388:	e00a      	b.n	80033a0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 f8df 	bl	800354e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003390:	e006      	b.n	80033a0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 f8db 	bl	800354e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800339e:	e0c3      	b.n	8003528 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033a0:	bf00      	nop
    return;
 80033a2:	e0c1      	b.n	8003528 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	f040 80a1 	bne.w	80034f0 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80033ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b0:	f003 0310 	and.w	r3, r3, #16
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	f000 809b 	beq.w	80034f0 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80033ba:	6a3b      	ldr	r3, [r7, #32]
 80033bc:	f003 0310 	and.w	r3, r3, #16
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	f000 8095 	beq.w	80034f0 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80033c6:	2300      	movs	r3, #0
 80033c8:	60fb      	str	r3, [r7, #12]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	60fb      	str	r3, [r7, #12]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	60fb      	str	r3, [r7, #12]
 80033da:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	695b      	ldr	r3, [r3, #20]
 80033e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d04e      	beq.n	8003488 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80033f4:	8a3b      	ldrh	r3, [r7, #16]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	f000 8098 	beq.w	800352c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003400:	8a3a      	ldrh	r2, [r7, #16]
 8003402:	429a      	cmp	r2, r3
 8003404:	f080 8092 	bcs.w	800352c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	8a3a      	ldrh	r2, [r7, #16]
 800340c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003412:	699b      	ldr	r3, [r3, #24]
 8003414:	2b20      	cmp	r3, #32
 8003416:	d02b      	beq.n	8003470 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	68da      	ldr	r2, [r3, #12]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003426:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	695a      	ldr	r2, [r3, #20]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f022 0201 	bic.w	r2, r2, #1
 8003436:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	695a      	ldr	r2, [r3, #20]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003446:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2220      	movs	r2, #32
 800344c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	68da      	ldr	r2, [r3, #12]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f022 0210 	bic.w	r2, r2, #16
 8003464:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800346a:	4618      	mov	r0, r3
 800346c:	f7fe fcbd 	bl	8001dea <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003478:	b29b      	uxth	r3, r3
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	b29b      	uxth	r3, r3
 800347e:	4619      	mov	r1, r3
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f000 f86d 	bl	8003560 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003486:	e051      	b.n	800352c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003490:	b29b      	uxth	r3, r3
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800349a:	b29b      	uxth	r3, r3
 800349c:	2b00      	cmp	r3, #0
 800349e:	d047      	beq.n	8003530 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80034a0:	8a7b      	ldrh	r3, [r7, #18]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d044      	beq.n	8003530 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	68da      	ldr	r2, [r3, #12]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80034b4:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	695a      	ldr	r2, [r3, #20]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f022 0201 	bic.w	r2, r2, #1
 80034c4:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2220      	movs	r2, #32
 80034ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	68da      	ldr	r2, [r3, #12]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f022 0210 	bic.w	r2, r2, #16
 80034e2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80034e4:	8a7b      	ldrh	r3, [r7, #18]
 80034e6:	4619      	mov	r1, r3
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f000 f839 	bl	8003560 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80034ee:	e01f      	b.n	8003530 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80034f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d008      	beq.n	800350c <HAL_UART_IRQHandler+0x324>
 80034fa:	6a3b      	ldr	r3, [r7, #32]
 80034fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003500:	2b00      	cmp	r3, #0
 8003502:	d003      	beq.n	800350c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f000 f8f9 	bl	80036fc <UART_Transmit_IT>
    return;
 800350a:	e012      	b.n	8003532 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800350c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003512:	2b00      	cmp	r3, #0
 8003514:	d00d      	beq.n	8003532 <HAL_UART_IRQHandler+0x34a>
 8003516:	6a3b      	ldr	r3, [r7, #32]
 8003518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800351c:	2b00      	cmp	r3, #0
 800351e:	d008      	beq.n	8003532 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f000 f93a 	bl	800379a <UART_EndTransmit_IT>
    return;
 8003526:	e004      	b.n	8003532 <HAL_UART_IRQHandler+0x34a>
    return;
 8003528:	bf00      	nop
 800352a:	e002      	b.n	8003532 <HAL_UART_IRQHandler+0x34a>
      return;
 800352c:	bf00      	nop
 800352e:	e000      	b.n	8003532 <HAL_UART_IRQHandler+0x34a>
      return;
 8003530:	bf00      	nop
  }
}
 8003532:	3728      	adds	r7, #40	; 0x28
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}
 8003538:	080036d5 	.word	0x080036d5

0800353c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003544:	bf00      	nop
 8003546:	370c      	adds	r7, #12
 8003548:	46bd      	mov	sp, r7
 800354a:	bc80      	pop	{r7}
 800354c:	4770      	bx	lr

0800354e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800354e:	b480      	push	{r7}
 8003550:	b083      	sub	sp, #12
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003556:	bf00      	nop
 8003558:	370c      	adds	r7, #12
 800355a:	46bd      	mov	sp, r7
 800355c:	bc80      	pop	{r7}
 800355e:	4770      	bx	lr

08003560 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	460b      	mov	r3, r1
 800356a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800356c:	bf00      	nop
 800356e:	370c      	adds	r7, #12
 8003570:	46bd      	mov	sp, r7
 8003572:	bc80      	pop	{r7}
 8003574:	4770      	bx	lr

08003576 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003576:	b580      	push	{r7, lr}
 8003578:	b084      	sub	sp, #16
 800357a:	af00      	add	r7, sp, #0
 800357c:	60f8      	str	r0, [r7, #12]
 800357e:	60b9      	str	r1, [r7, #8]
 8003580:	603b      	str	r3, [r7, #0]
 8003582:	4613      	mov	r3, r2
 8003584:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003586:	e02c      	b.n	80035e2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800358e:	d028      	beq.n	80035e2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003590:	69bb      	ldr	r3, [r7, #24]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d007      	beq.n	80035a6 <UART_WaitOnFlagUntilTimeout+0x30>
 8003596:	f7fd fe03 	bl	80011a0 <HAL_GetTick>
 800359a:	4602      	mov	r2, r0
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	69ba      	ldr	r2, [r7, #24]
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d21d      	bcs.n	80035e2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	68da      	ldr	r2, [r3, #12]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80035b4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	695a      	ldr	r2, [r3, #20]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f022 0201 	bic.w	r2, r2, #1
 80035c4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2220      	movs	r2, #32
 80035ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2220      	movs	r2, #32
 80035d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e00f      	b.n	8003602 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	4013      	ands	r3, r2
 80035ec:	68ba      	ldr	r2, [r7, #8]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	bf0c      	ite	eq
 80035f2:	2301      	moveq	r3, #1
 80035f4:	2300      	movne	r3, #0
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	461a      	mov	r2, r3
 80035fa:	79fb      	ldrb	r3, [r7, #7]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d0c3      	beq.n	8003588 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	3710      	adds	r7, #16
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}

0800360a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800360a:	b480      	push	{r7}
 800360c:	b085      	sub	sp, #20
 800360e:	af00      	add	r7, sp, #0
 8003610:	60f8      	str	r0, [r7, #12]
 8003612:	60b9      	str	r1, [r7, #8]
 8003614:	4613      	mov	r3, r2
 8003616:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	68ba      	ldr	r2, [r7, #8]
 800361c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	88fa      	ldrh	r2, [r7, #6]
 8003622:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	88fa      	ldrh	r2, [r7, #6]
 8003628:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2200      	movs	r2, #0
 800362e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2222      	movs	r2, #34	; 0x22
 8003634:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2200      	movs	r2, #0
 800363c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	68da      	ldr	r2, [r3, #12]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800364e:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	695a      	ldr	r2, [r3, #20]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f042 0201 	orr.w	r2, r2, #1
 800365e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68da      	ldr	r2, [r3, #12]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f042 0220 	orr.w	r2, r2, #32
 800366e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003670:	2300      	movs	r3, #0
}
 8003672:	4618      	mov	r0, r3
 8003674:	3714      	adds	r7, #20
 8003676:	46bd      	mov	sp, r7
 8003678:	bc80      	pop	{r7}
 800367a:	4770      	bx	lr

0800367c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68da      	ldr	r2, [r3, #12]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003692:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	695a      	ldr	r2, [r3, #20]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f022 0201 	bic.w	r2, r2, #1
 80036a2:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d107      	bne.n	80036bc <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68da      	ldr	r2, [r3, #12]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f022 0210 	bic.w	r2, r2, #16
 80036ba:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2220      	movs	r2, #32
 80036c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80036ca:	bf00      	nop
 80036cc:	370c      	adds	r7, #12
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bc80      	pop	{r7}
 80036d2:	4770      	bx	lr

080036d4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b084      	sub	sp, #16
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2200      	movs	r2, #0
 80036e6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2200      	movs	r2, #0
 80036ec:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80036ee:	68f8      	ldr	r0, [r7, #12]
 80036f0:	f7ff ff2d 	bl	800354e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036f4:	bf00      	nop
 80036f6:	3710      	adds	r7, #16
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}

080036fc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b085      	sub	sp, #20
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800370a:	b2db      	uxtb	r3, r3
 800370c:	2b21      	cmp	r3, #33	; 0x21
 800370e:	d13e      	bne.n	800378e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003718:	d114      	bne.n	8003744 <UART_Transmit_IT+0x48>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	691b      	ldr	r3, [r3, #16]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d110      	bne.n	8003744 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a1b      	ldr	r3, [r3, #32]
 8003726:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	881b      	ldrh	r3, [r3, #0]
 800372c:	461a      	mov	r2, r3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003736:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a1b      	ldr	r3, [r3, #32]
 800373c:	1c9a      	adds	r2, r3, #2
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	621a      	str	r2, [r3, #32]
 8003742:	e008      	b.n	8003756 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6a1b      	ldr	r3, [r3, #32]
 8003748:	1c59      	adds	r1, r3, #1
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	6211      	str	r1, [r2, #32]
 800374e:	781a      	ldrb	r2, [r3, #0]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800375a:	b29b      	uxth	r3, r3
 800375c:	3b01      	subs	r3, #1
 800375e:	b29b      	uxth	r3, r3
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	4619      	mov	r1, r3
 8003764:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003766:	2b00      	cmp	r3, #0
 8003768:	d10f      	bne.n	800378a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	68da      	ldr	r2, [r3, #12]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003778:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	68da      	ldr	r2, [r3, #12]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003788:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800378a:	2300      	movs	r3, #0
 800378c:	e000      	b.n	8003790 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800378e:	2302      	movs	r3, #2
  }
}
 8003790:	4618      	mov	r0, r3
 8003792:	3714      	adds	r7, #20
 8003794:	46bd      	mov	sp, r7
 8003796:	bc80      	pop	{r7}
 8003798:	4770      	bx	lr

0800379a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800379a:	b580      	push	{r7, lr}
 800379c:	b082      	sub	sp, #8
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	68da      	ldr	r2, [r3, #12]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037b0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2220      	movs	r2, #32
 80037b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f7ff febe 	bl	800353c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80037c0:	2300      	movs	r3, #0
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3708      	adds	r7, #8
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}

080037ca <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80037ca:	b580      	push	{r7, lr}
 80037cc:	b086      	sub	sp, #24
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	2b22      	cmp	r3, #34	; 0x22
 80037dc:	f040 8099 	bne.w	8003912 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037e8:	d117      	bne.n	800381a <UART_Receive_IT+0x50>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d113      	bne.n	800381a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80037f2:	2300      	movs	r3, #0
 80037f4:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037fa:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	b29b      	uxth	r3, r3
 8003804:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003808:	b29a      	uxth	r2, r3
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003812:	1c9a      	adds	r2, r3, #2
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	629a      	str	r2, [r3, #40]	; 0x28
 8003818:	e026      	b.n	8003868 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800381e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003820:	2300      	movs	r3, #0
 8003822:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800382c:	d007      	beq.n	800383e <UART_Receive_IT+0x74>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d10a      	bne.n	800384c <UART_Receive_IT+0x82>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d106      	bne.n	800384c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	b2da      	uxtb	r2, r3
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	701a      	strb	r2, [r3, #0]
 800384a:	e008      	b.n	800385e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	b2db      	uxtb	r3, r3
 8003854:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003858:	b2da      	uxtb	r2, r3
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003862:	1c5a      	adds	r2, r3, #1
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800386c:	b29b      	uxth	r3, r3
 800386e:	3b01      	subs	r3, #1
 8003870:	b29b      	uxth	r3, r3
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	4619      	mov	r1, r3
 8003876:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003878:	2b00      	cmp	r3, #0
 800387a:	d148      	bne.n	800390e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	68da      	ldr	r2, [r3, #12]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f022 0220 	bic.w	r2, r2, #32
 800388a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	68da      	ldr	r2, [r3, #12]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800389a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	695a      	ldr	r2, [r3, #20]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f022 0201 	bic.w	r2, r2, #1
 80038aa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2220      	movs	r2, #32
 80038b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d123      	bne.n	8003904 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	68da      	ldr	r2, [r3, #12]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f022 0210 	bic.w	r2, r2, #16
 80038d0:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0310 	and.w	r3, r3, #16
 80038dc:	2b10      	cmp	r3, #16
 80038de:	d10a      	bne.n	80038f6 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80038e0:	2300      	movs	r3, #0
 80038e2:	60fb      	str	r3, [r7, #12]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	60fb      	str	r3, [r7, #12]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	60fb      	str	r3, [r7, #12]
 80038f4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80038fa:	4619      	mov	r1, r3
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f7ff fe2f 	bl	8003560 <HAL_UARTEx_RxEventCallback>
 8003902:	e002      	b.n	800390a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f7fc ffaf 	bl	8000868 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800390a:	2300      	movs	r3, #0
 800390c:	e002      	b.n	8003914 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800390e:	2300      	movs	r3, #0
 8003910:	e000      	b.n	8003914 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003912:	2302      	movs	r3, #2
  }
}
 8003914:	4618      	mov	r0, r3
 8003916:	3718      	adds	r7, #24
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}

0800391c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	68da      	ldr	r2, [r3, #12]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	430a      	orrs	r2, r1
 8003938:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	689a      	ldr	r2, [r3, #8]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	691b      	ldr	r3, [r3, #16]
 8003942:	431a      	orrs	r2, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	695b      	ldr	r3, [r3, #20]
 8003948:	4313      	orrs	r3, r2
 800394a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003956:	f023 030c 	bic.w	r3, r3, #12
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	6812      	ldr	r2, [r2, #0]
 800395e:	68b9      	ldr	r1, [r7, #8]
 8003960:	430b      	orrs	r3, r1
 8003962:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	699a      	ldr	r2, [r3, #24]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	430a      	orrs	r2, r1
 8003978:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a2c      	ldr	r2, [pc, #176]	; (8003a30 <UART_SetConfig+0x114>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d103      	bne.n	800398c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003984:	f7ff f908 	bl	8002b98 <HAL_RCC_GetPCLK2Freq>
 8003988:	60f8      	str	r0, [r7, #12]
 800398a:	e002      	b.n	8003992 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800398c:	f7ff f8f0 	bl	8002b70 <HAL_RCC_GetPCLK1Freq>
 8003990:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003992:	68fa      	ldr	r2, [r7, #12]
 8003994:	4613      	mov	r3, r2
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	4413      	add	r3, r2
 800399a:	009a      	lsls	r2, r3, #2
 800399c:	441a      	add	r2, r3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039a8:	4a22      	ldr	r2, [pc, #136]	; (8003a34 <UART_SetConfig+0x118>)
 80039aa:	fba2 2303 	umull	r2, r3, r2, r3
 80039ae:	095b      	lsrs	r3, r3, #5
 80039b0:	0119      	lsls	r1, r3, #4
 80039b2:	68fa      	ldr	r2, [r7, #12]
 80039b4:	4613      	mov	r3, r2
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	4413      	add	r3, r2
 80039ba:	009a      	lsls	r2, r3, #2
 80039bc:	441a      	add	r2, r3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80039c8:	4b1a      	ldr	r3, [pc, #104]	; (8003a34 <UART_SetConfig+0x118>)
 80039ca:	fba3 0302 	umull	r0, r3, r3, r2
 80039ce:	095b      	lsrs	r3, r3, #5
 80039d0:	2064      	movs	r0, #100	; 0x64
 80039d2:	fb00 f303 	mul.w	r3, r0, r3
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	011b      	lsls	r3, r3, #4
 80039da:	3332      	adds	r3, #50	; 0x32
 80039dc:	4a15      	ldr	r2, [pc, #84]	; (8003a34 <UART_SetConfig+0x118>)
 80039de:	fba2 2303 	umull	r2, r3, r2, r3
 80039e2:	095b      	lsrs	r3, r3, #5
 80039e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039e8:	4419      	add	r1, r3
 80039ea:	68fa      	ldr	r2, [r7, #12]
 80039ec:	4613      	mov	r3, r2
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	4413      	add	r3, r2
 80039f2:	009a      	lsls	r2, r3, #2
 80039f4:	441a      	add	r2, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a00:	4b0c      	ldr	r3, [pc, #48]	; (8003a34 <UART_SetConfig+0x118>)
 8003a02:	fba3 0302 	umull	r0, r3, r3, r2
 8003a06:	095b      	lsrs	r3, r3, #5
 8003a08:	2064      	movs	r0, #100	; 0x64
 8003a0a:	fb00 f303 	mul.w	r3, r0, r3
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	011b      	lsls	r3, r3, #4
 8003a12:	3332      	adds	r3, #50	; 0x32
 8003a14:	4a07      	ldr	r2, [pc, #28]	; (8003a34 <UART_SetConfig+0x118>)
 8003a16:	fba2 2303 	umull	r2, r3, r2, r3
 8003a1a:	095b      	lsrs	r3, r3, #5
 8003a1c:	f003 020f 	and.w	r2, r3, #15
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	440a      	add	r2, r1
 8003a26:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003a28:	bf00      	nop
 8003a2a:	3710      	adds	r7, #16
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	40013800 	.word	0x40013800
 8003a34:	51eb851f 	.word	0x51eb851f

08003a38 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b087      	sub	sp, #28
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a4c:	683a      	ldr	r2, [r7, #0]
 8003a4e:	6812      	ldr	r2, [r2, #0]
 8003a50:	f023 0101 	bic.w	r1, r3, #1
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	2b08      	cmp	r3, #8
 8003a60:	d102      	bne.n	8003a68 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8003a62:	2340      	movs	r3, #64	; 0x40
 8003a64:	617b      	str	r3, [r7, #20]
 8003a66:	e001      	b.n	8003a6c <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8003a78:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8003a7e:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8003a84:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8003a8a:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8003a90:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8003a96:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8003a9c:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 8003aa2:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8003aa8:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	699b      	ldr	r3, [r3, #24]
 8003ab6:	693a      	ldr	r2, [r7, #16]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ac0:	693a      	ldr	r2, [r7, #16]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 8003ac6:	4b10      	ldr	r3, [pc, #64]	; (8003b08 <FSMC_NORSRAM_Init+0xd0>)
 8003ac8:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ad0:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8003ad8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	43db      	mvns	r3, r3
 8003ae8:	ea02 0103 	and.w	r1, r2, r3
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	4319      	orrs	r1, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 8003afa:	2300      	movs	r3, #0
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	371c      	adds	r7, #28
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bc80      	pop	{r7}
 8003b04:	4770      	bx	lr
 8003b06:	bf00      	nop
 8003b08:	0008fb7f 	.word	0x0008fb7f

08003b0c <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b085      	sub	sp, #20
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	60b9      	str	r1, [r7, #8]
 8003b16:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	1c5a      	adds	r2, r3, #1
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b22:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	011b      	lsls	r3, r3, #4
 8003b30:	431a      	orrs	r2, r3
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	021b      	lsls	r3, r3, #8
 8003b38:	431a      	orrs	r2, r3
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	041b      	lsls	r3, r3, #16
 8003b40:	431a      	orrs	r2, r3
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	691b      	ldr	r3, [r3, #16]
 8003b46:	3b01      	subs	r3, #1
 8003b48:	051b      	lsls	r3, r3, #20
 8003b4a:	431a      	orrs	r2, r3
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	695b      	ldr	r3, [r3, #20]
 8003b50:	3b02      	subs	r3, #2
 8003b52:	061b      	lsls	r3, r3, #24
 8003b54:	431a      	orrs	r2, r3
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	699b      	ldr	r3, [r3, #24]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	3201      	adds	r2, #1
 8003b60:	4319      	orrs	r1, r3
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
 8003b68:	2300      	movs	r3, #0
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3714      	adds	r7, #20
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bc80      	pop	{r7}
 8003b72:	4770      	bx	lr

08003b74 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b085      	sub	sp, #20
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	60b9      	str	r1, [r7, #8]
 8003b7e:	607a      	str	r2, [r7, #4]
 8003b80:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b88:	d11d      	bne.n	8003bc6 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003b92:	4b13      	ldr	r3, [pc, #76]	; (8003be0 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8003b94:	4013      	ands	r3, r2
 8003b96:	68ba      	ldr	r2, [r7, #8]
 8003b98:	6811      	ldr	r1, [r2, #0]
 8003b9a:	68ba      	ldr	r2, [r7, #8]
 8003b9c:	6852      	ldr	r2, [r2, #4]
 8003b9e:	0112      	lsls	r2, r2, #4
 8003ba0:	4311      	orrs	r1, r2
 8003ba2:	68ba      	ldr	r2, [r7, #8]
 8003ba4:	6892      	ldr	r2, [r2, #8]
 8003ba6:	0212      	lsls	r2, r2, #8
 8003ba8:	4311      	orrs	r1, r2
 8003baa:	68ba      	ldr	r2, [r7, #8]
 8003bac:	6992      	ldr	r2, [r2, #24]
 8003bae:	4311      	orrs	r1, r2
 8003bb0:	68ba      	ldr	r2, [r7, #8]
 8003bb2:	68d2      	ldr	r2, [r2, #12]
 8003bb4:	0412      	lsls	r2, r2, #16
 8003bb6:	430a      	orrs	r2, r1
 8003bb8:	ea43 0102 	orr.w	r1, r3, r2
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003bc4:	e005      	b.n	8003bd2 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8003bce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3714      	adds	r7, #20
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bc80      	pop	{r7}
 8003bdc:	4770      	bx	lr
 8003bde:	bf00      	nop
 8003be0:	cff00000 	.word	0xcff00000

08003be4 <__errno>:
 8003be4:	4b01      	ldr	r3, [pc, #4]	; (8003bec <__errno+0x8>)
 8003be6:	6818      	ldr	r0, [r3, #0]
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	2000000c 	.word	0x2000000c

08003bf0 <__libc_init_array>:
 8003bf0:	b570      	push	{r4, r5, r6, lr}
 8003bf2:	2600      	movs	r6, #0
 8003bf4:	4d0c      	ldr	r5, [pc, #48]	; (8003c28 <__libc_init_array+0x38>)
 8003bf6:	4c0d      	ldr	r4, [pc, #52]	; (8003c2c <__libc_init_array+0x3c>)
 8003bf8:	1b64      	subs	r4, r4, r5
 8003bfa:	10a4      	asrs	r4, r4, #2
 8003bfc:	42a6      	cmp	r6, r4
 8003bfe:	d109      	bne.n	8003c14 <__libc_init_array+0x24>
 8003c00:	f000 fcb2 	bl	8004568 <_init>
 8003c04:	2600      	movs	r6, #0
 8003c06:	4d0a      	ldr	r5, [pc, #40]	; (8003c30 <__libc_init_array+0x40>)
 8003c08:	4c0a      	ldr	r4, [pc, #40]	; (8003c34 <__libc_init_array+0x44>)
 8003c0a:	1b64      	subs	r4, r4, r5
 8003c0c:	10a4      	asrs	r4, r4, #2
 8003c0e:	42a6      	cmp	r6, r4
 8003c10:	d105      	bne.n	8003c1e <__libc_init_array+0x2e>
 8003c12:	bd70      	pop	{r4, r5, r6, pc}
 8003c14:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c18:	4798      	blx	r3
 8003c1a:	3601      	adds	r6, #1
 8003c1c:	e7ee      	b.n	8003bfc <__libc_init_array+0xc>
 8003c1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c22:	4798      	blx	r3
 8003c24:	3601      	adds	r6, #1
 8003c26:	e7f2      	b.n	8003c0e <__libc_init_array+0x1e>
 8003c28:	08004c24 	.word	0x08004c24
 8003c2c:	08004c24 	.word	0x08004c24
 8003c30:	08004c24 	.word	0x08004c24
 8003c34:	08004c28 	.word	0x08004c28

08003c38 <memset>:
 8003c38:	4603      	mov	r3, r0
 8003c3a:	4402      	add	r2, r0
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d100      	bne.n	8003c42 <memset+0xa>
 8003c40:	4770      	bx	lr
 8003c42:	f803 1b01 	strb.w	r1, [r3], #1
 8003c46:	e7f9      	b.n	8003c3c <memset+0x4>

08003c48 <siprintf>:
 8003c48:	b40e      	push	{r1, r2, r3}
 8003c4a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003c4e:	b500      	push	{lr}
 8003c50:	b09c      	sub	sp, #112	; 0x70
 8003c52:	ab1d      	add	r3, sp, #116	; 0x74
 8003c54:	9002      	str	r0, [sp, #8]
 8003c56:	9006      	str	r0, [sp, #24]
 8003c58:	9107      	str	r1, [sp, #28]
 8003c5a:	9104      	str	r1, [sp, #16]
 8003c5c:	4808      	ldr	r0, [pc, #32]	; (8003c80 <siprintf+0x38>)
 8003c5e:	4909      	ldr	r1, [pc, #36]	; (8003c84 <siprintf+0x3c>)
 8003c60:	f853 2b04 	ldr.w	r2, [r3], #4
 8003c64:	9105      	str	r1, [sp, #20]
 8003c66:	6800      	ldr	r0, [r0, #0]
 8003c68:	a902      	add	r1, sp, #8
 8003c6a:	9301      	str	r3, [sp, #4]
 8003c6c:	f000 f87e 	bl	8003d6c <_svfiprintf_r>
 8003c70:	2200      	movs	r2, #0
 8003c72:	9b02      	ldr	r3, [sp, #8]
 8003c74:	701a      	strb	r2, [r3, #0]
 8003c76:	b01c      	add	sp, #112	; 0x70
 8003c78:	f85d eb04 	ldr.w	lr, [sp], #4
 8003c7c:	b003      	add	sp, #12
 8003c7e:	4770      	bx	lr
 8003c80:	2000000c 	.word	0x2000000c
 8003c84:	ffff0208 	.word	0xffff0208

08003c88 <strcat>:
 8003c88:	4602      	mov	r2, r0
 8003c8a:	b510      	push	{r4, lr}
 8003c8c:	7814      	ldrb	r4, [r2, #0]
 8003c8e:	4613      	mov	r3, r2
 8003c90:	3201      	adds	r2, #1
 8003c92:	2c00      	cmp	r4, #0
 8003c94:	d1fa      	bne.n	8003c8c <strcat+0x4>
 8003c96:	3b01      	subs	r3, #1
 8003c98:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003c9c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003ca0:	2a00      	cmp	r2, #0
 8003ca2:	d1f9      	bne.n	8003c98 <strcat+0x10>
 8003ca4:	bd10      	pop	{r4, pc}

08003ca6 <strcpy>:
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003cac:	f803 2b01 	strb.w	r2, [r3], #1
 8003cb0:	2a00      	cmp	r2, #0
 8003cb2:	d1f9      	bne.n	8003ca8 <strcpy+0x2>
 8003cb4:	4770      	bx	lr

08003cb6 <__ssputs_r>:
 8003cb6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cba:	688e      	ldr	r6, [r1, #8]
 8003cbc:	4682      	mov	sl, r0
 8003cbe:	429e      	cmp	r6, r3
 8003cc0:	460c      	mov	r4, r1
 8003cc2:	4690      	mov	r8, r2
 8003cc4:	461f      	mov	r7, r3
 8003cc6:	d838      	bhi.n	8003d3a <__ssputs_r+0x84>
 8003cc8:	898a      	ldrh	r2, [r1, #12]
 8003cca:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003cce:	d032      	beq.n	8003d36 <__ssputs_r+0x80>
 8003cd0:	6825      	ldr	r5, [r4, #0]
 8003cd2:	6909      	ldr	r1, [r1, #16]
 8003cd4:	3301      	adds	r3, #1
 8003cd6:	eba5 0901 	sub.w	r9, r5, r1
 8003cda:	6965      	ldr	r5, [r4, #20]
 8003cdc:	444b      	add	r3, r9
 8003cde:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003ce2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003ce6:	106d      	asrs	r5, r5, #1
 8003ce8:	429d      	cmp	r5, r3
 8003cea:	bf38      	it	cc
 8003cec:	461d      	movcc	r5, r3
 8003cee:	0553      	lsls	r3, r2, #21
 8003cf0:	d531      	bpl.n	8003d56 <__ssputs_r+0xa0>
 8003cf2:	4629      	mov	r1, r5
 8003cf4:	f000 fb6e 	bl	80043d4 <_malloc_r>
 8003cf8:	4606      	mov	r6, r0
 8003cfa:	b950      	cbnz	r0, 8003d12 <__ssputs_r+0x5c>
 8003cfc:	230c      	movs	r3, #12
 8003cfe:	f04f 30ff 	mov.w	r0, #4294967295
 8003d02:	f8ca 3000 	str.w	r3, [sl]
 8003d06:	89a3      	ldrh	r3, [r4, #12]
 8003d08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d0c:	81a3      	strh	r3, [r4, #12]
 8003d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d12:	464a      	mov	r2, r9
 8003d14:	6921      	ldr	r1, [r4, #16]
 8003d16:	f000 facd 	bl	80042b4 <memcpy>
 8003d1a:	89a3      	ldrh	r3, [r4, #12]
 8003d1c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003d20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d24:	81a3      	strh	r3, [r4, #12]
 8003d26:	6126      	str	r6, [r4, #16]
 8003d28:	444e      	add	r6, r9
 8003d2a:	6026      	str	r6, [r4, #0]
 8003d2c:	463e      	mov	r6, r7
 8003d2e:	6165      	str	r5, [r4, #20]
 8003d30:	eba5 0509 	sub.w	r5, r5, r9
 8003d34:	60a5      	str	r5, [r4, #8]
 8003d36:	42be      	cmp	r6, r7
 8003d38:	d900      	bls.n	8003d3c <__ssputs_r+0x86>
 8003d3a:	463e      	mov	r6, r7
 8003d3c:	4632      	mov	r2, r6
 8003d3e:	4641      	mov	r1, r8
 8003d40:	6820      	ldr	r0, [r4, #0]
 8003d42:	f000 fac5 	bl	80042d0 <memmove>
 8003d46:	68a3      	ldr	r3, [r4, #8]
 8003d48:	2000      	movs	r0, #0
 8003d4a:	1b9b      	subs	r3, r3, r6
 8003d4c:	60a3      	str	r3, [r4, #8]
 8003d4e:	6823      	ldr	r3, [r4, #0]
 8003d50:	4433      	add	r3, r6
 8003d52:	6023      	str	r3, [r4, #0]
 8003d54:	e7db      	b.n	8003d0e <__ssputs_r+0x58>
 8003d56:	462a      	mov	r2, r5
 8003d58:	f000 fbb0 	bl	80044bc <_realloc_r>
 8003d5c:	4606      	mov	r6, r0
 8003d5e:	2800      	cmp	r0, #0
 8003d60:	d1e1      	bne.n	8003d26 <__ssputs_r+0x70>
 8003d62:	4650      	mov	r0, sl
 8003d64:	6921      	ldr	r1, [r4, #16]
 8003d66:	f000 facd 	bl	8004304 <_free_r>
 8003d6a:	e7c7      	b.n	8003cfc <__ssputs_r+0x46>

08003d6c <_svfiprintf_r>:
 8003d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d70:	4698      	mov	r8, r3
 8003d72:	898b      	ldrh	r3, [r1, #12]
 8003d74:	4607      	mov	r7, r0
 8003d76:	061b      	lsls	r3, r3, #24
 8003d78:	460d      	mov	r5, r1
 8003d7a:	4614      	mov	r4, r2
 8003d7c:	b09d      	sub	sp, #116	; 0x74
 8003d7e:	d50e      	bpl.n	8003d9e <_svfiprintf_r+0x32>
 8003d80:	690b      	ldr	r3, [r1, #16]
 8003d82:	b963      	cbnz	r3, 8003d9e <_svfiprintf_r+0x32>
 8003d84:	2140      	movs	r1, #64	; 0x40
 8003d86:	f000 fb25 	bl	80043d4 <_malloc_r>
 8003d8a:	6028      	str	r0, [r5, #0]
 8003d8c:	6128      	str	r0, [r5, #16]
 8003d8e:	b920      	cbnz	r0, 8003d9a <_svfiprintf_r+0x2e>
 8003d90:	230c      	movs	r3, #12
 8003d92:	603b      	str	r3, [r7, #0]
 8003d94:	f04f 30ff 	mov.w	r0, #4294967295
 8003d98:	e0d1      	b.n	8003f3e <_svfiprintf_r+0x1d2>
 8003d9a:	2340      	movs	r3, #64	; 0x40
 8003d9c:	616b      	str	r3, [r5, #20]
 8003d9e:	2300      	movs	r3, #0
 8003da0:	9309      	str	r3, [sp, #36]	; 0x24
 8003da2:	2320      	movs	r3, #32
 8003da4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003da8:	2330      	movs	r3, #48	; 0x30
 8003daa:	f04f 0901 	mov.w	r9, #1
 8003dae:	f8cd 800c 	str.w	r8, [sp, #12]
 8003db2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003f58 <_svfiprintf_r+0x1ec>
 8003db6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003dba:	4623      	mov	r3, r4
 8003dbc:	469a      	mov	sl, r3
 8003dbe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003dc2:	b10a      	cbz	r2, 8003dc8 <_svfiprintf_r+0x5c>
 8003dc4:	2a25      	cmp	r2, #37	; 0x25
 8003dc6:	d1f9      	bne.n	8003dbc <_svfiprintf_r+0x50>
 8003dc8:	ebba 0b04 	subs.w	fp, sl, r4
 8003dcc:	d00b      	beq.n	8003de6 <_svfiprintf_r+0x7a>
 8003dce:	465b      	mov	r3, fp
 8003dd0:	4622      	mov	r2, r4
 8003dd2:	4629      	mov	r1, r5
 8003dd4:	4638      	mov	r0, r7
 8003dd6:	f7ff ff6e 	bl	8003cb6 <__ssputs_r>
 8003dda:	3001      	adds	r0, #1
 8003ddc:	f000 80aa 	beq.w	8003f34 <_svfiprintf_r+0x1c8>
 8003de0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003de2:	445a      	add	r2, fp
 8003de4:	9209      	str	r2, [sp, #36]	; 0x24
 8003de6:	f89a 3000 	ldrb.w	r3, [sl]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	f000 80a2 	beq.w	8003f34 <_svfiprintf_r+0x1c8>
 8003df0:	2300      	movs	r3, #0
 8003df2:	f04f 32ff 	mov.w	r2, #4294967295
 8003df6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003dfa:	f10a 0a01 	add.w	sl, sl, #1
 8003dfe:	9304      	str	r3, [sp, #16]
 8003e00:	9307      	str	r3, [sp, #28]
 8003e02:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003e06:	931a      	str	r3, [sp, #104]	; 0x68
 8003e08:	4654      	mov	r4, sl
 8003e0a:	2205      	movs	r2, #5
 8003e0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e10:	4851      	ldr	r0, [pc, #324]	; (8003f58 <_svfiprintf_r+0x1ec>)
 8003e12:	f000 fa41 	bl	8004298 <memchr>
 8003e16:	9a04      	ldr	r2, [sp, #16]
 8003e18:	b9d8      	cbnz	r0, 8003e52 <_svfiprintf_r+0xe6>
 8003e1a:	06d0      	lsls	r0, r2, #27
 8003e1c:	bf44      	itt	mi
 8003e1e:	2320      	movmi	r3, #32
 8003e20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e24:	0711      	lsls	r1, r2, #28
 8003e26:	bf44      	itt	mi
 8003e28:	232b      	movmi	r3, #43	; 0x2b
 8003e2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e2e:	f89a 3000 	ldrb.w	r3, [sl]
 8003e32:	2b2a      	cmp	r3, #42	; 0x2a
 8003e34:	d015      	beq.n	8003e62 <_svfiprintf_r+0xf6>
 8003e36:	4654      	mov	r4, sl
 8003e38:	2000      	movs	r0, #0
 8003e3a:	f04f 0c0a 	mov.w	ip, #10
 8003e3e:	9a07      	ldr	r2, [sp, #28]
 8003e40:	4621      	mov	r1, r4
 8003e42:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e46:	3b30      	subs	r3, #48	; 0x30
 8003e48:	2b09      	cmp	r3, #9
 8003e4a:	d94e      	bls.n	8003eea <_svfiprintf_r+0x17e>
 8003e4c:	b1b0      	cbz	r0, 8003e7c <_svfiprintf_r+0x110>
 8003e4e:	9207      	str	r2, [sp, #28]
 8003e50:	e014      	b.n	8003e7c <_svfiprintf_r+0x110>
 8003e52:	eba0 0308 	sub.w	r3, r0, r8
 8003e56:	fa09 f303 	lsl.w	r3, r9, r3
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	46a2      	mov	sl, r4
 8003e5e:	9304      	str	r3, [sp, #16]
 8003e60:	e7d2      	b.n	8003e08 <_svfiprintf_r+0x9c>
 8003e62:	9b03      	ldr	r3, [sp, #12]
 8003e64:	1d19      	adds	r1, r3, #4
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	9103      	str	r1, [sp, #12]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	bfbb      	ittet	lt
 8003e6e:	425b      	neglt	r3, r3
 8003e70:	f042 0202 	orrlt.w	r2, r2, #2
 8003e74:	9307      	strge	r3, [sp, #28]
 8003e76:	9307      	strlt	r3, [sp, #28]
 8003e78:	bfb8      	it	lt
 8003e7a:	9204      	strlt	r2, [sp, #16]
 8003e7c:	7823      	ldrb	r3, [r4, #0]
 8003e7e:	2b2e      	cmp	r3, #46	; 0x2e
 8003e80:	d10c      	bne.n	8003e9c <_svfiprintf_r+0x130>
 8003e82:	7863      	ldrb	r3, [r4, #1]
 8003e84:	2b2a      	cmp	r3, #42	; 0x2a
 8003e86:	d135      	bne.n	8003ef4 <_svfiprintf_r+0x188>
 8003e88:	9b03      	ldr	r3, [sp, #12]
 8003e8a:	3402      	adds	r4, #2
 8003e8c:	1d1a      	adds	r2, r3, #4
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	9203      	str	r2, [sp, #12]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	bfb8      	it	lt
 8003e96:	f04f 33ff 	movlt.w	r3, #4294967295
 8003e9a:	9305      	str	r3, [sp, #20]
 8003e9c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8003f5c <_svfiprintf_r+0x1f0>
 8003ea0:	2203      	movs	r2, #3
 8003ea2:	4650      	mov	r0, sl
 8003ea4:	7821      	ldrb	r1, [r4, #0]
 8003ea6:	f000 f9f7 	bl	8004298 <memchr>
 8003eaa:	b140      	cbz	r0, 8003ebe <_svfiprintf_r+0x152>
 8003eac:	2340      	movs	r3, #64	; 0x40
 8003eae:	eba0 000a 	sub.w	r0, r0, sl
 8003eb2:	fa03 f000 	lsl.w	r0, r3, r0
 8003eb6:	9b04      	ldr	r3, [sp, #16]
 8003eb8:	3401      	adds	r4, #1
 8003eba:	4303      	orrs	r3, r0
 8003ebc:	9304      	str	r3, [sp, #16]
 8003ebe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ec2:	2206      	movs	r2, #6
 8003ec4:	4826      	ldr	r0, [pc, #152]	; (8003f60 <_svfiprintf_r+0x1f4>)
 8003ec6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003eca:	f000 f9e5 	bl	8004298 <memchr>
 8003ece:	2800      	cmp	r0, #0
 8003ed0:	d038      	beq.n	8003f44 <_svfiprintf_r+0x1d8>
 8003ed2:	4b24      	ldr	r3, [pc, #144]	; (8003f64 <_svfiprintf_r+0x1f8>)
 8003ed4:	bb1b      	cbnz	r3, 8003f1e <_svfiprintf_r+0x1b2>
 8003ed6:	9b03      	ldr	r3, [sp, #12]
 8003ed8:	3307      	adds	r3, #7
 8003eda:	f023 0307 	bic.w	r3, r3, #7
 8003ede:	3308      	adds	r3, #8
 8003ee0:	9303      	str	r3, [sp, #12]
 8003ee2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ee4:	4433      	add	r3, r6
 8003ee6:	9309      	str	r3, [sp, #36]	; 0x24
 8003ee8:	e767      	b.n	8003dba <_svfiprintf_r+0x4e>
 8003eea:	460c      	mov	r4, r1
 8003eec:	2001      	movs	r0, #1
 8003eee:	fb0c 3202 	mla	r2, ip, r2, r3
 8003ef2:	e7a5      	b.n	8003e40 <_svfiprintf_r+0xd4>
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	f04f 0c0a 	mov.w	ip, #10
 8003efa:	4619      	mov	r1, r3
 8003efc:	3401      	adds	r4, #1
 8003efe:	9305      	str	r3, [sp, #20]
 8003f00:	4620      	mov	r0, r4
 8003f02:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f06:	3a30      	subs	r2, #48	; 0x30
 8003f08:	2a09      	cmp	r2, #9
 8003f0a:	d903      	bls.n	8003f14 <_svfiprintf_r+0x1a8>
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d0c5      	beq.n	8003e9c <_svfiprintf_r+0x130>
 8003f10:	9105      	str	r1, [sp, #20]
 8003f12:	e7c3      	b.n	8003e9c <_svfiprintf_r+0x130>
 8003f14:	4604      	mov	r4, r0
 8003f16:	2301      	movs	r3, #1
 8003f18:	fb0c 2101 	mla	r1, ip, r1, r2
 8003f1c:	e7f0      	b.n	8003f00 <_svfiprintf_r+0x194>
 8003f1e:	ab03      	add	r3, sp, #12
 8003f20:	9300      	str	r3, [sp, #0]
 8003f22:	462a      	mov	r2, r5
 8003f24:	4638      	mov	r0, r7
 8003f26:	4b10      	ldr	r3, [pc, #64]	; (8003f68 <_svfiprintf_r+0x1fc>)
 8003f28:	a904      	add	r1, sp, #16
 8003f2a:	f3af 8000 	nop.w
 8003f2e:	1c42      	adds	r2, r0, #1
 8003f30:	4606      	mov	r6, r0
 8003f32:	d1d6      	bne.n	8003ee2 <_svfiprintf_r+0x176>
 8003f34:	89ab      	ldrh	r3, [r5, #12]
 8003f36:	065b      	lsls	r3, r3, #25
 8003f38:	f53f af2c 	bmi.w	8003d94 <_svfiprintf_r+0x28>
 8003f3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003f3e:	b01d      	add	sp, #116	; 0x74
 8003f40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f44:	ab03      	add	r3, sp, #12
 8003f46:	9300      	str	r3, [sp, #0]
 8003f48:	462a      	mov	r2, r5
 8003f4a:	4638      	mov	r0, r7
 8003f4c:	4b06      	ldr	r3, [pc, #24]	; (8003f68 <_svfiprintf_r+0x1fc>)
 8003f4e:	a904      	add	r1, sp, #16
 8003f50:	f000 f87c 	bl	800404c <_printf_i>
 8003f54:	e7eb      	b.n	8003f2e <_svfiprintf_r+0x1c2>
 8003f56:	bf00      	nop
 8003f58:	08004bf0 	.word	0x08004bf0
 8003f5c:	08004bf6 	.word	0x08004bf6
 8003f60:	08004bfa 	.word	0x08004bfa
 8003f64:	00000000 	.word	0x00000000
 8003f68:	08003cb7 	.word	0x08003cb7

08003f6c <_printf_common>:
 8003f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f70:	4616      	mov	r6, r2
 8003f72:	4699      	mov	r9, r3
 8003f74:	688a      	ldr	r2, [r1, #8]
 8003f76:	690b      	ldr	r3, [r1, #16]
 8003f78:	4607      	mov	r7, r0
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	bfb8      	it	lt
 8003f7e:	4613      	movlt	r3, r2
 8003f80:	6033      	str	r3, [r6, #0]
 8003f82:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003f86:	460c      	mov	r4, r1
 8003f88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f8c:	b10a      	cbz	r2, 8003f92 <_printf_common+0x26>
 8003f8e:	3301      	adds	r3, #1
 8003f90:	6033      	str	r3, [r6, #0]
 8003f92:	6823      	ldr	r3, [r4, #0]
 8003f94:	0699      	lsls	r1, r3, #26
 8003f96:	bf42      	ittt	mi
 8003f98:	6833      	ldrmi	r3, [r6, #0]
 8003f9a:	3302      	addmi	r3, #2
 8003f9c:	6033      	strmi	r3, [r6, #0]
 8003f9e:	6825      	ldr	r5, [r4, #0]
 8003fa0:	f015 0506 	ands.w	r5, r5, #6
 8003fa4:	d106      	bne.n	8003fb4 <_printf_common+0x48>
 8003fa6:	f104 0a19 	add.w	sl, r4, #25
 8003faa:	68e3      	ldr	r3, [r4, #12]
 8003fac:	6832      	ldr	r2, [r6, #0]
 8003fae:	1a9b      	subs	r3, r3, r2
 8003fb0:	42ab      	cmp	r3, r5
 8003fb2:	dc28      	bgt.n	8004006 <_printf_common+0x9a>
 8003fb4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003fb8:	1e13      	subs	r3, r2, #0
 8003fba:	6822      	ldr	r2, [r4, #0]
 8003fbc:	bf18      	it	ne
 8003fbe:	2301      	movne	r3, #1
 8003fc0:	0692      	lsls	r2, r2, #26
 8003fc2:	d42d      	bmi.n	8004020 <_printf_common+0xb4>
 8003fc4:	4649      	mov	r1, r9
 8003fc6:	4638      	mov	r0, r7
 8003fc8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003fcc:	47c0      	blx	r8
 8003fce:	3001      	adds	r0, #1
 8003fd0:	d020      	beq.n	8004014 <_printf_common+0xa8>
 8003fd2:	6823      	ldr	r3, [r4, #0]
 8003fd4:	68e5      	ldr	r5, [r4, #12]
 8003fd6:	f003 0306 	and.w	r3, r3, #6
 8003fda:	2b04      	cmp	r3, #4
 8003fdc:	bf18      	it	ne
 8003fde:	2500      	movne	r5, #0
 8003fe0:	6832      	ldr	r2, [r6, #0]
 8003fe2:	f04f 0600 	mov.w	r6, #0
 8003fe6:	68a3      	ldr	r3, [r4, #8]
 8003fe8:	bf08      	it	eq
 8003fea:	1aad      	subeq	r5, r5, r2
 8003fec:	6922      	ldr	r2, [r4, #16]
 8003fee:	bf08      	it	eq
 8003ff0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	bfc4      	itt	gt
 8003ff8:	1a9b      	subgt	r3, r3, r2
 8003ffa:	18ed      	addgt	r5, r5, r3
 8003ffc:	341a      	adds	r4, #26
 8003ffe:	42b5      	cmp	r5, r6
 8004000:	d11a      	bne.n	8004038 <_printf_common+0xcc>
 8004002:	2000      	movs	r0, #0
 8004004:	e008      	b.n	8004018 <_printf_common+0xac>
 8004006:	2301      	movs	r3, #1
 8004008:	4652      	mov	r2, sl
 800400a:	4649      	mov	r1, r9
 800400c:	4638      	mov	r0, r7
 800400e:	47c0      	blx	r8
 8004010:	3001      	adds	r0, #1
 8004012:	d103      	bne.n	800401c <_printf_common+0xb0>
 8004014:	f04f 30ff 	mov.w	r0, #4294967295
 8004018:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800401c:	3501      	adds	r5, #1
 800401e:	e7c4      	b.n	8003faa <_printf_common+0x3e>
 8004020:	2030      	movs	r0, #48	; 0x30
 8004022:	18e1      	adds	r1, r4, r3
 8004024:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004028:	1c5a      	adds	r2, r3, #1
 800402a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800402e:	4422      	add	r2, r4
 8004030:	3302      	adds	r3, #2
 8004032:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004036:	e7c5      	b.n	8003fc4 <_printf_common+0x58>
 8004038:	2301      	movs	r3, #1
 800403a:	4622      	mov	r2, r4
 800403c:	4649      	mov	r1, r9
 800403e:	4638      	mov	r0, r7
 8004040:	47c0      	blx	r8
 8004042:	3001      	adds	r0, #1
 8004044:	d0e6      	beq.n	8004014 <_printf_common+0xa8>
 8004046:	3601      	adds	r6, #1
 8004048:	e7d9      	b.n	8003ffe <_printf_common+0x92>
	...

0800404c <_printf_i>:
 800404c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004050:	7e0f      	ldrb	r7, [r1, #24]
 8004052:	4691      	mov	r9, r2
 8004054:	2f78      	cmp	r7, #120	; 0x78
 8004056:	4680      	mov	r8, r0
 8004058:	460c      	mov	r4, r1
 800405a:	469a      	mov	sl, r3
 800405c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800405e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004062:	d807      	bhi.n	8004074 <_printf_i+0x28>
 8004064:	2f62      	cmp	r7, #98	; 0x62
 8004066:	d80a      	bhi.n	800407e <_printf_i+0x32>
 8004068:	2f00      	cmp	r7, #0
 800406a:	f000 80d9 	beq.w	8004220 <_printf_i+0x1d4>
 800406e:	2f58      	cmp	r7, #88	; 0x58
 8004070:	f000 80a4 	beq.w	80041bc <_printf_i+0x170>
 8004074:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004078:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800407c:	e03a      	b.n	80040f4 <_printf_i+0xa8>
 800407e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004082:	2b15      	cmp	r3, #21
 8004084:	d8f6      	bhi.n	8004074 <_printf_i+0x28>
 8004086:	a101      	add	r1, pc, #4	; (adr r1, 800408c <_printf_i+0x40>)
 8004088:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800408c:	080040e5 	.word	0x080040e5
 8004090:	080040f9 	.word	0x080040f9
 8004094:	08004075 	.word	0x08004075
 8004098:	08004075 	.word	0x08004075
 800409c:	08004075 	.word	0x08004075
 80040a0:	08004075 	.word	0x08004075
 80040a4:	080040f9 	.word	0x080040f9
 80040a8:	08004075 	.word	0x08004075
 80040ac:	08004075 	.word	0x08004075
 80040b0:	08004075 	.word	0x08004075
 80040b4:	08004075 	.word	0x08004075
 80040b8:	08004207 	.word	0x08004207
 80040bc:	08004129 	.word	0x08004129
 80040c0:	080041e9 	.word	0x080041e9
 80040c4:	08004075 	.word	0x08004075
 80040c8:	08004075 	.word	0x08004075
 80040cc:	08004229 	.word	0x08004229
 80040d0:	08004075 	.word	0x08004075
 80040d4:	08004129 	.word	0x08004129
 80040d8:	08004075 	.word	0x08004075
 80040dc:	08004075 	.word	0x08004075
 80040e0:	080041f1 	.word	0x080041f1
 80040e4:	682b      	ldr	r3, [r5, #0]
 80040e6:	1d1a      	adds	r2, r3, #4
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	602a      	str	r2, [r5, #0]
 80040ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80040f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80040f4:	2301      	movs	r3, #1
 80040f6:	e0a4      	b.n	8004242 <_printf_i+0x1f6>
 80040f8:	6820      	ldr	r0, [r4, #0]
 80040fa:	6829      	ldr	r1, [r5, #0]
 80040fc:	0606      	lsls	r6, r0, #24
 80040fe:	f101 0304 	add.w	r3, r1, #4
 8004102:	d50a      	bpl.n	800411a <_printf_i+0xce>
 8004104:	680e      	ldr	r6, [r1, #0]
 8004106:	602b      	str	r3, [r5, #0]
 8004108:	2e00      	cmp	r6, #0
 800410a:	da03      	bge.n	8004114 <_printf_i+0xc8>
 800410c:	232d      	movs	r3, #45	; 0x2d
 800410e:	4276      	negs	r6, r6
 8004110:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004114:	230a      	movs	r3, #10
 8004116:	485e      	ldr	r0, [pc, #376]	; (8004290 <_printf_i+0x244>)
 8004118:	e019      	b.n	800414e <_printf_i+0x102>
 800411a:	680e      	ldr	r6, [r1, #0]
 800411c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004120:	602b      	str	r3, [r5, #0]
 8004122:	bf18      	it	ne
 8004124:	b236      	sxthne	r6, r6
 8004126:	e7ef      	b.n	8004108 <_printf_i+0xbc>
 8004128:	682b      	ldr	r3, [r5, #0]
 800412a:	6820      	ldr	r0, [r4, #0]
 800412c:	1d19      	adds	r1, r3, #4
 800412e:	6029      	str	r1, [r5, #0]
 8004130:	0601      	lsls	r1, r0, #24
 8004132:	d501      	bpl.n	8004138 <_printf_i+0xec>
 8004134:	681e      	ldr	r6, [r3, #0]
 8004136:	e002      	b.n	800413e <_printf_i+0xf2>
 8004138:	0646      	lsls	r6, r0, #25
 800413a:	d5fb      	bpl.n	8004134 <_printf_i+0xe8>
 800413c:	881e      	ldrh	r6, [r3, #0]
 800413e:	2f6f      	cmp	r7, #111	; 0x6f
 8004140:	bf0c      	ite	eq
 8004142:	2308      	moveq	r3, #8
 8004144:	230a      	movne	r3, #10
 8004146:	4852      	ldr	r0, [pc, #328]	; (8004290 <_printf_i+0x244>)
 8004148:	2100      	movs	r1, #0
 800414a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800414e:	6865      	ldr	r5, [r4, #4]
 8004150:	2d00      	cmp	r5, #0
 8004152:	bfa8      	it	ge
 8004154:	6821      	ldrge	r1, [r4, #0]
 8004156:	60a5      	str	r5, [r4, #8]
 8004158:	bfa4      	itt	ge
 800415a:	f021 0104 	bicge.w	r1, r1, #4
 800415e:	6021      	strge	r1, [r4, #0]
 8004160:	b90e      	cbnz	r6, 8004166 <_printf_i+0x11a>
 8004162:	2d00      	cmp	r5, #0
 8004164:	d04d      	beq.n	8004202 <_printf_i+0x1b6>
 8004166:	4615      	mov	r5, r2
 8004168:	fbb6 f1f3 	udiv	r1, r6, r3
 800416c:	fb03 6711 	mls	r7, r3, r1, r6
 8004170:	5dc7      	ldrb	r7, [r0, r7]
 8004172:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004176:	4637      	mov	r7, r6
 8004178:	42bb      	cmp	r3, r7
 800417a:	460e      	mov	r6, r1
 800417c:	d9f4      	bls.n	8004168 <_printf_i+0x11c>
 800417e:	2b08      	cmp	r3, #8
 8004180:	d10b      	bne.n	800419a <_printf_i+0x14e>
 8004182:	6823      	ldr	r3, [r4, #0]
 8004184:	07de      	lsls	r6, r3, #31
 8004186:	d508      	bpl.n	800419a <_printf_i+0x14e>
 8004188:	6923      	ldr	r3, [r4, #16]
 800418a:	6861      	ldr	r1, [r4, #4]
 800418c:	4299      	cmp	r1, r3
 800418e:	bfde      	ittt	le
 8004190:	2330      	movle	r3, #48	; 0x30
 8004192:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004196:	f105 35ff 	addle.w	r5, r5, #4294967295
 800419a:	1b52      	subs	r2, r2, r5
 800419c:	6122      	str	r2, [r4, #16]
 800419e:	464b      	mov	r3, r9
 80041a0:	4621      	mov	r1, r4
 80041a2:	4640      	mov	r0, r8
 80041a4:	f8cd a000 	str.w	sl, [sp]
 80041a8:	aa03      	add	r2, sp, #12
 80041aa:	f7ff fedf 	bl	8003f6c <_printf_common>
 80041ae:	3001      	adds	r0, #1
 80041b0:	d14c      	bne.n	800424c <_printf_i+0x200>
 80041b2:	f04f 30ff 	mov.w	r0, #4294967295
 80041b6:	b004      	add	sp, #16
 80041b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041bc:	4834      	ldr	r0, [pc, #208]	; (8004290 <_printf_i+0x244>)
 80041be:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80041c2:	6829      	ldr	r1, [r5, #0]
 80041c4:	6823      	ldr	r3, [r4, #0]
 80041c6:	f851 6b04 	ldr.w	r6, [r1], #4
 80041ca:	6029      	str	r1, [r5, #0]
 80041cc:	061d      	lsls	r5, r3, #24
 80041ce:	d514      	bpl.n	80041fa <_printf_i+0x1ae>
 80041d0:	07df      	lsls	r7, r3, #31
 80041d2:	bf44      	itt	mi
 80041d4:	f043 0320 	orrmi.w	r3, r3, #32
 80041d8:	6023      	strmi	r3, [r4, #0]
 80041da:	b91e      	cbnz	r6, 80041e4 <_printf_i+0x198>
 80041dc:	6823      	ldr	r3, [r4, #0]
 80041de:	f023 0320 	bic.w	r3, r3, #32
 80041e2:	6023      	str	r3, [r4, #0]
 80041e4:	2310      	movs	r3, #16
 80041e6:	e7af      	b.n	8004148 <_printf_i+0xfc>
 80041e8:	6823      	ldr	r3, [r4, #0]
 80041ea:	f043 0320 	orr.w	r3, r3, #32
 80041ee:	6023      	str	r3, [r4, #0]
 80041f0:	2378      	movs	r3, #120	; 0x78
 80041f2:	4828      	ldr	r0, [pc, #160]	; (8004294 <_printf_i+0x248>)
 80041f4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80041f8:	e7e3      	b.n	80041c2 <_printf_i+0x176>
 80041fa:	0659      	lsls	r1, r3, #25
 80041fc:	bf48      	it	mi
 80041fe:	b2b6      	uxthmi	r6, r6
 8004200:	e7e6      	b.n	80041d0 <_printf_i+0x184>
 8004202:	4615      	mov	r5, r2
 8004204:	e7bb      	b.n	800417e <_printf_i+0x132>
 8004206:	682b      	ldr	r3, [r5, #0]
 8004208:	6826      	ldr	r6, [r4, #0]
 800420a:	1d18      	adds	r0, r3, #4
 800420c:	6961      	ldr	r1, [r4, #20]
 800420e:	6028      	str	r0, [r5, #0]
 8004210:	0635      	lsls	r5, r6, #24
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	d501      	bpl.n	800421a <_printf_i+0x1ce>
 8004216:	6019      	str	r1, [r3, #0]
 8004218:	e002      	b.n	8004220 <_printf_i+0x1d4>
 800421a:	0670      	lsls	r0, r6, #25
 800421c:	d5fb      	bpl.n	8004216 <_printf_i+0x1ca>
 800421e:	8019      	strh	r1, [r3, #0]
 8004220:	2300      	movs	r3, #0
 8004222:	4615      	mov	r5, r2
 8004224:	6123      	str	r3, [r4, #16]
 8004226:	e7ba      	b.n	800419e <_printf_i+0x152>
 8004228:	682b      	ldr	r3, [r5, #0]
 800422a:	2100      	movs	r1, #0
 800422c:	1d1a      	adds	r2, r3, #4
 800422e:	602a      	str	r2, [r5, #0]
 8004230:	681d      	ldr	r5, [r3, #0]
 8004232:	6862      	ldr	r2, [r4, #4]
 8004234:	4628      	mov	r0, r5
 8004236:	f000 f82f 	bl	8004298 <memchr>
 800423a:	b108      	cbz	r0, 8004240 <_printf_i+0x1f4>
 800423c:	1b40      	subs	r0, r0, r5
 800423e:	6060      	str	r0, [r4, #4]
 8004240:	6863      	ldr	r3, [r4, #4]
 8004242:	6123      	str	r3, [r4, #16]
 8004244:	2300      	movs	r3, #0
 8004246:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800424a:	e7a8      	b.n	800419e <_printf_i+0x152>
 800424c:	462a      	mov	r2, r5
 800424e:	4649      	mov	r1, r9
 8004250:	4640      	mov	r0, r8
 8004252:	6923      	ldr	r3, [r4, #16]
 8004254:	47d0      	blx	sl
 8004256:	3001      	adds	r0, #1
 8004258:	d0ab      	beq.n	80041b2 <_printf_i+0x166>
 800425a:	6823      	ldr	r3, [r4, #0]
 800425c:	079b      	lsls	r3, r3, #30
 800425e:	d413      	bmi.n	8004288 <_printf_i+0x23c>
 8004260:	68e0      	ldr	r0, [r4, #12]
 8004262:	9b03      	ldr	r3, [sp, #12]
 8004264:	4298      	cmp	r0, r3
 8004266:	bfb8      	it	lt
 8004268:	4618      	movlt	r0, r3
 800426a:	e7a4      	b.n	80041b6 <_printf_i+0x16a>
 800426c:	2301      	movs	r3, #1
 800426e:	4632      	mov	r2, r6
 8004270:	4649      	mov	r1, r9
 8004272:	4640      	mov	r0, r8
 8004274:	47d0      	blx	sl
 8004276:	3001      	adds	r0, #1
 8004278:	d09b      	beq.n	80041b2 <_printf_i+0x166>
 800427a:	3501      	adds	r5, #1
 800427c:	68e3      	ldr	r3, [r4, #12]
 800427e:	9903      	ldr	r1, [sp, #12]
 8004280:	1a5b      	subs	r3, r3, r1
 8004282:	42ab      	cmp	r3, r5
 8004284:	dcf2      	bgt.n	800426c <_printf_i+0x220>
 8004286:	e7eb      	b.n	8004260 <_printf_i+0x214>
 8004288:	2500      	movs	r5, #0
 800428a:	f104 0619 	add.w	r6, r4, #25
 800428e:	e7f5      	b.n	800427c <_printf_i+0x230>
 8004290:	08004c01 	.word	0x08004c01
 8004294:	08004c12 	.word	0x08004c12

08004298 <memchr>:
 8004298:	4603      	mov	r3, r0
 800429a:	b510      	push	{r4, lr}
 800429c:	b2c9      	uxtb	r1, r1
 800429e:	4402      	add	r2, r0
 80042a0:	4293      	cmp	r3, r2
 80042a2:	4618      	mov	r0, r3
 80042a4:	d101      	bne.n	80042aa <memchr+0x12>
 80042a6:	2000      	movs	r0, #0
 80042a8:	e003      	b.n	80042b2 <memchr+0x1a>
 80042aa:	7804      	ldrb	r4, [r0, #0]
 80042ac:	3301      	adds	r3, #1
 80042ae:	428c      	cmp	r4, r1
 80042b0:	d1f6      	bne.n	80042a0 <memchr+0x8>
 80042b2:	bd10      	pop	{r4, pc}

080042b4 <memcpy>:
 80042b4:	440a      	add	r2, r1
 80042b6:	4291      	cmp	r1, r2
 80042b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80042bc:	d100      	bne.n	80042c0 <memcpy+0xc>
 80042be:	4770      	bx	lr
 80042c0:	b510      	push	{r4, lr}
 80042c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80042c6:	4291      	cmp	r1, r2
 80042c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80042cc:	d1f9      	bne.n	80042c2 <memcpy+0xe>
 80042ce:	bd10      	pop	{r4, pc}

080042d0 <memmove>:
 80042d0:	4288      	cmp	r0, r1
 80042d2:	b510      	push	{r4, lr}
 80042d4:	eb01 0402 	add.w	r4, r1, r2
 80042d8:	d902      	bls.n	80042e0 <memmove+0x10>
 80042da:	4284      	cmp	r4, r0
 80042dc:	4623      	mov	r3, r4
 80042de:	d807      	bhi.n	80042f0 <memmove+0x20>
 80042e0:	1e43      	subs	r3, r0, #1
 80042e2:	42a1      	cmp	r1, r4
 80042e4:	d008      	beq.n	80042f8 <memmove+0x28>
 80042e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80042ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80042ee:	e7f8      	b.n	80042e2 <memmove+0x12>
 80042f0:	4601      	mov	r1, r0
 80042f2:	4402      	add	r2, r0
 80042f4:	428a      	cmp	r2, r1
 80042f6:	d100      	bne.n	80042fa <memmove+0x2a>
 80042f8:	bd10      	pop	{r4, pc}
 80042fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80042fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004302:	e7f7      	b.n	80042f4 <memmove+0x24>

08004304 <_free_r>:
 8004304:	b538      	push	{r3, r4, r5, lr}
 8004306:	4605      	mov	r5, r0
 8004308:	2900      	cmp	r1, #0
 800430a:	d040      	beq.n	800438e <_free_r+0x8a>
 800430c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004310:	1f0c      	subs	r4, r1, #4
 8004312:	2b00      	cmp	r3, #0
 8004314:	bfb8      	it	lt
 8004316:	18e4      	addlt	r4, r4, r3
 8004318:	f000 f910 	bl	800453c <__malloc_lock>
 800431c:	4a1c      	ldr	r2, [pc, #112]	; (8004390 <_free_r+0x8c>)
 800431e:	6813      	ldr	r3, [r2, #0]
 8004320:	b933      	cbnz	r3, 8004330 <_free_r+0x2c>
 8004322:	6063      	str	r3, [r4, #4]
 8004324:	6014      	str	r4, [r2, #0]
 8004326:	4628      	mov	r0, r5
 8004328:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800432c:	f000 b90c 	b.w	8004548 <__malloc_unlock>
 8004330:	42a3      	cmp	r3, r4
 8004332:	d908      	bls.n	8004346 <_free_r+0x42>
 8004334:	6820      	ldr	r0, [r4, #0]
 8004336:	1821      	adds	r1, r4, r0
 8004338:	428b      	cmp	r3, r1
 800433a:	bf01      	itttt	eq
 800433c:	6819      	ldreq	r1, [r3, #0]
 800433e:	685b      	ldreq	r3, [r3, #4]
 8004340:	1809      	addeq	r1, r1, r0
 8004342:	6021      	streq	r1, [r4, #0]
 8004344:	e7ed      	b.n	8004322 <_free_r+0x1e>
 8004346:	461a      	mov	r2, r3
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	b10b      	cbz	r3, 8004350 <_free_r+0x4c>
 800434c:	42a3      	cmp	r3, r4
 800434e:	d9fa      	bls.n	8004346 <_free_r+0x42>
 8004350:	6811      	ldr	r1, [r2, #0]
 8004352:	1850      	adds	r0, r2, r1
 8004354:	42a0      	cmp	r0, r4
 8004356:	d10b      	bne.n	8004370 <_free_r+0x6c>
 8004358:	6820      	ldr	r0, [r4, #0]
 800435a:	4401      	add	r1, r0
 800435c:	1850      	adds	r0, r2, r1
 800435e:	4283      	cmp	r3, r0
 8004360:	6011      	str	r1, [r2, #0]
 8004362:	d1e0      	bne.n	8004326 <_free_r+0x22>
 8004364:	6818      	ldr	r0, [r3, #0]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	4401      	add	r1, r0
 800436a:	6011      	str	r1, [r2, #0]
 800436c:	6053      	str	r3, [r2, #4]
 800436e:	e7da      	b.n	8004326 <_free_r+0x22>
 8004370:	d902      	bls.n	8004378 <_free_r+0x74>
 8004372:	230c      	movs	r3, #12
 8004374:	602b      	str	r3, [r5, #0]
 8004376:	e7d6      	b.n	8004326 <_free_r+0x22>
 8004378:	6820      	ldr	r0, [r4, #0]
 800437a:	1821      	adds	r1, r4, r0
 800437c:	428b      	cmp	r3, r1
 800437e:	bf01      	itttt	eq
 8004380:	6819      	ldreq	r1, [r3, #0]
 8004382:	685b      	ldreq	r3, [r3, #4]
 8004384:	1809      	addeq	r1, r1, r0
 8004386:	6021      	streq	r1, [r4, #0]
 8004388:	6063      	str	r3, [r4, #4]
 800438a:	6054      	str	r4, [r2, #4]
 800438c:	e7cb      	b.n	8004326 <_free_r+0x22>
 800438e:	bd38      	pop	{r3, r4, r5, pc}
 8004390:	200001d4 	.word	0x200001d4

08004394 <sbrk_aligned>:
 8004394:	b570      	push	{r4, r5, r6, lr}
 8004396:	4e0e      	ldr	r6, [pc, #56]	; (80043d0 <sbrk_aligned+0x3c>)
 8004398:	460c      	mov	r4, r1
 800439a:	6831      	ldr	r1, [r6, #0]
 800439c:	4605      	mov	r5, r0
 800439e:	b911      	cbnz	r1, 80043a6 <sbrk_aligned+0x12>
 80043a0:	f000 f8bc 	bl	800451c <_sbrk_r>
 80043a4:	6030      	str	r0, [r6, #0]
 80043a6:	4621      	mov	r1, r4
 80043a8:	4628      	mov	r0, r5
 80043aa:	f000 f8b7 	bl	800451c <_sbrk_r>
 80043ae:	1c43      	adds	r3, r0, #1
 80043b0:	d00a      	beq.n	80043c8 <sbrk_aligned+0x34>
 80043b2:	1cc4      	adds	r4, r0, #3
 80043b4:	f024 0403 	bic.w	r4, r4, #3
 80043b8:	42a0      	cmp	r0, r4
 80043ba:	d007      	beq.n	80043cc <sbrk_aligned+0x38>
 80043bc:	1a21      	subs	r1, r4, r0
 80043be:	4628      	mov	r0, r5
 80043c0:	f000 f8ac 	bl	800451c <_sbrk_r>
 80043c4:	3001      	adds	r0, #1
 80043c6:	d101      	bne.n	80043cc <sbrk_aligned+0x38>
 80043c8:	f04f 34ff 	mov.w	r4, #4294967295
 80043cc:	4620      	mov	r0, r4
 80043ce:	bd70      	pop	{r4, r5, r6, pc}
 80043d0:	200001d8 	.word	0x200001d8

080043d4 <_malloc_r>:
 80043d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043d8:	1ccd      	adds	r5, r1, #3
 80043da:	f025 0503 	bic.w	r5, r5, #3
 80043de:	3508      	adds	r5, #8
 80043e0:	2d0c      	cmp	r5, #12
 80043e2:	bf38      	it	cc
 80043e4:	250c      	movcc	r5, #12
 80043e6:	2d00      	cmp	r5, #0
 80043e8:	4607      	mov	r7, r0
 80043ea:	db01      	blt.n	80043f0 <_malloc_r+0x1c>
 80043ec:	42a9      	cmp	r1, r5
 80043ee:	d905      	bls.n	80043fc <_malloc_r+0x28>
 80043f0:	230c      	movs	r3, #12
 80043f2:	2600      	movs	r6, #0
 80043f4:	603b      	str	r3, [r7, #0]
 80043f6:	4630      	mov	r0, r6
 80043f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043fc:	4e2e      	ldr	r6, [pc, #184]	; (80044b8 <_malloc_r+0xe4>)
 80043fe:	f000 f89d 	bl	800453c <__malloc_lock>
 8004402:	6833      	ldr	r3, [r6, #0]
 8004404:	461c      	mov	r4, r3
 8004406:	bb34      	cbnz	r4, 8004456 <_malloc_r+0x82>
 8004408:	4629      	mov	r1, r5
 800440a:	4638      	mov	r0, r7
 800440c:	f7ff ffc2 	bl	8004394 <sbrk_aligned>
 8004410:	1c43      	adds	r3, r0, #1
 8004412:	4604      	mov	r4, r0
 8004414:	d14d      	bne.n	80044b2 <_malloc_r+0xde>
 8004416:	6834      	ldr	r4, [r6, #0]
 8004418:	4626      	mov	r6, r4
 800441a:	2e00      	cmp	r6, #0
 800441c:	d140      	bne.n	80044a0 <_malloc_r+0xcc>
 800441e:	6823      	ldr	r3, [r4, #0]
 8004420:	4631      	mov	r1, r6
 8004422:	4638      	mov	r0, r7
 8004424:	eb04 0803 	add.w	r8, r4, r3
 8004428:	f000 f878 	bl	800451c <_sbrk_r>
 800442c:	4580      	cmp	r8, r0
 800442e:	d13a      	bne.n	80044a6 <_malloc_r+0xd2>
 8004430:	6821      	ldr	r1, [r4, #0]
 8004432:	3503      	adds	r5, #3
 8004434:	1a6d      	subs	r5, r5, r1
 8004436:	f025 0503 	bic.w	r5, r5, #3
 800443a:	3508      	adds	r5, #8
 800443c:	2d0c      	cmp	r5, #12
 800443e:	bf38      	it	cc
 8004440:	250c      	movcc	r5, #12
 8004442:	4638      	mov	r0, r7
 8004444:	4629      	mov	r1, r5
 8004446:	f7ff ffa5 	bl	8004394 <sbrk_aligned>
 800444a:	3001      	adds	r0, #1
 800444c:	d02b      	beq.n	80044a6 <_malloc_r+0xd2>
 800444e:	6823      	ldr	r3, [r4, #0]
 8004450:	442b      	add	r3, r5
 8004452:	6023      	str	r3, [r4, #0]
 8004454:	e00e      	b.n	8004474 <_malloc_r+0xa0>
 8004456:	6822      	ldr	r2, [r4, #0]
 8004458:	1b52      	subs	r2, r2, r5
 800445a:	d41e      	bmi.n	800449a <_malloc_r+0xc6>
 800445c:	2a0b      	cmp	r2, #11
 800445e:	d916      	bls.n	800448e <_malloc_r+0xba>
 8004460:	1961      	adds	r1, r4, r5
 8004462:	42a3      	cmp	r3, r4
 8004464:	6025      	str	r5, [r4, #0]
 8004466:	bf18      	it	ne
 8004468:	6059      	strne	r1, [r3, #4]
 800446a:	6863      	ldr	r3, [r4, #4]
 800446c:	bf08      	it	eq
 800446e:	6031      	streq	r1, [r6, #0]
 8004470:	5162      	str	r2, [r4, r5]
 8004472:	604b      	str	r3, [r1, #4]
 8004474:	4638      	mov	r0, r7
 8004476:	f104 060b 	add.w	r6, r4, #11
 800447a:	f000 f865 	bl	8004548 <__malloc_unlock>
 800447e:	f026 0607 	bic.w	r6, r6, #7
 8004482:	1d23      	adds	r3, r4, #4
 8004484:	1af2      	subs	r2, r6, r3
 8004486:	d0b6      	beq.n	80043f6 <_malloc_r+0x22>
 8004488:	1b9b      	subs	r3, r3, r6
 800448a:	50a3      	str	r3, [r4, r2]
 800448c:	e7b3      	b.n	80043f6 <_malloc_r+0x22>
 800448e:	6862      	ldr	r2, [r4, #4]
 8004490:	42a3      	cmp	r3, r4
 8004492:	bf0c      	ite	eq
 8004494:	6032      	streq	r2, [r6, #0]
 8004496:	605a      	strne	r2, [r3, #4]
 8004498:	e7ec      	b.n	8004474 <_malloc_r+0xa0>
 800449a:	4623      	mov	r3, r4
 800449c:	6864      	ldr	r4, [r4, #4]
 800449e:	e7b2      	b.n	8004406 <_malloc_r+0x32>
 80044a0:	4634      	mov	r4, r6
 80044a2:	6876      	ldr	r6, [r6, #4]
 80044a4:	e7b9      	b.n	800441a <_malloc_r+0x46>
 80044a6:	230c      	movs	r3, #12
 80044a8:	4638      	mov	r0, r7
 80044aa:	603b      	str	r3, [r7, #0]
 80044ac:	f000 f84c 	bl	8004548 <__malloc_unlock>
 80044b0:	e7a1      	b.n	80043f6 <_malloc_r+0x22>
 80044b2:	6025      	str	r5, [r4, #0]
 80044b4:	e7de      	b.n	8004474 <_malloc_r+0xa0>
 80044b6:	bf00      	nop
 80044b8:	200001d4 	.word	0x200001d4

080044bc <_realloc_r>:
 80044bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044c0:	4680      	mov	r8, r0
 80044c2:	4614      	mov	r4, r2
 80044c4:	460e      	mov	r6, r1
 80044c6:	b921      	cbnz	r1, 80044d2 <_realloc_r+0x16>
 80044c8:	4611      	mov	r1, r2
 80044ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80044ce:	f7ff bf81 	b.w	80043d4 <_malloc_r>
 80044d2:	b92a      	cbnz	r2, 80044e0 <_realloc_r+0x24>
 80044d4:	f7ff ff16 	bl	8004304 <_free_r>
 80044d8:	4625      	mov	r5, r4
 80044da:	4628      	mov	r0, r5
 80044dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044e0:	f000 f838 	bl	8004554 <_malloc_usable_size_r>
 80044e4:	4284      	cmp	r4, r0
 80044e6:	4607      	mov	r7, r0
 80044e8:	d802      	bhi.n	80044f0 <_realloc_r+0x34>
 80044ea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80044ee:	d812      	bhi.n	8004516 <_realloc_r+0x5a>
 80044f0:	4621      	mov	r1, r4
 80044f2:	4640      	mov	r0, r8
 80044f4:	f7ff ff6e 	bl	80043d4 <_malloc_r>
 80044f8:	4605      	mov	r5, r0
 80044fa:	2800      	cmp	r0, #0
 80044fc:	d0ed      	beq.n	80044da <_realloc_r+0x1e>
 80044fe:	42bc      	cmp	r4, r7
 8004500:	4622      	mov	r2, r4
 8004502:	4631      	mov	r1, r6
 8004504:	bf28      	it	cs
 8004506:	463a      	movcs	r2, r7
 8004508:	f7ff fed4 	bl	80042b4 <memcpy>
 800450c:	4631      	mov	r1, r6
 800450e:	4640      	mov	r0, r8
 8004510:	f7ff fef8 	bl	8004304 <_free_r>
 8004514:	e7e1      	b.n	80044da <_realloc_r+0x1e>
 8004516:	4635      	mov	r5, r6
 8004518:	e7df      	b.n	80044da <_realloc_r+0x1e>
	...

0800451c <_sbrk_r>:
 800451c:	b538      	push	{r3, r4, r5, lr}
 800451e:	2300      	movs	r3, #0
 8004520:	4d05      	ldr	r5, [pc, #20]	; (8004538 <_sbrk_r+0x1c>)
 8004522:	4604      	mov	r4, r0
 8004524:	4608      	mov	r0, r1
 8004526:	602b      	str	r3, [r5, #0]
 8004528:	f7fc fd80 	bl	800102c <_sbrk>
 800452c:	1c43      	adds	r3, r0, #1
 800452e:	d102      	bne.n	8004536 <_sbrk_r+0x1a>
 8004530:	682b      	ldr	r3, [r5, #0]
 8004532:	b103      	cbz	r3, 8004536 <_sbrk_r+0x1a>
 8004534:	6023      	str	r3, [r4, #0]
 8004536:	bd38      	pop	{r3, r4, r5, pc}
 8004538:	200001dc 	.word	0x200001dc

0800453c <__malloc_lock>:
 800453c:	4801      	ldr	r0, [pc, #4]	; (8004544 <__malloc_lock+0x8>)
 800453e:	f000 b811 	b.w	8004564 <__retarget_lock_acquire_recursive>
 8004542:	bf00      	nop
 8004544:	200001e0 	.word	0x200001e0

08004548 <__malloc_unlock>:
 8004548:	4801      	ldr	r0, [pc, #4]	; (8004550 <__malloc_unlock+0x8>)
 800454a:	f000 b80c 	b.w	8004566 <__retarget_lock_release_recursive>
 800454e:	bf00      	nop
 8004550:	200001e0 	.word	0x200001e0

08004554 <_malloc_usable_size_r>:
 8004554:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004558:	1f18      	subs	r0, r3, #4
 800455a:	2b00      	cmp	r3, #0
 800455c:	bfbc      	itt	lt
 800455e:	580b      	ldrlt	r3, [r1, r0]
 8004560:	18c0      	addlt	r0, r0, r3
 8004562:	4770      	bx	lr

08004564 <__retarget_lock_acquire_recursive>:
 8004564:	4770      	bx	lr

08004566 <__retarget_lock_release_recursive>:
 8004566:	4770      	bx	lr

08004568 <_init>:
 8004568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800456a:	bf00      	nop
 800456c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800456e:	bc08      	pop	{r3}
 8004570:	469e      	mov	lr, r3
 8004572:	4770      	bx	lr

08004574 <_fini>:
 8004574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004576:	bf00      	nop
 8004578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800457a:	bc08      	pop	{r3}
 800457c:	469e      	mov	lr, r3
 800457e:	4770      	bx	lr
